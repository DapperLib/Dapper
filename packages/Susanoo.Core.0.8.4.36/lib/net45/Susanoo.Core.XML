<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Susanoo.Core</name>
    </assembly>
    <members>
        <member name="T:Susanoo.AllowedActionsAttribute">
            <summary>
            Allows declarative specification of when reading and writing to properties is allowed.
            </summary>
        </member>
        <member name="M:Susanoo.AllowedActionsAttribute.#ctor(Susanoo.DescriptorActions)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.AllowedActionsAttribute"/> class.
            </summary>
            <param name="actions">The actions in which this property is allowed to participate.</param>
        </member>
        <member name="M:Susanoo.AllowedActionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.AllowedActionsAttribute"/> class.
            </summary>
        </member>
        <member name="P:Susanoo.AllowedActionsAttribute.Actions">
            <summary>
            Gets the allowed actions for a property.
            </summary>
            <value>The actions allowed.</value>
        </member>
        <member name="T:Susanoo.CompareMethod">
            <summary>
            All possible compare methods for dynamic where clauses.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.Ignore">
            <summary>
            Remove the property from the comparison.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.Override">
            <summary>
            Provide a hand-coded comparison.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.Equal">
            <summary>
            Values must equal.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.LessThan">
            <summary>
            Column value must be less than parameter value.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.LessThanOrEqual">
            <summary>
            Column value must be less than or equal parameter value.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.GreaterThan">
            <summary>
            Column value must be greater than parameter value.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.GreaterThanOrEqual">
            <summary>
            Column value must be greater than or equal parameter value.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.NotEqual">
            <summary>
            Values must NOT equal.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.StartsWith">
            <summary>
            Column value must start with parameter value.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.EndsWith">
            <summary>
            Column value must end with parameter value.
            </summary>
        </member>
        <member name="F:Susanoo.CompareMethod.Contains">
            <summary>
            Column value must contain parameter value.
            </summary>
        </member>
        <member name="T:Susanoo.Comparison">
            <summary>
            Comparison options
            </summary>
        </member>
        <member name="M:Susanoo.Comparison.Override(System.String)">
            <summary>
            Overrides the comparison with a provided comparison string.
            </summary>
            <param name="overrideText">The override text.</param>
        </member>
        <member name="M:Susanoo.Comparison.GetComparisonFormat(Susanoo.CompareMethod)">
            <summary>
            Gets the comparison format string.
            </summary>
            <param name="compare">The compare.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Susanoo.Comparison.Ignore">
            <summary>
            Remove the property from the comparison.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.Equal">
            <summary>
            Values must equal.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.LessThan">
            <summary>
            Column value must be less than parameter value.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.LessThanOrEqual">
            <summary>
            Column value must be less than or equal parameter value.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.GreaterThan">
            <summary>
            Column value must be greater than parameter value.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.GreaterThanOrEqual">
            <summary>
            Column value must be greater than or equal parameter value.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.NotEqual">
            <summary>
            Values must NOT equal.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.StartsWith">
            <summary>
            Column value must start with parameter value.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.EndsWith">
            <summary>
            Column value must end with parameter value.
            </summary>
        </member>
        <member name="P:Susanoo.Comparison.Contains">
            <summary>
            Column value must contain parameter value.
            </summary>
        </member>
        <member name="T:Susanoo.ComparisonOverride">
            <summary>
            Replacement comparison for override
            </summary>
        </member>
        <member name="M:Susanoo.ComparisonOverride.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.ComparisonOverride"/> class.
            </summary>
            <param name="overrideText">The override text.</param>
        </member>
        <member name="M:Susanoo.ComparisonOverride.ToString">
            <summary>
            Override Text.
            </summary>
        </member>
        <member name="P:Susanoo.ComparisonOverride.OverrideText">
            <summary>
            Gets the override text.
            </summary>
            <value>The override text.</value>
        </member>
        <member name="T:Susanoo.ISusanooBootstrapper">
            <summary>
            Exposure points for extending or overriding Susanoo's behavior.
            </summary>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.RetrieveCommandBuilder">
            <summary>
            Gets or sets the command builder.
            </summary>
            <value>The command builder.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.RetrieveDeserializerResolver">
            <summary>
            Retrieves the deserializer resolver.
            </summary>
            <returns>IDeserializerResolver.</returns>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.RetrievePropertyMetadataExtractor">
            <summary>
            Retrieves the property metadata extractor Default uses ComponentModel Attributes.
            </summary>
            <returns>IPropertyMetadataExtractor.</returns>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.RetrieveIgnoredPropertyAttributes">
            <summary>
            Retrieves a set of attributes to use to determine when to ignore a property unless explicitly included.
            </summary>
            <returns>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;.</returns>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.OnExecutionException(Susanoo.Pipeline.Command.ICommandInfo,System.Exception,System.Data.Common.DbParameter[])">
            <summary>
            Called when an execution exception is encountered.
            </summary>
            <param name="info">The information.</param>
            <param name="exception">The exception.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.RetrieveOrderByRegex">
            <summary>
            Retrieves the order by regex used for whitelisting allowed cahracters.
            </summary>
            <returns>Regex.</returns>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.RetrieveQueryWrapperFormat">
            <summary>
            Retrieves the query wrapper format.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Susanoo.ISusanooBootstrapper.BuildQueryWrapper(System.String)">
            <summary>
            Builds a query wrapper.
            </summary>
            <param name="additionalColumns">The additional columns.</param>
            <returns>CommandModifier.</returns>
        </member>
        <member name="M:Susanoo.ObjectExtensions.ToExpando(System.Object)">
            <summary>
            Converts an object to an ExpandoObject.
            </summary>
            <param name="anonymousObject">The anonymous object.</param>
            <returns>ExpandoObject.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ICommandInfo">
            <summary>
            Basic details about a Command as defined by a command expression
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ICommandInfo.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ICommandInfo.DbCommandType">
            <summary>
            Gets the type of the database command.
            </summary>
            <value>The type of the database command.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ICommandInfo`1">
            <summary>
            Basic details about a Command and parameter building.
            </summary>
        </member>
        <member name="T:Susanoo.Pipeline.IFluentPipelineFragment">
            <summary>
            A fragment or step in the Fluent Pipeline API.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.IFluentPipelineFragment.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandInfo`1.BuildParameters(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Builds the parameters (Not part of Fluent API).
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">Additional parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;DbParameter&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ICommandInfo`1.AllowStoringColumnInfo">
            <summary>
            Gets a value indicating whether storing column information is allowed.
            </summary>
            <value><c>true</c> if [allow store column information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.IExecutableCommandInfo">
            <summary>
            Represents a ready to be executed command.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.IExecutableCommandInfo.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ExecutableCommandInfo">
            <summary>
            Represents a ready to be executed command.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ExecutableCommandInfo.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ExecutableCommandInfo.DbCommandType">
            <summary>
            Gets the type of the database command.
            </summary>
            <value>The type of the database command.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ExecutableCommandInfo.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1">
            <summary>
            Base implementation for Command Results.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo`1">
            <summary>
            Exposes information to Command Processors for result mapping.
            </summary>
            <typeparam name="TFilter">The type of the t filter.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo`1.GetCommandInfo">
            <summary>
            Gets or sets the command information.
            </summary>
            <value>The command information.</value>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo`1.GetExporter">
            <summary>
            Converts to a single result expression.
            </summary>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo`1.CommandModifiers">
            <summary>
            Gets the command modifiers.
            </summary>
            <value>The command modifiers.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport">
            <summary>
            Exposes property mapping export capabilities.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport.Export(System.Type)">
            <summary>
            Exports a results mappings for processing.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>IDictionary&lt;System.String, IPropertyMapping&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0},Susanoo.Pipeline.Command.ResultSets.ICommandResultImplementor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="implementor">The implementor.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.AddQueryWrapper(System.String)">
            <summary>
            Adds a query wrapper.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.GetTypeArgumentHashCode(System.Type)">
            <summary>
            Gets the type argument hash code.
            </summary>
            <param name="type">The type.</param>
            <returns>BigInteger.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.Export(System.Type)">
            <summary>
            Exports a results mappings for processing.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>IDictionary&lt;System.String, IPropertyMapping&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.ToSingleResult``1">
            <summary>
            Converts to a single result expression.
            </summary>
            <typeparam name="TSingle">The type of the single.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TSingle&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.TryAddCommandModifier(Susanoo.Pipeline.Command.CommandModifier)">
            <summary>
            Tries to add command modifier.
            </summary>
            <param name="modifier">The modifier.</param>
            <returns><c>true</c> if no other modifier exists with the same priority, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.AddOrReplaceCommandModifier(Susanoo.Pipeline.Command.CommandModifier)">
            <summary>
            Adds or overwrites a command modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.GetCommandInfo">
            <summary>
            Gets or sets the command information.
            </summary>
            <returns>ICommandInfo&lt;TFilter&gt;.</returns>
            <value>The command information.</value>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.GetExporter">
            <summary>
                Gets the mappings exporter.
            </summary>
            <returns>ICommandResultMappingExport.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.Command">
            <summary>
            Gets the command expression.
            </summary>
            <value>The command expression.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.Implementor">
            <summary>
            Gets the implementor of the Commandresult functionality.
            </summary>
            <value>The implementor.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultCommon`1.CommandModifiers">
            <summary>
            Gets the command modifiers.
            </summary>
            <value>The command modifiers.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpressionCore`1">
            <summary>
            Shared components for Command Result Expressions.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpressionCore`1.TryAddCommandModifier(Susanoo.Pipeline.Command.CommandModifier)">
            <summary>
            Tries to add a command modifier.
            </summary>
            <param name="modifier">The modifier.</param>
            <returns><c>true</c> if no other modifier exists with the same priority, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpressionCore`1.AddOrReplaceCommandModifier(Susanoo.Pipeline.Command.CommandModifier)">
            <summary>
            Adds or replaces a command modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpressionCore`1.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.CommandModifier">
            <summary>
            Describes and places a priority ranking on a modification of a command.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandModifier.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandModifier.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandModifier.ModifierFunc">
            <summary>
            Gets or sets the modifier function.
            </summary>
            <value>The modifier function.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandModifier.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.BuiltInTypeDeserializer">
            <summary>
            Provides deserialization for built in types
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.BuiltInTypeDeserializer.Deserialize``1(System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Reads the first value only and casts to built in type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="reader">The reader.</param>
            <param name="checker">The column checker.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
            <exception cref="T:System.InvalidCastException">Value types cannot cast null.</exception>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow">
            <summary>
            Represents values from an IDataRecord object.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.#ctor(Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow"/> class.
            </summary>
            <param name="columns">The columns Susanoo has discovered and will map to properties.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.#ctor(Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow"/> class.
            </summary>
            <param name="columns">The columns Susanoo has discovered and will map to properties.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if column count and value count do not match.
            </exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" />
             responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.GetValue(System.Int32)">
            <summary>
            Gets the value at a specified index.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.GetValue(System.String)">
            <summary>
            Gets the value for a column name.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.SetValue(System.Int32,System.Object)">
            <summary>
            Sets a value at a specified index.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.SetValue(System.String,System.Object)">
            <summary>
            Sets a value to a column.
            </summary>
            <param name="columnName">The name of the column in SQL.</param>
            <param name="value">The value of the column in this record.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.ToArray">
            <summary>
            Returns the array of values in the row.
            </summary>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.ToDictionary">
            <summary>
            Converts to a dictionary (Only named columns)
            </summary>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRow.Length">
            <summary>
            Gets the length of the values array.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta">
            <summary>
            Overrides for Dynamic that uses common methods for properties rather than reflection binding for each property.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.
            </summary>
            <param name="expression">
            The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.
            </param>
            <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.
            </summary>
            <param name="expression">
            The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.
            </param>
            <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
            <param name="value">The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" /> that represents the details of the dynamic operation.
            </param>
            <param name="args">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Performs the binding of the dynamic get member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.GetMemberBinder" /> that represents the details of the dynamic operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.SetMemberBinder" /> that represents the details of the dynamic operation.
            </param>
            <param name="value">
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>The list of dynamic member names.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic get index operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.GetIndexBinder" /> that represents the details of the dynamic operation.
            </param>
            <param name="indexes">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the get index operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowMeta.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set index operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.SetIndexBinder" /> that represents the details of the dynamic operation.
            </param>
            <param name="indexes">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the set index operation.
            </param>
            <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> 
            representing the value for the set index operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.
            </returns>
        </member>
        <member name="T:Susanoo.ExceptionHandler">
            <summary>
            Describes how to handle an exception based on conditions.
            </summary>
        </member>
        <member name="M:Susanoo.ExceptionHandler.#ctor(System.Func{Susanoo.Pipeline.Command.ICommandInfo,System.Exception,System.Data.Common.DbParameter[],System.Boolean},System.Action{Susanoo.Pipeline.Command.ICommandInfo,System.Exception,System.Data.Common.DbParameter[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.ExceptionHandler"/> class.
            </summary>
            <param name="conditionFunc">The condition function.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="P:Susanoo.ExceptionHandler.Handler">
            <summary>
            Gets the exception handler.
            </summary>
            <value>The handler.</value>
        </member>
        <member name="P:Susanoo.ExceptionHandler.ConditionFunc">
            <summary>
            Gets the condition function.
            </summary>
            <value>The condition function.</value>
        </member>
        <member name="T:Susanoo.Map`2">
            <summary>
            A simple bidirectional Dictionary that allows efficient lookup on either key or value.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExtensions">
            <summary>
            Extension methods for ICommandResultExpressions
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExtensions.GetProcessor``2(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{``0})">
            <summary>
            Gets a matching processor.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="resultInfo">The result information.</param>
            <returns>IResultMapper&lt;TResult&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExport">
            <summary>
            Exposes property mapping export capabilities.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExport.Export">
            <summary>
            Exports this instance.
            </summary>
            <returns>IDictionary&lt;System.String, Action&lt;IPropertyMappingConfiguration&lt;IDataRecord&gt;&gt;&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingImplementor`1">
            <summary>
            A step in the command definition Fluent API, in which properties are mapped to potential result data.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingImplementor`1.ClearMappings">
            <summary>
            Clears the result mappings.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingImplementor`1.ForProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingImplementor`1.ForProperty(System.String,System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingImplementor`1.MapDeclarativeProperties">
            <summary>
            Maps the declarative properties.
            </summary>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMapping">
            <summary>
            Allows retrieval of configurations at the property level.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMapping.AssembleMappingExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Assembles the mapping expression.
            </summary>
            <param name="propertyExpression">The property.</param>
            <returns>Expression&lt;Action&lt;IDataRecord, int&gt;&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMapping.PropertyMetadata">
            <summary>
            Gets the property metadata.
            </summary>
            <value>The property metadata.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMapping.ActiveAlias">
            <summary>
            Gets or sets the name of the return column.
            </summary>
            <value>The name of the return.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem">
            <summary>
            Represents cached data and the rules surrounding it.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.#ctor(System.Object,Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.RenewIntervals">
            <summary>
            Renews the intervals.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.CachingMode">
            <summary>
            Gets the caching mode.
            </summary>
            <value>The caching mode.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.Interval">
            <summary>
            Gets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.CallCount">
            <summary>
            Gets the call count.
            </summary>
            <value>The call count.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CacheItem.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode">
            <summary>
            Caching modes supported by Susanoo
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode.None">
            <summary>
            No caching
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode.Permanent">
            <summary>
            Do not expire cached items
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode.TimeSpan">
            <summary>
            Expire the cached items every second interval
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode.RepeatedRequestLimit">
            <summary>
            Expire the cached items every interval of requests for the data
            </summary>
        </member>
        <member name="T:Susanoo.Exceptions.ColumnBindingException">
            <summary>
            Exception that describes a condition which has caused mapping to fail at a column to property level.
            </summary>
        </member>
        <member name="M:Susanoo.Exceptions.ColumnBindingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Exceptions.ColumnBindingException"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.Exceptions.ColumnBindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Exceptions.ColumnBindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="F:Susanoo.Exceptions.ColumnBindingException.MessageAndInnerExceptionConstructorInfo">
            <summary>
            The message and inner exception constructor information for this type.
            </summary>
        </member>
        <member name="M:Susanoo.Exceptions.ColumnBindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Exceptions.ColumnBindingException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            <paramref name="innerException"/> parameter is not a null reference (Nothing in Visual Basic), the current
            exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Susanoo.Exceptions.ColumnBindingException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Exceptions.ColumnBindingException"/> class with a specified message and error
            code.
            </summary>
            <param name="message">The message that indicates the reason the exception occurred.</param>
            <param name="errorCode">The error code (HRESULT) value associated with the exception.</param>
        </member>
        <member name="M:Susanoo.Exceptions.ColumnBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Exceptions.ColumnBindingException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker">
            <summary>
            Tracks available fields in return results to allow for efficient column existence checks.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.TryGetValue(System.Int32,System.String@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if contains key, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.TryGetValue(System.String,System.Int32@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if contains key, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.HasColumn(System.Data.IDataRecord,System.String)">
            <summary>
             Determines whether the specified record has a column.
            </summary>
            <param name="record">The record.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified record has column; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.HasColumn(System.Data.IDataRecord,System.Int32)">
            <summary>
            Determines whether the specified record has a column.
            </summary>
            <param name="record">The record.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if the specified record has column; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.ExportReport">
            <summary>
            Exports a dictionary showing mapped columns and indexes.
            </summary>
            <returns>Dictionary&lt;System.String, System.Int32&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>ColumnChecker.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker.Count">
            <summary>
            Gets the count of columns mapped.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Susanoo.Pipeline.CommandBuilder">
            <summary>
            Provides an entry point to defining commands and therein entering the Susanoo command Fluent API.
            </summary>
        </member>
        <member name="T:Susanoo.Pipeline.ICommandExpressionBuilder">
            <summary>
            Provides an entry point to defining commands and therein entering the Susanoo command Fluent API.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.ICommandExpressionBuilder.DefineCommand``1(System.String,System.Data.CommandType)">
            <summary>
            Begins the command definition process using a Fluent API implementation, move to next step with DefineResults on
            the result of this call.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.ICommandExpressionBuilder.DefineCommand(System.String,System.Data.CommandType)">
            <summary>
            Begins the command definition process using a Fluent API implementation, move to next step with DefineResults on
            the result of this call.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.CommandBuilder.DefineCommand``1(System.String,System.Data.CommandType)">
            <summary>
            Begins the command definition process using a Fluent API implementation, move to next step with DefineResults on
            the result of this call.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
            <exception cref="T:System.ArgumentException">No command text provided.;commandText
            or
            TableDirect is not supported.;commandType</exception>
        </member>
        <member name="M:Susanoo.Pipeline.CommandBuilder.DefineCommand(System.String,System.Data.CommandType)">
            <summary>
            Begins the command definition process using a Fluent API implementation, move to next step with DefineResults on
            the result of this call.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
            <exception cref="T:System.ArgumentException">No command text provided.;commandText
            or
            TableDirect is not supported.;commandType</exception>
        </member>
        <member name="T:Susanoo.Pipeline.Command.CommandExpression`1">
            <summary>
                Contains information needed to build a command and provides FluentPipeline methods for defining results and
                modifiers.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ICommandExpression`1">
            <summary>
            Susanoo's initial step in the command definition Fluent API, in which parameters and command information are
            provided.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.Realize">
            <summary>
            Realizes the pipeline with no result mappings.
            </summary>
            <returns>ICommandProcessor&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DoNotStoreColumnIndexes">
            <summary>
            Disables Susanoo's ability to cache a result sets column indexes and names for faster retrieval.
            This is typically only needed for stored procedures that return different columns or columns 
            in different orders based on criteria in the procedure.
            </summary>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.SendNullValues(Susanoo.Pipeline.Command.NullValueMode)">
            <summary>
            ADO.NET ignores parameters with NULL values. calling this opts in to send DbNull in place of NULL on standard
            parameters.
            Properties with modifier Actions do NOT qualify for this behavior
            </summary>
            <param name="mode">The mode.</param>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.AddConstantParameter(System.String,System.Action{System.Data.Common.DbParameter})">
            <summary>
            Adds parameters that will always use the same value.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterBuilder">The parameter builder.</param>
            <returns>ICommandExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.UseExplicitPropertyInclusionMode">
            <summary>
            Uses the explicit property inclusion mode for including parameters from a potential filter.
            </summary>
            <returns>ICommandExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.ExcludeProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Excludes a property of the filter.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>ICommandExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.ExcludeProperty(System.String)">
            <summary>
            Excludes a property of the filter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.IncludeProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes a property of the filter.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>ICommandExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.IncludeProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Data.Common.DbParameter})">
            <summary>
            Includes a property of the filter or modifies its inclusion.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="parameterOptions">The parameter options.</param>
            <returns>ICommandExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.IncludeProperty(System.String)">
            <summary>
            Includes a property of the filter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>ICommandExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.IncludeProperty(System.String,System.Action{System.Data.Common.DbParameter})">
            <summary>
            Includes a property of the filter or modifies its inclusion.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="parameterOptions">The parameter options.</param>
            <returns>ICommandExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``1">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``2">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``3">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``4">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``5">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``6">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <typeparam name="TResult6">The type of the result6.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ICommandExpression`1.DefineResults``7">
            <summary>
            Defines the result mappings (Moves to next Step in Fluent API).
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <typeparam name="TResult6">The type of the result6.</typeparam>
            <typeparam name="TResult7">The type of the result7.</typeparam>
            <returns>IResultMappingExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ICommandExpression`1.CommandText">
            <summary>
            Gets or sets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="F:Susanoo.Pipeline.Command.CommandExpression`1._constantParameters">
            <summary>
                The constant parameters
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.CommandExpression`1._parameterExclusions">
            <summary>
                The parameter exclusions
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.CommandExpression`1._parameterInclusions">
            <summary>
                The parameter inclusions
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.CommandExpression`1._explicitInclusionMode">
            <summary>
                The explicit inclusion mode
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.#ctor(System.String,System.Data.CommandType)">
            <summary>
                Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.CommandExpression`1"/> class.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <exception cref="T:System.ArgumentNullException">
                databaseManager
                or
                commandText
            </exception>
            <exception cref="T:System.ArgumentException">
                No command text provided.;commandText
                or
                TableDirect is not supported.;commandType
            </exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.BuildParameters(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Builds the parameters (Not part of Fluent API).
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">Additional parameters.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;DbParameter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.Realize">
            <summary>
                Realizes the pipeline with no result mappings.
            </summary>
            <returns>ICommandProcessor&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.AddConstantParameter(System.String,System.Action{System.Data.Common.DbParameter})">
            <summary>
                Adds parameters that will always use the same value.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterModifier">The parameter modifier.</param>
            <returns>ICommandExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.SendNullValues(Susanoo.Pipeline.Command.NullValueMode)">
            <summary>
                ADO.NET ignores parameters with NULL values. calling this opts in to send DbNull in place of NULL on standard
                parameters.
                Properties with modifier Actions do NOT qualify for this behavior
            </summary>
            <param name="mode">The mode.</param>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DoNotStoreColumnIndexes">
            <summary>
                Disables Susanoo's ability to cache a result sets column indexes and names for faster retrieval.
                This is typically only needed for stored procedures that return different columns or columns in different orders
                based on criteria in the procedure.
            </summary>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.UseExplicitPropertyInclusionMode">
            <summary>
                Uses the explicit property inclusion mode for a potential filter.
            </summary>
            <returns>ICommandExpression&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.ExcludeProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Excludes a property of the filter.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.ExcludeProperty(System.String)">
            <summary>
                Excludes a property of the filter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.IncludeProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Includes the property of the filter.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.IncludeProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Data.Common.DbParameter})">
            <summary>
                Includes the property of the filter.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="parameterOptions">The parameter options.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.IncludeProperty(System.String)">
            <summary>
                Includes the property of the filter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.IncludeProperty(System.String,System.Action{System.Data.Common.DbParameter})">
            <summary>
                Includes the property of the filter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="parameterOptions">The parameter options.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``1">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``2">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``3">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``4">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``5">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``6">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <typeparam name="TResult6">The type of the result6.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.DefineResults``7">
            <summary>
                Defines the result mappings.
            </summary>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <typeparam name="TResult6">The type of the result6.</typeparam>
            <typeparam name="TResult7">The type of the result7.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.ComputeHash">
            <summary>
                Computes the hash.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.BuildPropertyParameters(Susanoo.IDatabaseManager,System.Object)">
            <summary>
                Builds the property inclusion parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <returns>IEnumerable&lt;DbParameter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.ReplaceNullWithDbNull(System.Object)">
            <summary>
                Replaces the null with database null.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.BuildParameters(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Builds the parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;DbParameter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.CommandExpression`1.BuildParameters(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Builds the parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;DbParameter&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandExpression`1.DbCommandType">
            <summary>
                Gets the type of the database command.
            </summary>
            <value>The type of the database command.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandExpression`1.AllowStoringColumnInfo">
            <summary>
                Gets a value indicating whether storing column information is allowed.
            </summary>
            <value><c>true</c> if [allow store column information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandExpression`1.CommandText">
            <summary>
                Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.CommandExpression`1.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.CommandManager">
            <summary>
            This class is used as the single entry point when using with Susanoo.
            </summary>
        </member>
        <member name="F:Susanoo.CommandManager.ExpressionAssembly">
            <summary>
            Gets the expression assembly that contains runtime compiled methods used for mappings.
            </summary>
            <value>The expression assembly.</value>
        </member>
        <member name="F:Susanoo.CommandManager.ModuleBuilder">
            <summary>
            The module builder for the dynamic assembly.
            </summary>
        </member>
        <member name="M:Susanoo.CommandManager.HandleExecutionException(Susanoo.Pipeline.Command.ICommandInfo,System.Exception,System.Data.Common.DbParameter[])">
            <summary>
            Handles exceptions in execution.
            </summary>
            <param name="commandInfo">The command expression information.</param>
            <param name="ex">The ex.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Susanoo.CommandManager.DefineCommand``1(System.String,System.Data.CommandType)">
            <summary>
            Begins the command definition process using a Fluent API implementation, move to next step with DefineMappings on
            the result of this call.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.CommandManager.DefineCommand(System.String,System.Data.CommandType)">
            <summary>
            Begins the command definition process using a Fluent API implementation, move to next step with DefineMappings on
            the result of this call.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>ICommandExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.CommandManager.GetDbType(System.Type)">
            <summary>
            Gets the database type from the CLR type for use in parameters.
            </summary>
            <param name="type">The CLR type.</param>
            <returns>DbType.</returns>
        </member>
        <member name="M:Susanoo.CommandManager.TryGetCommandProcessor(System.Numerics.BigInteger,ICommandProcessorWithResults@)">
            <summary>
            Attempts to get a command processor by hash code.
            </summary>
            <param name="hash">The hash.</param>
            <param name="commandProcessor">The command processor.</param>
            <returns><c>true</c> if a command processor with the same configuration has been registered and not garbage collected,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Susanoo.CommandManager.TryGetCommandProcessor(System.String,ICommandProcessorWithResults@)">
            <summary>
            Attempts to get a command processor by name.
            </summary>
            <param name="name">The name of the processor.</param>
            <param name="commandProcessor">The command processor.</param>
            <returns><c>true</c> if a command processor with the same configuration has been registered and not garbage collected,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Susanoo.CommandManager.RegisterCommandProcessor(ICommandProcessorWithResults,System.String,System.Numerics.BigInteger)">
            <summary>
            Registers the command processor.
            </summary>
            <param name="processor">The processor.</param>
            <param name="name">The name.</param>
            <param name="hashCodeOverride">The hash code override.</param>
        </member>
        <member name="M:Susanoo.CommandManager.FlushCacheGlobally">
            <summary>
            Flushes caches on all command processors.
            </summary>
        </member>
        <member name="M:Susanoo.CommandManager.ClearColumnIndexInfo(ICommandProcessorWithResults)">
            <summary>
            Clears any column index information that may have been cached.
            </summary>
            <param name="processor">The processor.</param>
            <exception cref="T:System.ArgumentNullException">processor</exception>
        </member>
        <member name="M:Susanoo.CommandManager.ClearColumnIndexInfo">
            <summary>
            Clears any column index information that may have been cached.
            </summary>
        </member>
        <member name="M:Susanoo.CommandManager.FlushCache(System.String)">
            <summary>
            Flushes caches on a specific named command processor.
            </summary>
            <param name="name">The name of the command processor.</param>
        </member>
        <member name="M:Susanoo.CommandManager.SaveDynamicAssemblyToDisk(System.String)">
            <summary>
            Saves the dynamic assembly to disk.
            </summary>
            <param name="assemblyFileName">Name of the assembly file.</param>
        </member>
        <member name="M:Susanoo.CommandManager.RegisterBootstrapper(Susanoo.ISusanooBootstrapper)">
            <summary>
            Registers a bootstrapper which provides extension points in susanoo.
            </summary>
            <param name="bootstrapper">The bootstrapper.</param>
            <exception cref="T:System.ArgumentNullException">bootstrapper</exception>
        </member>
        <member name="P:Susanoo.CommandManager.DynamicNamespace">
            <summary>
            Gets the dynamic namespace.
            </summary>
            <value>The dynamic namespace.</value>
        </member>
        <member name="P:Susanoo.CommandManager.CommandBuilder">
            <summary>
            Gets the command builder.
            </summary>
            <value>The command builder.</value>
        </member>
        <member name="P:Susanoo.CommandManager.Bootstrapper">
            <summary>
            Gets the bootstrapper.
            </summary>
            <value>The bootstrapper.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1">
            <summary>
                Common components between CommandProcessors with ResultSets
            </summary>
            <typeparam name="TFilter">The type of the t filter.</typeparam>
        </member>
        <member name="T:ICommandProcessorWithResults`1">
            <summary>
            Shared members for all command processors that have ResultSets.
            </summary>
        </member>
        <member name="T:ICommandProcessorWithResults">
            <summary>
            Shared members for all command processors that have ResultSets.
            </summary>
        </member>
        <member name="M:ICommandProcessorWithResults.ClearColumnIndexInfo">
            <summary>
            Clears any column index information that may have been cached.
            </summary>
        </member>
        <member name="M:ICommandProcessorWithResults.FlushCache">
            <summary>
            Flushes the result cache.
            </summary>
        </member>
        <member name="P:ICommandProcessorWithResults`1.CommandResultInfo">
            <summary>
            Gets the command result information.
            </summary>
            <value>The command result information.</value>
        </member>
        <member name="T:ICommandProcessorInterop`1">
            <summary>
            Shared members for all command processors.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="P:ICommandProcessorInterop`1.CommandInfo">
            <summary>
            Gets the command information.
            </summary>
            <value>The command information.</value>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0})">
            <summary>
            Initializes pipeline components of the result processor
            </summary>
            <param name="commandResultInfo">The command result information.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1"/> class from being created.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.ClearColumnIndexInfo">
            <summary>
                Clears any column index information that may have been cached.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.FlushCache">
            <summary>
                Flushes the cache.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.UpdateColumnIndexInfo(Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
                Updates the column index information.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.RetrieveColumnIndexInfo">
            <summary>
                Retrieves a copy of the column index information.
            </summary>
            <returns>ColumnChecker.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.ActivateResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
                Activates the result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <exception cref="T:System.ArgumentException">
                @Calling EnableResultCaching with CacheMode None effectively would disable caching,
                this is confusing and therefor is not allowed.;mode
            </exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.TryRetrieveCacheResult(System.Numerics.BigInteger,System.Object@)">
            <summary>
                Retrieves a cached result.
            </summary>
            <param name="hashCode">The hash code.</param>
            <param name="value">The value.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.ResultCacheContainer">
            <summary>
                Gets the result cache container.
            </summary>
            <value>The result cache container.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.ResultCachingEnabled">
            <summary>
                Gets a value indicating whether [result caching enabled].
            </summary>
            <value><c>true</c> if [result caching enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.ResultCachingInterval">
            <summary>
                Gets the result caching interval.
            </summary>
            <value>The result caching interval.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.ResultCachingMode">
            <summary>
                Gets the result caching mode.
            </summary>
            <value>The result caching mode.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.CommandInfo">
            <summary>
                Gets the command expression.
            </summary>
            <value>The command expression.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.CommandResultInfo">
            <summary>
                Gets the mapping expressions.
            </summary>
            <value>The mapping expressions.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.CommandProcessorWithResults`1.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`2">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`2.ForResults(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,`1}})">
            <summary>
            Allows customization of result set.
            </summary>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`2.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`2.BuildWhereFilter(System.Object)">
            <summary>
            Builds the where filter.
            </summary>
            <param name="optionsObject">The options object.</param>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`2.AddOrderByExpression(System.String)">
            <summary>
            Adds the order by expression.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0},Susanoo.Pipeline.Command.ResultSets.ICommandResultImplementor{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="implementor">The implementor.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.BuildWhereFilter(System.Object)">
            <summary>
            Builds the where filter.
            </summary>
            <param name="optionsObject">The options object.</param>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.AddOrderByExpression(System.String)">
            <summary>
            Builds the where filter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>ICommandExpression&lt;TFilter&gt;.</returns>
            <exception cref="T:System.Exception">Conflicting priorities for command modifiers</exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.BuildWhereFilterImplementation(Susanoo.Pipeline.Command.IExecutableCommandInfo)">
            <summary>
            Builds the where filter implementation.
            </summary>
            <param name="info">The information.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.GetDefaultCompareMethod(System.Type)">
            <summary>
            Gets the default compare method.
            </summary>
            <param name="type">The type.</param>
            <returns>CompareMethod.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.ForResults(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,`1}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.BuildOrRegenCommandProcessor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
                Builds the or regenerates a command processor from cache.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.ToSingleResult``1">
            <summary>
                To the single result.
            </summary>
            <typeparam name="TSingle">The type of the single.</typeparam>
            <returns>ICommandResultExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`2.WhereFilterOptions">
            <summary>
            Gets the where filter options. Null if no where filter.
            </summary>
            <value>The where filter options.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`3">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`3">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`3.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Allows customization of a type of result set.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`3.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`3.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`3"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`3.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`3.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`3.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`4">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`4">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`4.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Allows customization of a type of result set.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`4.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`4.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`4"/>
                class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`4.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`4.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`4.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`5">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`5">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`5.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Allows customization of a type of result set.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`5.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`5.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the
                <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`5"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`5.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`5.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`5.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`6">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`6">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`6.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Allows customization of a type of result set.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`6.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`6.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the
                <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`6"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`6.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`6.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`6.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`7">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <typeparam name="TResult6">The type of the 6th result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`7">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <typeparam name="TResult6">The type of the 6th result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`7.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Allows customization of a type of result set.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`7.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`7.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the
                <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`7"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`7.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`7.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`7.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`8">
            <summary>
                Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <typeparam name="TResult6">The type of the 6th result.</typeparam>
            <typeparam name="TResult7">The type of the 7th result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`8">
            <summary>
            Provides methods for customizing how results are handled and compiling result mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <typeparam name="TResult6">The type of the 6th result.</typeparam>
            <typeparam name="TResult7">The type of the 7th result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`8.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Allows customization of a type of result set.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultExpression`8.Realize(System.String)">
            <summary>
            Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`8.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
                Initializes a new instance of the
                <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`8"/>
                class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`8.ForResultsOfType``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
                Provide mapping actions and options for a result set
            </summary>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>ICommandResultExpression&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`8.Realize(System.String)">
            <summary>
                Realizes the pipeline and compiles result mappings.
            </summary>
            <param name="name">The name of the processor.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultExpression`8.CacheHash">
            <summary>
                Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1">
            <summary>
            Provides a common class for ICommandResultExpressions to store and retrieve mappings.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.ICommandResultImplementor`1">
            <summary>
            Provides a common form of storage and retrieval for mapping details of results.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultImplementor`1.RetrieveExporter(System.Type)">
            <summary>
            Retrieves a mapping exporter.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultImplementor`1.StoreMapping``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Stores a mapping.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.ICommandResultImplementor`1.Export(System.Type)">
            <summary>
            Exports a results mappings for processing.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>IDictionary&lt;System.String, IPropertyMapping&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1.RetrieveExporter(System.Type)">
            <summary>
            Retrieves a mapping exporter.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1.StoreMapping``1(System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression{`0,``0}})">
            <summary>
            Stores the mapping.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1.Export(System.Type)">
            <summary>
            Exports a results mappings for processing.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns>IDictionary&lt;System.String, IPropertyMapping&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.CommandResultImplementor`1.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.DefaultResultMapping">
            <summary>
            Simple mapping when none were explicitly provided.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.DefaultResultMapping.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Mapping.DefaultResultMapping"/> class.
            </summary>
            <param name="resultType">Type of the result.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.DefaultResultMapping.MapDeclarativeProperties">
            <summary>
            Maps the declarative properties.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.DefaultResultMapping.Export">
            <summary>
            Exports this instance.
            </summary>
            <returns>IDictionary&lt;System.String, Action&lt;IPropertyMappingConfiguration&lt;IDataRecord&gt;&gt;&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.DefaultResultMapping.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DeserializerResolver">
            <summary>
            An extendable or replaceable component that chooses an appropriate way to deserialize an IDataReader to objects.
            </summary>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.IDeserializerResolver">
            <summary>
            An extendable or replaceable component that chooses an appropriate way to deserialize an IDataReader to objects.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.IDeserializerResolver.Resolve``1(Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport)">
            <summary>
            Retrieves and compiles, if necessary, an appropriate type deserializer.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <returns>Func&lt;IDataReader, ColumnChecker, IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DeserializerResolver.Resolve``1(Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport)">
            <summary>
            Retrieves and compiles, if necessary, an appropriate type deserializer.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <returns>Func&lt;IDataReader, ColumnChecker, IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DeserializerResolver.ResolveCustomDeserializer``1(Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport)">
            <summary>
            Resolves any custom deserializers.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="mappings">The mappings.</param>
            <returns>Func&lt;IDataReader, ColumnChecker, IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowDeserializer">
            <summary>
            Provides deserialization for dynamic and a way to geta Key-Value-Pair.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.DynamicRowDeserializer.Deserialize``1(System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Dumps all columns into an array for simple use cases.
            </summary>
            <param name="reader">The reader.</param>
            <param name="checker">The column checker.</param>
            <returns>dynamic.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.ICustomDeserializer`1">
            <summary>
            Provides the ability to map objects with constructors or special considerations.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.ICustomDeserializer`1.Deserialize(System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Deserializes into a complex object from a data reader.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="checker">The column object.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="T:Susanoo.HashBuilder">
            <summary>
            Common hashing method for Susanoo.
            </summary>
        </member>
        <member name="M:Susanoo.HashBuilder.Compute(System.String)">
            <summary>
            Computes the specified value into a hash.
            </summary>
            <param name="value">The value.</param>
            <returns>BigInteger.</returns>
        </member>
        <member name="P:Susanoo.HashBuilder.Seed">
            <summary>
            Gets the seed of hashes.
            </summary>
            <value>The seed.</value>
        </member>
        <member name="T:Susanoo.UInt64Helpers">
            <summary>
                Murmur3 helper extensions.
            </summary>
        </member>
        <member name="M:Susanoo.UInt64Helpers.RotateLeft(System.UInt64,System.Int32)">
            <summary>
                Rotates the ulong left.
            </summary>
            <param name="original">The original.</param>
            <param name="bits">The bits.</param>
            <returns>System.UInt64.</returns>
        </member>
        <member name="M:Susanoo.UInt64Helpers.RotateRight(System.UInt64,System.Int32)">
            <summary>
                Rotates the ulong right.
            </summary>
            <param name="original">The original.</param>
            <param name="bits">The bits.</param>
            <returns>System.UInt64.</returns>
        </member>
        <member name="M:Susanoo.UInt64Helpers.GetUInt64(System.Byte[],System.Int32)">
            <summary>
                Converts byte array to ulong.
            </summary>
            <param name="bb">The bb.</param>
            <param name="pos">The position.</param>
            <returns>System.UInt64.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.KeyValuePairDeserializer`1">
            <summary>
            Maps properties to a KeyValuePair using Activator
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.KeyValuePairDeserializer`1.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.KeyValuePairDeserializer`1"/> class.
            </summary>
            <param name="mappings">The mappings.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.KeyValuePairDeserializer`1.Deserialize(System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Deserializes into a KeyValuePair from a data reader.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="checker">The column object.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.IResultMapper`1">
            <summary>
            Performs the actual map operation between an IDataRecord and a result type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.IResultMapper">
            <summary>
            Performs the actual map operation between an IDataRecord and a result type.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.IResultMapper.MapResult(System.Data.IDataReader)">
            <summary>
            Maps the result.
            </summary>
            <param name="record">The record.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.IResultMapper`1.MapResult(System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker,System.Func{System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Maps the result.
            </summary>
            <param name="record">The record.</param>
            <param name="checker">The column checker.</param>
            <param name="mapping">The mapping.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.IResultMapper`1.MapResult(System.Data.IDataReader)">
            <summary>
            Maps the result.
            </summary>
            <param name="record">The record.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.ListResult`1">
            <summary>
            A list that implements IResultSet
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.IResultSet">
            <summary>
            A result object that returns columns that were available.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.IResultSet.AvailableColumns">
            <summary>
                Gets the available columns in the result set.
            </summary>
            <value>The available columns.</value>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.ListResult`1.BuildReport(Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Provides the information to build a mapping report.
            </summary>
            <param name="checker">The checker.</param>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.ListResult`1.AvailableColumns">
            <summary>
            Gets the available columns in the result set.
            </summary>
            <value>The available columns.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`3">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessor`3.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:ICommandProcessor`3.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`3.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`3.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;IEnumerable&lt;TResult1&gt;, IEnumerable&lt;TResult2&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3"/>
            class.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally a filter to read parameters from and explicit
            parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`3.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`4">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessor`4.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:ICommandProcessor`4.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`4.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`4.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;IEnumerable&lt;TResult1&gt;, IEnumerable&lt;TResult2&gt;, IEnumerable&lt;TResult3&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4"/>
            class.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally a filter to read parameters from and explicit
            parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`4.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`5">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessor`5.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:ICommandProcessor`5.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`5.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`5.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;IEnumerable&lt;TResult1&gt;, IEnumerable&lt;TResult2&gt;, IEnumerable&lt;TResult3&gt;, IEnumerable&lt;TResult4&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5"/>
            class.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally a filter to read parameters from and explicit
            parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`5.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`6">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessor`6.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:ICommandProcessor`6.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`6.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`6.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;IEnumerable&lt;TResult1&gt;, IEnumerable&lt;TResult2&gt;, IEnumerable&lt;TResult3&gt;, IEnumerable&lt;TResult4&gt;, IEnumerable&lt;TResult5&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6"/>
            class.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally a filter to read parameters from and explicit
            parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`6.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <typeparam name="TResult6">The type of the result6.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`7">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <typeparam name="TResult6">The type of the 6th result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessor`7.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:ICommandProcessor`7.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`7.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`7.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;IEnumerable&lt;TResult1&gt;, IEnumerable&lt;TResult2&gt;, IEnumerable&lt;TResult3&gt;, IEnumerable&lt;TResult4&gt;, IEnumerable&lt;TResult5&gt;, IEnumerable&lt;TResult6&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7"/>
            class.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally a filter to read parameters from and explicit
            parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`7.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the result1.</typeparam>
            <typeparam name="TResult2">The type of the result2.</typeparam>
            <typeparam name="TResult3">The type of the result3.</typeparam>
            <typeparam name="TResult4">The type of the result4.</typeparam>
            <typeparam name="TResult5">The type of the result5.</typeparam>
            <typeparam name="TResult6">The type of the result6.</typeparam>
            <typeparam name="TResult7">The type of the result7.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`8">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult1">The type of the 1st result.</typeparam>
            <typeparam name="TResult2">The type of the 2nd result.</typeparam>
            <typeparam name="TResult3">The type of the 3rd result.</typeparam>
            <typeparam name="TResult4">The type of the 4th result.</typeparam>
            <typeparam name="TResult5">The type of the 5th result.</typeparam>
            <typeparam name="TResult6">The type of the 6th result.</typeparam>
            <typeparam name="TResult7">The type of the 7th result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessor`8.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:ICommandProcessor`8.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;,
            IEnumerable&lt;TResult7&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`8.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;,
            IEnumerable&lt;TResult7&gt;
            &gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`8.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;IEnumerable&lt;TResult1&gt;, IEnumerable&lt;TResult2&gt;, IEnumerable&lt;TResult3&gt;, IEnumerable&lt;TResult4&gt;, IEnumerable&lt;TResult5&gt;, IEnumerable&lt;TResult6&gt;, IEnumerable&lt;TResult7&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8"/>
            class.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally a filter to read parameters from and explicit
            parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;,
            IEnumerable&lt;TResult7&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;,
            IEnumerable&lt;TResult7&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command using a provided database manager and optionally parameters.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Tuple&lt;
            IEnumerable&lt;TResult1&gt;,
            IEnumerable&lt;TResult2&gt;,
            IEnumerable&lt;TResult3&gt;,
            IEnumerable&lt;TResult4&gt;,
            IEnumerable&lt;TResult5&gt;,
            IEnumerable&lt;TResult6&gt;,
            IEnumerable&lt;TResult7&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.MultipleResultSetCommandProcessor`8.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1">
            <summary>
            A fully built and ready to be executed command expression with a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <summary>
            A fully built and ready to be executed command expression with a filter parameter.
            </summary>
        </member>
        <member name="T:ICommandProcessor`1">
            <summary>
            Represents a fully built and ready to be executed command expression with no mapping expressions and a filter
            parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
        </member>
        <member name="M:ICommandProcessorAsync`1.ExecuteScalarAsync``1(Susanoo.IDatabaseManager,`0,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the scalar action asynchronously.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;TReturn&gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`1.ExecuteScalar``1(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command and retrieves a single value.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>TReturn.</returns>
        </member>
        <member name="M:ICommandProcessor`1.ExecuteScalar``1(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command and retrieves a single value.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>TReturn.</returns>
        </member>
        <member name="M:ICommandProcessor`1.ExecuteNonQuery(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command and returns a return code.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ICommandProcessor`1.ExecuteNonQuery(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command and returns a return code.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.#ctor(Susanoo.Pipeline.Command.ICommandInfo{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteScalar``1(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>TReturn.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteScalar``1(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>TReturn.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteNonQuery(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteNonQuery(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteScalarAsync``1(Susanoo.IDatabaseManager,`0,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Execute scalar as an asynchronous operation.
            </summary>
            <typeparam name="TReturn">The type of the t return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;TReturn&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteNonQueryAsync(Susanoo.IDatabaseManager,`0,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the non query async.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteNonQueryAsync(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Executes the non query async.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteNonQueryAsync(Susanoo.IDatabaseManager,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the non query async.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteNonQueryAsync(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Executes the non query async.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteScalarAsync``1(Susanoo.IDatabaseManager,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Execute scalar as an asynchronous operation.
            </summary>
            <typeparam name="TReturn">The type of the t return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;TReturn&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteScalarAsync``1(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Execute scalar as an asynchronous operation.
            </summary>
            <typeparam name="TReturn">The type of the t return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;TReturn&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.ExecuteScalarAsync``1(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Execute scalar as an asynchronous operation.
            </summary>
            <typeparam name="TReturn">The type of the t return.</typeparam>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;TReturn&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.CommandInfo">
            <summary>
            Gets the command expression.
            </summary>
            <value>The command expression.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.NoResultSetCommandProcessor`1.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1">
            <summary>
            A step in the command definition Fluent API, in which properties are mapped to potential result data.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.ClearMappings">
            <summary>
            Clears the result mappings.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.ForProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.ForProperty(System.String,System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.Export">
            <summary>
            Exports this instance.
            </summary>
            <returns>IDictionary&lt;System.String, Action&lt;IPropertyMappingConfiguration&lt;IDataRecord&gt;&gt;&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.MapDeclarativeProperties">
            <summary>
            Maps the declarative properties.
            </summary>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingImplementor`1.PropertyMetadataExtractor">
            <summary>
            Gets or sets the property metadata extractor.
            </summary>
            <value>The property metadata extractor.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.ComplexTypeDeserializer">
            <summary>
            Provides compilation and deserialization for complex types.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.ComplexTypeDeserializer.Compile(Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport,System.Type)">
            <summary>
            Compiles mappings.
            </summary>
            <returns>Func&lt;IDataReader, ColumnChecker, IEnumerable&lt;System.Object&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.Deserialization.ComplexTypeDeserializer.Compile``1(Susanoo.Pipeline.Command.ResultSets.ICommandResultMappingExport,System.Type)">
            <summary>
            Makes the compiled expression represent the correct type.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <returns>Func&lt;IDataReader, ColumnChecker, IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2">
            <summary>
            A fully built and ready to be executed command expression with appropriate mapping expressions compiled and a
            filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="T:ICommandProcessor`2">
            <summary>
            Represents a fully built and ready to be executed command expression with appropriate mapping expressions compiled
            and a filter parameter.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <remarks>Appropriate mapping expressions are compiled at the point this interface becomes available.</remarks>
        </member>
        <member name="M:ICommandProcessorAsync`2.ExecuteAsync(Susanoo.IDatabaseManager,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:ICommandProcessorAsync`2.ExecuteAsync(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:ICommandProcessorAsync`2.ExecuteAsync(Susanoo.IDatabaseManager,`0,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:ICommandProcessorAsync`2.ExecuteAsync(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`2.UpdateColumnIndexInfo(Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Updates the column index information.
            </summary>
            <param name="info">The column checker.</param>
        </member>
        <member name="M:ICommandProcessor`2.RetrieveColumnIndexInfo">
            <summary>
            Retrieves a copy of the column index info.
            </summary>
        </member>
        <member name="M:ICommandProcessor`2.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`2.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`2.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ICommandProcessor`2.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="P:ICommandProcessor`2.CommandModifiers">
            <summary>
            Gets the command modifiers ordered by priority (Higher is executed sooner).
            </summary>
            <value>The command modifiers.</value>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.#ctor(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.Collections.Generic.IEnumerable{Susanoo.Pipeline.Command.CommandModifier},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2"/> class.
            </summary>
            <param name="mappings">The mappings.</param>
            <param name="commandModifiers">The command modifiers.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.EnableResultCaching(Susanoo.Pipeline.Command.ResultSets.Processing.CacheMode,System.Nullable{System.Double})">
            <summary>
            Enables result caching.
            </summary>
            <param name="mode">The mode.</param>
            <param name="interval">The interval.</param>
            <returns>ICommandProcessor&lt;TFilter, TResult&gt;.</returns>
            <exception cref="T:System.ArgumentException">@Calling EnableResultCaching with CacheMode None effectively would disable caching,
            this is confusing and therefor is not allowed.;mode</exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.ClearColumnIndexInfo">
            <summary>
            Clears any column index information that may have been cached.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.UpdateColumnIndexInfo(Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker)">
            <summary>
            Updates the column index information.
            </summary>
            <param name="info">The column checker.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.RetrieveColumnIndexInfo">
            <summary>
            Retrieves a copy of the column index info.
            </summary>
            <returns>ColumnChecker.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.Susanoo#Pipeline#Command#ResultSets#Processing#IResultMapper#MapResult(System.Data.IDataReader)">
            <summary>
            Maps the result.
            </summary>
            <param name="record">The record.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.Execute(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.Execute(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.Execute(Susanoo.IDatabaseManager,`0,System.Object,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.Susanoo#Pipeline#Command#ResultSets#Processing#IResultMapper{TResult}#MapResult(System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker,System.Func{System.Data.IDataReader,Susanoo.Pipeline.Command.ResultSets.Processing.ColumnChecker,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Maps the result.
            </summary>
            <param name="reader">The reader.</param>
            <param name="checker">The column checker.</param>
            <param name="mapping">The mapping.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.Susanoo#Pipeline#Command#ResultSets#Processing#IResultMapper{TResult}#MapResult(System.Data.IDataReader)">
            <summary>
            Maps the result.
            </summary>
            <param name="record">The record.</param>
            <returns>IEnumerable&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.BuildOrRegenResultMapper(Susanoo.Pipeline.Command.ResultSets.ICommandResultInfo{`0},System.String)">
            <summary>
            Builds the or regen result mapper from cache.
            </summary>
            <param name="commandResultInfo">The command result information.</param>
            <param name="name">The name.</param>
            <returns>IResultMapper&lt;TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.ExecuteAsync(Susanoo.IDatabaseManager,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.ExecuteAsync(Susanoo.IDatabaseManager,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.ExecuteAsync(Susanoo.IDatabaseManager,`0,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.ExecuteAsync(Susanoo.IDatabaseManager,`0,System.Data.Common.DbParameter[])">
            <summary>
            Assembles a data command for an ADO.NET provider,
            executes the command and uses pre-compiled mappings to assign the resultant data to the result object type.
            </summary>
            <param name="databaseManager">The database manager.</param>
            <param name="filter">The filter.</param>
            <param name="explicitParameters">The explicit parameters.</param>
            <returns>Task&lt;IEnumerable&lt;TResult&gt;&gt;.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.CompiledMapping">
            <summary>
            Gets the compiled mapping.
            </summary>
            <value>The compiled mapping.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.ColumnReport">
            <summary>
            Gets or sets the column report.
            </summary>
            <value>The column report.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.CommandModifiers">
            <summary>
            Gets the command modifiers ordered by priority (Higher is executed sooner).
            </summary>
            <value>The command modifiers.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Processing.SingleResultSetCommandProcessor`2.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2">
            <summary>
            A step in the command definition Fluent API, in which properties are mapped to potential result data.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression`2">
            <summary>
            A step in the command definition Fluent API, in which properties are mapped to potential result data.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression`2.ClearMappings">
            <summary>
            Clears the result mappings.
            </summary>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression`2.ForProperty(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="options">The options.</param>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.IResultMappingExpression`2.ForProperty(System.String,System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="options">The options.</param>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.ClearMappings">
            <summary>
            Clears the result mappings.
            </summary>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.ForProperty(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="options">The options.</param>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.ForProperty(System.String,System.Action{Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration})">
            <summary>
            Mapping options for a property in the result model.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="options">The options.</param>
            <returns>IResultMappingExpression&lt;TFilter, TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.Export">
            <summary>
            Exports this instance.
            </summary>
            <returns>IDictionary&lt;System.String, Action&lt;IPropertyMappingConfiguration&lt;IDataRecord&gt;&gt;&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.ResultMappingExpression`2.Implementor">
            <summary>
            Gets the implementor this is the Bridge design pattern.
            </summary>
            <value>The implementor.</value>
        </member>
        <member name="T:Susanoo.DatabaseManager">
            <summary>
            Standard Database Manager for Susanoo that supports any DB implementation that provides a DbProviderFactory.
            </summary>
            <summary>
            Standard Database Manager for Susanoo that supports any DB implementation that provides a DbProviderFactory.
            </summary>
        </member>
        <member name="T:Susanoo.IDatabaseManager">
            <summary>
            The interface a Data later abstraction must support for use with Susanoo
            </summary>
        </member>
        <member name="M:Susanoo.IDatabaseManager.ExecuteDataReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the data reader.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>IDataReader.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>A single value of type T.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored procedure.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.CreateParameter">
            <summary>
            Creates a parameter.
            </summary>
            <returns>DbParameter.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.CreateParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterDirection">The parameter direction.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="value">The value.</param>
            <returns>DbParameter.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.CreateInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates the input parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="value">The value.</param>
            <returns>DbParameter.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Susanoo.IDatabaseManager.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Susanoo.IDatabaseManager.ExecuteDataReaderAsync(System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the data reader asynchronously.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="parameters">The parameters.</param>
            <returns>Task&lt;IDataReader&gt;.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the scalar action asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="parameters">The parameters.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Susanoo.IDatabaseManager.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored procedure asynchronously.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="parameters">The parameters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="P:Susanoo.IDatabaseManager.State">
            <summary>
            Gets the state of the connection.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:Susanoo.DatabaseManager.#ctor(System.Data.Common.DbProviderFactory,System.String,System.Action{System.Data.Common.DbCommand})">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.DatabaseManager"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="providerSpecificCommandSettings">The provider specific command settings.</param>
            <exception cref="T:System.NotSupportedException">The database provider type specified is not supported. </exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.#ctor(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.DatabaseManager"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <exception cref="T:System.NotSupportedException">The database provider type specified is not supported. </exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.DatabaseManager"/> class.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <exception cref="T:System.ArgumentException">Provider is a required component of the connection
            string.;connectionStringName</exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.ExecuteDataReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the data reader.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>IDataReader.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>A single value of type T.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored procedure.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.CreateParameter">
            <summary>
            Creates a parameter.
            </summary>
            <returns>DbParameter.</returns>
        </member>
        <member name="M:Susanoo.DatabaseManager.CreateParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterDirection">The parameter direction.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="value">The value.</param>
            <returns>DbParameter.</returns>
        </member>
        <member name="M:Susanoo.DatabaseManager.CreateInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="value">The value.</param>
            <returns>DbParameter.</returns>
        </member>
        <member name="M:Susanoo.DatabaseManager.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Susanoo.DatabaseManager.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Susanoo.DatabaseManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Susanoo.DatabaseManager.BulkCopy``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs a bulk copy operation.
            </summary>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <param name="destinationTableName">Name of the destination table.</param>
            <param name="records">The records.</param>
            <param name="whiteList">The white list of properties to include. Default is NULL.</param>
            <param name="blackList">The black list of properties to exclude. Default is NULL.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.Finalize">
            <summary>
            Realizes an instance of the <see cref="T:Susanoo.DatabaseManager"/> class.
            </summary>
        </member>
        <member name="M:Susanoo.DatabaseManager.CastValue(System.Type,System.Object)">
            <summary>
            Returns value or it's string representation.
            </summary>
            <param name="newType">The new type.</param>
            <param name="value">The value.</param>
            <returns>Value or string representation.</returns>
        </member>
        <member name="M:Susanoo.DatabaseManager.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
            <returns>DbTransaction.</returns>
        </member>
        <member name="M:Susanoo.DatabaseManager.PrepCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Preps the command.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns>DbCommand.</returns>
        </member>
        <member name="M:Susanoo.DatabaseManager.CallProviderSpecificCommandSettings(System.Data.Common.DbCommand)">
            <summary>
            Adjusts the command by provider.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Susanoo.DatabaseManager.OpenConnectionInternal">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Susanoo.DatabaseManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
            unmanaged resources.</param>
        </member>
        <member name="M:Susanoo.DatabaseManager.ExecuteDataReaderAsync(System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the data reader asynchronously.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="parameters">The parameters.</param>
            <returns>IDataReader.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored procedure asynchronously.
            </summary>
            <param name="commandText">Name of the procedure.</param>
            <param name="commandType">Type of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="parameters">The parameters.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
        </member>
        <member name="M:Susanoo.DatabaseManager.ExecuteScalarAsync``1(System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Data.Common.DbParameter[])">
            <summary>
            Execute scalar as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="parameters">The parameters.</param>
            <returns>Task&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">commandText</exception>
        </member>
        <member name="P:Susanoo.DatabaseManager.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:Susanoo.DatabaseManager.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Susanoo.DatabaseManager.State">
            <summary>
            Gets the state of the connection.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Susanoo.ExpressionExtensions">
            <summary>
            Helpful Expression extension methods
            </summary>
        </member>
        <member name="M:Susanoo.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Given an expression, extract the listed property name; similar to reflection but with familiar LINQ+lambdas.
            </summary>
            <typeparam name="TModel">the model type to extract property names</typeparam>
            <typeparam name="TValue">the value type of the expected property</typeparam>
            <param name="propertySelector">expression that just selects a model property to be turned into a string</param>
            <returns>indicated property name</returns>
        </member>
        <member name="T:Susanoo.Pipeline.Command.NullValueMode">
            <summary>
            Opt-in levels for sending null values in parameters.
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.NullValueMode.Never">
            <summary>
            Default option, standard ADO.NET behavior, values of null exclude the parameter from the parameter set.
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.NullValueMode.FilterOnlyMinimum">
            <summary>
            Replaces null with DbNull on filter properties when no modifier action is provided.
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.NullValueMode.FilterOnlyFull">
            <summary>
            Replaces null with DbNull on all filter properties.
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.NullValueMode.ExplicitParametersOnly">
            <summary>
            Replaces null with DbNull on explicit parameters only.
            </summary>
        </member>
        <member name="F:Susanoo.Pipeline.Command.NullValueMode.Full">
            <summary>
            Replaces null with DbNull on all parameters EXCEPT constants.
            </summary>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration">
            <summary>
            Allows configuration of the Susanoo mapper at the property level during command definition.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.IPropertyMappingConfiguration.UseAlias(System.String)">
            <summary>
            Uses the specified alias when mapping from the data call.
            </summary>
            <param name="columnNameAlias">The alias.</param>
            <returns>Susanoo.IResultMappingExpression&lt;TFilter,TResult&gt;.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.IPropertyMetadataExtractor">
            <summary>
            Describes the required methods for determining if a property can be mapped using Susanoo.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.IPropertyMetadataExtractor.FindAllowedProperties(System.Type,Susanoo.DescriptorActions,System.String[],System.String[])">
            <summary>
            Finds the properties on an object and resolves if they are actionable for mapping and discerns appropriate
            declarative aliases.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="actions">The actions.</param>
            <param name="whitelist">The whitelist.</param>
            <param name="blacklist">The blacklist.</param>
            <returns>Dictionary&lt;PropertyInfo, PropertyMap&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.IPropertyMetadataExtractor.IsBlacklisted(System.Reflection.PropertyInfo,System.String[])">
            <summary>
            Determines whether the specified property is blacklisted.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="blacklist">The blacklist.</param>
            <returns><c>true</c> if the specified property information is blacklisted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.IPropertyMetadataExtractor.IsWhitelisted(System.Reflection.PropertyInfo,System.String[])">
            <summary>
            Determines whether the specified property is whitelisted.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="whitelist">The whitelist.</param>
            <returns><c>true</c> if the specified property information is whitelisted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.IPropertyMetadataExtractor.ResolveAlias(System.Reflection.PropertyInfo,System.Object[])">
            <summary>
            Resolves the name of the return column as defined declaratively.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="customAttributes">The custom attributes.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Susanoo.Pipeline.ComponentModelMetadataExtractor">
            <summary>
            Default implementation of IPropertyMetadataExtractor that uses Component Model ColumnAttributes to resolve
            declarative aliases.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.ComponentModelMetadataExtractor.FindAllowedProperties(System.Type,Susanoo.DescriptorActions,System.String[],System.String[])">
            <summary>
            Finds the properties on an object and resolves if they are actionable for mapping and discerns appropriate
            declarative aliases.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="actions">The actions.</param>
            <param name="whitelist">The whitelist.</param>
            <param name="blacklist">The blacklist.</param>
            <returns>Dictionary&lt;PropertyInfo, PropertyMap&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">filterType</exception>
        </member>
        <member name="M:Susanoo.Pipeline.ComponentModelMetadataExtractor.ResolveAlias(System.Reflection.PropertyInfo,System.Object[])">
            <summary>
            Resolves the name of the return column as defined declaratively.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="customAttributes">The custom attributes.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">propertyInfo</exception>
        </member>
        <member name="M:Susanoo.Pipeline.ComponentModelMetadataExtractor.IsWhitelisted(System.Reflection.PropertyInfo,System.String[])">
            <summary>
            Determines whether the specified property is whitelisted.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="whitelist">The whitelist.</param>
            <returns><c>true</c> if the specified property information is whitelisted; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">propertyInfo</exception>
        </member>
        <member name="M:Susanoo.Pipeline.ComponentModelMetadataExtractor.IsBlacklisted(System.Reflection.PropertyInfo,System.String[])">
            <summary>
            Determines whether the specified property is blacklisted.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="blacklist">The blacklist.</param>
            <returns><c>true</c> if the specified property information is blacklisted; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">propertyInfo</exception>
        </member>
        <member name="M:Susanoo.Pipeline.ComponentModelMetadataExtractor.IsActionableProperty(System.Reflection.PropertyInfo,System.Object[],Susanoo.DescriptorActions,System.String[],System.String[])">
            <summary>
            Determines whether the specified property is actionable.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="customAttributes">The custom attributes.</param>
            <param name="actions">The actions.</param>
            <param name="whitelist">The whitelist.</param>
            <param name="blacklist">The blacklist.</param>
            <returns><c>true</c> if [is actionable property] [the specified property information]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">propertyInfo
            or
            customAttributes</exception>
        </member>
        <member name="M:Susanoo.Pipeline.ComponentModelMetadataExtractor.IsAllowedByAttributes(System.Reflection.PropertyInfo,System.Object[],Susanoo.DescriptorActions)">
            <summary>
            Determines whether the specified property is restricted declaratively.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attributes">The attributes.</param>
            <param name="actions">The actions.</param>
            <returns><c>true</c> if [is allowed by attribute] then [the specified property information]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Susanoo.DescriptorActions">
            <summary>
            Indicates which actions are allowed for a property.
            </summary>
        </member>
        <member name="F:Susanoo.DescriptorActions.None">
            <summary>
            Indicates no actions allowed
            </summary>
        </member>
        <member name="F:Susanoo.DescriptorActions.Read">
            <summary>
            Indicates read action allowed
            </summary>
        </member>
        <member name="F:Susanoo.DescriptorActions.Update">
            <summary>
            Indicates update action allowed
            </summary>
        </member>
        <member name="F:Susanoo.DescriptorActions.Insert">
            <summary>
            Indicates insert action allowed
            </summary>
        </member>
        <member name="F:Susanoo.DescriptorActions.Delete">
            <summary>
            Indicates delete action allowed
            </summary>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMapping">
            <summary>
            Represents basic information about a property including its reflection information and alias.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMapping.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMapping"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="alias">The alias.</param>
            <exception cref="T:System.ArgumentNullException">property</exception>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMapping.PropertyMetadata">
            <summary>
            Gets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMapping.ActiveAlias">
            <summary>
            Gets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="T:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration">
            <summary>
            Allows configuration of the Susanoo mapper at the property level during command definition.
            </summary>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration"/> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.AssembleMappingExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Assembles the mapping expression.
            </summary>
            <param name="property">The property.</param>
            <returns>Expression&lt;Action&lt;IDataRecord&gt;&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.UseAlias(System.String)">
            <summary>
            Uses the specified alias when mapping from the data call.
            </summary>
            <param name="columnNameAlias">The alias.</param>
            <returns>Susanoo.IResultMappingExpression&lt;TFilter,TResult&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.ProcessValueUsing(System.Func{System.Type,System.Object,System.Object})">
            <summary>
            Processes the value in some form before assignment.
            </summary>
            <param name="process">The process.</param>
            <returns>IPropertyMappingConfiguration&lt;TRecord&gt;.</returns>
        </member>
        <member name="M:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.AssembleAssignment(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Assembles the assignment expression.
            </summary>
            <param name="property">The property.</param>
            <param name="record">The record parameter.</param>
            <param name="ordinal">The ordinal parameter.</param>
            <returns>BinaryExpression.</returns>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.ConversionProcess">
            <summary>
            Gets the conversion process.
            </summary>
            <value>The conversion process.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.ActiveAlias">
            <summary>
            Gets the active alias of the property.
            </summary>
            <value>The active alias.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.PropertyMetadata">
            <summary>
            Gets the <c>PropertyInfo</c> that describes the property.
            </summary>
            <value>The property reflection meta data.</value>
        </member>
        <member name="P:Susanoo.Pipeline.Command.ResultSets.Mapping.Properties.PropertyMappingConfiguration.CacheHash">
            <summary>
            Gets the hash code used for caching result mapping compilations.
            </summary>
            <value>The cache hash.</value>
        </member>
        <member name="T:Susanoo.Scope`1">
            <summary>
            Example of Thread static scoping. May use this in the future for command batching.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Susanoo.SusanooBootstrapper">
            <summary>
            Provides all options for overriding Susanoo's behavior.
            </summary>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.RetrieveCommandBuilder">
            <summary>
            Gets or sets the command builder.
            </summary>
            <value>The command builder.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.RetrieveDeserializerResolver">
            <summary>
            Retrieves the deserializer resolver.
            </summary>
            <returns>IDeserializerResolver.</returns>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.RetrievePropertyMetadataExtractor">
            <summary>
            Retrieves the property metadata extractor Default uses ComponentModel Attributes..
            </summary>
            <returns>IPropertyMetadataExtractor.</returns>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.RetrieveIgnoredPropertyAttributes">
            <summary>
            Retrieves a set of attributes to use to determine when to ignore a property unless explicitly included.
            </summary>
            <returns>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;.</returns>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.OnExecutionException(Susanoo.Pipeline.Command.ICommandInfo,System.Exception,System.Data.Common.DbParameter[])">
            <summary>
            Called when an execution exception is encountered.
            </summary>
            <param name="info">The information.</param>
            <param name="exception">The exception.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.RetrieveOrderByRegex">
            <summary>
            Retrieves the order by regex used for whitelisting allowed cahracters.
            </summary>
            <returns>Regex.</returns>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.RetrieveQueryWrapperFormat">
            <summary>
            Retrieves the query wrapper format.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Susanoo.SusanooBootstrapper.BuildQueryWrapper(System.String)">
            <summary>
            Builds a query wrapper.
            </summary>
        </member>
    </members>
</doc>
