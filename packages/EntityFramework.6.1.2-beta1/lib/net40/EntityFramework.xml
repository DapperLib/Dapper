<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework</name>
    </assembly>
    <members>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
            <summary>
            Represents a result mapping for a function import.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
            <summary>
            Base class for items in the mapping space (DataSpace.CSSpace)
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
            <summary>
            Adds a type mapping.
            </summary>
            <param name="typeMapping">The type mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
            <summary>
            Removes a type mapping.
            </summary>
            <param name="typeMapping">The type mapping to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
            <summary>
            Gets the type mappings.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
            <summary>
            Specifies a mapping condition evaluated by checking whether the value 
            of the a property/column is null or not null.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
            <summary>
            Mapping metadata for Conditional property mapping on a type.
            Condition Property Mapping specifies a Condition either on the C side property or S side property.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ConditionProperyMap ( constant value-->SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --ConditionProperyMap ( constant value-->SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            This class represents the metadata for all the condition property map elements in the
            above example.
            </example>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
            <summary>
            Mapping metadata for all types of property mappings.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ComplexPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --ScalarPropertyMap
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --EndPropertyMap
            --ScalarPropertyMap
            This class represents the metadata for all property map elements in the
            above example. This includes the scalar property maps, complex property maps
            and end property maps.
            </example>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
            <summary>
            Gets an EdmProperty that specifies the mapped property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
            <summary>
            Gets an EdmProperty that specifies the mapped property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
            <summary>
            Gets an EdmProperty that specifies the mapped column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
            <summary>
            Creates an IsNullConditionMapping instance.
            </summary>
            <param name="propertyOrColumn">An EdmProperty that specifies a property or column.</param>
            <param name="isNull">A boolean that indicates whether to perform a null or a not-null check.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
            <summary>
            Gets a bool that specifies whether the condition is evaluated by performing a null check
            or a not-null check.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
            <summary>
            Specifies a mapping condition evaluated by comparing the value of 
            a property or column with a given value.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
            <summary>
            Creates a ValueConditionMapping instance.
            </summary>
            <param name="propertyOrColumn">An EdmProperty that specifies a property or column.</param>
            <param name="value">An object that specifies the value to compare with.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
            <summary>
            Gets an object that specifies the value to check against.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
            <summary>
            Serializes an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> that conforms to the restrictions of a single
            CSDL schema file to an XML writer. The model to be serialized must contain a single
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer"/> .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
            <summary>
            Serialize the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to the XmlWriter.
            </summary>
            <param name="model">
            The EdmModel to serialize.
            </param>
            <param name="xmlWriter"> The XmlWriter to serialize to. </param>
            <param name="modelNamespace">The serialized model's namespace.</param>
            <returns>true if the model is valid; otherwise, false.</returns>
        </member>
        <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
            <summary>
            Occurs when an error is encountered serializing the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
            <summary>
            Information about an error that occurred processing an Entity Framework model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
            <summary>
            Gets an optional value indicating which property of the source item caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
            <summary>
            Gets an optional descriptive message the describes the error that is being raised.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
            <summary>
            Gets a value indicating the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem"/> that caused the event to be raised.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
            <summary>
            Contains additional attributes and properties of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/>
            </summary>
            <remarks>
            Note that <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload"/> objects are short lived and exist only to
            make <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> initialization easier. Instance of this type are not
            compared to each other and arrays returned by array properties are copied to internal
            collections in the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> ctor. Therefore it is fine to suppress the
            Code Analysis messages.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
            <summary>Gets or sets the function schema.</summary>
            <returns>The function schema.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
            <summary>Gets or sets the store function name.</summary>
            <returns>The store function name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
            <summary>Gets or sets the command text associated with the function.</summary>
            <returns>The command text associated with the function.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
            <summary>Gets or sets the entity sets for the function.</summary>
            <returns>The entity sets for the function.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
            <summary>Gets a value that indicates whether this is an aggregate function.</summary>
            <returns>true if this is an aggregate function; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
            <summary>Gets or sets whether this function is a built-in function.</summary>
            <returns>true if this function is a built-in function; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
            <summary>Gets or sets whether the function contains no arguments.</summary>
            <returns>true if the function contains no arguments; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
            <summary>Gets or sets whether this function can be composed.</summary>
            <returns>true if this function can be composed; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
            <summary>Gets or sets whether this function is from a provider manifest.</summary>
            <returns>true if this function is from a provider manifest; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
            <summary>Gets or sets whether this function is a cached store function.</summary>
            <returns>true if this function is a cached store function; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
            <summary>Gets or sets whether this function is a function import.</summary>
            <returns>true if this function is a function import; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
            <summary>Gets or sets the return parameters.</summary>
            <returns>The return parameters.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
            <summary>Gets or sets the parameter type semantics.</summary>
            <returns>The parameter type semantics.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
            <summary>Gets or sets the function parameters.</summary>
            <returns>The function parameters.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
            <summary>
            Serializes the storage (database) section of an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to XML.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="dbDatabase"> The EdmModel to serialize </param>
            <param name="provider"> Provider information on the Schema element </param>
            <param name="providerManifestToken"> ProviderManifestToken information on the Schema element </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
            <param name="serializeDefaultNullability">A value indicating whether to serialize Nullable attributes when they are set to the default value.</param>
            <returns> true if model can be serialized, otherwise false </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel"/> to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="dbDatabase"> The EdmModel to serialize </param>
            <param name="namespaceName"> Namespace name on the Schema element </param>
            <param name="provider"> Provider information on the Schema element </param>
            <param name="providerManifestToken"> ProviderManifestToken information on the Schema element </param>
            <param name="xmlWriter"> The XmlWriter to serialize to </param>
            <param name="serializeDefaultNullability">A value indicating whether to serialize Nullable attributes when they are set to the default value.</param>
            <returns> true if model can be serialized, otherwise false </returns>
        </member>
        <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
            <summary>
            Occurs when an error is encountered serializing the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
            <summary> Visits each element of an expression tree from a given root expression. If any element changes, the tree is rebuilt back to the root and the new root expression is returned; otherwise the original root expression is returned. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
            <summary>Defines the basic functionality that should be implemented by visitors that return a result value of a specific type. </summary>
            <typeparam name="TResultType">The type of the result produced by the visitor.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern method for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />
            .
            </summary>
            <returns>A result value of a specific type.</returns>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that is being visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>
            Typed visitor pattern method for DbInExpression.
            </summary>
            <param name="expression"> The DbInExpression that is being visited. </param>
            <returns> An instance of TResultType. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" />
            class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Replaces an old expression with a new one for the expression visitor.</summary>
            <param name="oldExpression">The old expression.</param>
            <param name="newExpression">The new expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>Represents an event when the variable is rebound for the expression visitor.</summary>
            <param name="fromVarRef">The location of the variable.</param>
            <param name="toVarRef">The reference of the variable where it is rebounded.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
            <summary>Represents an event when entering the scope for the expression visitor with specified scope variables.</summary>
            <param name="scopeVariables">The collection of scope variables.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
            <summary>Exits the scope for the expression visitor.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Implements the visitor pattern for the expression.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>Implements the visitor pattern for the expression list.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="list">The expression list.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>Implements the visitor pattern for expression binding.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="binding">The expression binding.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
            <summary>Implements the visitor pattern for the expression binding list.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="list">The expression binding list.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>Implements the visitor pattern for the group expression binding.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
            <summary>Implements the visitor pattern for the sort clause.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="clause">The sort clause.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
            <summary>Implements the visitor pattern for the sort order.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
            <summary>Implements the visitor pattern for the aggregate.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
            <summary>Implements the visitor pattern for the function aggregate.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
            <summary>Implements the visitor pattern for the group aggregate.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="aggregate">The aggregate.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
            <summary>Implements the visitor pattern for the Lambda function.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="lambda">The lambda function.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>Implements the visitor pattern for the type.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>Implements the visitor pattern for the type usage.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>Implements the visitor pattern for the entity set.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="entitySet">The entity set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>Implements the visitor pattern for the function.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="functionMetadata">The function metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Implements the visitor pattern for the basic functionality required by expression types.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>Implements the visitor pattern for the different kinds of constants.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The constant expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>Implements the visitor pattern for a reference to a typed null literal.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>Implements the visitor pattern for a reference to a variable that is currently in scope.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>Implements the visitor pattern for a reference to a parameter declared on the command tree that contains this expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>Implements the visitor pattern for an invocation of a function.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The function expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>Implements the visitor pattern for the application of a lambda function to arguments represented by DbExpression objects.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>Implements the visitor pattern for retrieving an instance property.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>Implements the visitor pattern for the comparison operation applied to two arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The cast expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>Implements the visitor pattern for a string comparison against the specified pattern with an optional escape string.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>Implements the visitor pattern for the restriction of the number of elements in the argument collection to the specified limit value.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>Implements the visitor pattern for the null determination applied to a single argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>Implements the visitor pattern for the arithmetic operation applied to numeric arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The arithmetic expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>Implements the visitor pattern for the logical AND expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The logical AND expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>Implements the visitor pattern for the logical OR of two Boolean arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>Implements the visitor pattern for the DbInExpression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The DbInExpression that is being visited.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>Implements the visitor pattern for the logical NOT of a single Boolean argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>Implements the visitor pattern for the removed duplicate elements from the specified set argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The distinct expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>Implements the visitor pattern for the conversion of the specified set argument to a singleton the conversion of the specified set argument to a singleton.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The element expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>Implements the visitor pattern for an empty set determination applied to a single set argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>Implements the visitor pattern for the set union operation between the left and right operands.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>Implements the visitor pattern for the set intersection operation between the left and right operands.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>Implements the visitor pattern for the set subtraction operation between the left and right operands.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>Implements the visitor pattern for a type conversion operation applied to a polymorphic argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>Implements the visitor pattern for the type comparison of a single argument against the specified type.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>Implements the visitor pattern for the type conversion of a single argument to the specified type.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The cast expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>Implements the visitor pattern for the When, Then, and Else clauses.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The case expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>Implements the visitor pattern for the retrieval of elements of the specified type from the given set argument.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>Implements the visitor pattern for the construction of a new instance of a given type, including set and record types.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>Implements the visitor pattern for a strongly typed reference to a specific instance within an entity set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>Implements the visitor pattern for the navigation of a relationship.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>Implements the visitor pattern for the expression that retrieves an entity based on the specified reference.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The DEREF expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>Implements the visitor pattern for the retrieval of the key value from the underlying reference value.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>Implements the visitor pattern for the expression that extracts a reference from the underlying entity instance.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The entity reference expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>Implements the visitor pattern for a scan over an entity set or relationship set, as indicated by the Target property.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>Implements the visitor pattern for a predicate applied to filter an input set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The filter expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>Implements the visitor pattern for the projection of a given input set over the specified expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>Implements the visitor pattern for the unconditional join operation between the given collection arguments.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The join expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>Implements the visitor pattern for an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>Implements the visitor pattern for the invocation of the specified function for each element in the specified input set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The APPLY expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>Implements the visitor pattern for a group by operation.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>Implements the visitor pattern for the skip expression.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>Implements the visitor pattern for a sort key that can be used as part of the sort order.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>Implements the visitor pattern for a quantifier operation of the specified kind over the elements of the specified input set.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
            <summary>
            When this attribute is placed on a property it indicates that the database column to which the
            property is mapped has an index.
            </summary>
            <remarks>
            This attribute is used by Entity Framework Migrations to create indexes on mapped database columns.
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index that will be named by convention and
            has no column order, clustering, or uniqueness specified.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index with the given name and
            has no column order, clustering, or uniqueness specified.
            </summary>
            <param name="name">The index name.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> instance for an index with the given name and column order, 
            but with no clustering or uniqueness specified.
            </summary>
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
            <param name="name">The index name.</param>
            <param name="order">A number which will be used to determine column ordering for multi-column indexes.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
            <summary>
            Returns true if this attribute specifies the same name and configuration as the given attribute.
            </summary>
            <param name="other">The attribute to compare.</param>
            <returns>True if the other object is equal to this object; otherwise false.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
            <summary>
            Returns true if this attribute specifies the same name and configuration as the given attribute.
            </summary>
            <param name="obj">The attribute to compare.</param>
            <returns>True if the other object is equal to this object; otherwise false.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
            <summary>
            The index name.
            </summary>
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
            <summary>
            A number which will be used to determine column ordering for multi-column indexes. This will be -1 if no
            column order has been specified.
            </summary>
            <remarks>
            Multi-column indexes are created by using the same index name in multiple attributes. The information
            in these attributes is then merged together to specify the actual database index.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
            <summary>
            Set this property to true to define a clustered index. Set this property to false to define a 
            non-clustered index.
            </summary>
            <remarks>
            The value of this property is only relevant if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured"/> returns true.
            If <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured"/> returns false, then the value of this property is meaningless.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
            <summary>
            Returns true if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered"/> has been set to a value.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
            <summary>
            Set this property to true to define a unique index. Set this property to false to define a 
            non-unique index.
            </summary>
            <remarks>
            The value of this property is only relevant if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured"/> returns true.
            If <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured"/> returns false, then the value of this property is meaningless.
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
            <summary>
            Returns true if <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique"/> has been set to a value.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
            <summary>
            Returns a different ID for each object instance such that type descriptors won't
            attempt to combine all IndexAttribute instances into a single instance.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbConfiguration">
            <summary>
            A class derived from this class can be placed in the same assembly as a class derived from
            <see cref="T:System.Data.Entity.DbContext"/> to define Entity Framework configuration for an application.
            Configuration is set by calling protected methods and setting protected properties of this
            class in the constructor of your derived type.
            The type to use can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.#ctor">
            <summary>
            Any class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> must have a public parameterless constructor
            and that constructor should call this constructor.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
            <summary>
            The Singleton instance of <see cref="T:System.Data.Entity.DbConfiguration"/> for this app domain. This can be
            set at application start before any Entity Framework features have been used and afterwards
            should be treated as read-only.
            </summary>
            <param name="configuration">The instance of <see cref="T:System.Data.Entity.DbConfiguration"/>.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
            <summary>
            Attempts to discover and load the <see cref="T:System.Data.Entity.DbConfiguration"/> associated with the given
            <see cref="T:System.Data.Entity.DbContext"/> type. This method is intended to be used by tooling to ensure that
            the correct configuration is loaded into the app domain. Tooling should use this method
            before accessing the <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver"/> property.
            </summary>
            <param name="contextType">A <see cref="T:System.Data.Entity.DbContext"/> type to use for configuration discovery.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
            <summary>
            Attempts to discover and load the <see cref="T:System.Data.Entity.DbConfiguration"/> from the given assembly.
            This method is intended to be used by tooling to ensure that the correct configuration is loaded into
            the app domain. Tooling should use this method before accessing the <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver"/>
            property. If the tooling knows the <see cref="T:System.Data.Entity.DbContext"/> type being used, then the
            <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)"/> method should be used since it gives a greater chance that
            the correct configuration will be found.
            </summary>
            <param name="assemblyHint">An <see cref="T:System.Reflection.Assembly"/> to use for configuration discovery.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of Responsibility of resolvers that
            are used to resolve dependencies needed by the Entity Framework.
            </summary>
            <remarks>
            Resolvers are asked to resolve dependencies in reverse order from which they are added. This means
            that a resolver can be added to override resolution of a dependency that would already have been
            resolved in a different way.
            The exceptions to this is that any dependency registered in the application's config file
            will always be used in preference to using a dependency resolver added here.
            </remarks>
            <param name="resolver"> The resolver to add. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of Responsibility of resolvers that
            are used to resolve dependencies needed by the Entity Framework. Unlike the AddDependencyResolver
            method, this method puts the resolver at the bottom of the Chain of Responsibility such that it will only
            be used to resolve a dependency that could not be resolved by any of the other resolvers.
            </summary>
            <remarks>
            A <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> implementation is automatically registered as a default resolver
            when it is added with a call to <see cref="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)"/>. This allows EF providers to act as
            resolvers for other services that may need to be overridden by the provider.
            </remarks>
            <param name="resolver"> The resolver to add. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register
            an Entity Framework provider.
            </summary>
            <remarks>
            Note that the provider is both registered as a service itself and also registered as a default resolver with
            a call to AddDefaultResolver.  This allows EF providers to act as resolvers for other services that
            may need to be overridden by the provider.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> and also using AddDefaultResolver to add the provider as a default
            resolver. This means that, if desired, the same functionality can be achieved using a custom resolver or a
            resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this provider will be used. </param>
            <param name="provider"> The provider instance. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register
            an ADO.NET provider.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolvers for
            <see cref="T:System.Data.Common.DbProviderFactory"/> and <see cref="T:System.Data.Entity.Infrastructure.IProviderInvariantName"/>. This means that, if desired,
            the same functionality can be achieved using a custom resolver or a resolver backed by an
            Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this provider will be used. </param>
            <param name="providerFactory"> The provider instance. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register an
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> for use with the provider represented by the given invariant name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used. </param>
            <param name="getExecutionStrategy"> A function that returns a new instance of an execution strategy. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register an
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> for use with the provider represented by the given invariant name and
            for a given server name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </param>
            <param name="getExecutionStrategy"> A function that returns a new instance of an execution strategy. </param>
            <param name="serverName"> A string that will be matched against the server name in the connection string. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="transactionHandlerFactory"> A function that returns a new instance of a transaction handler. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/> for use with the provider represented by the given invariant name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this transaction handler will be used.
            </param>
            <param name="transactionHandlerFactory"> A function that returns a new instance of a transaction handler. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/> for use with the provider represented by the given invariant name and
            for a given server name.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using <see cref="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)"/> to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this transaction handler will be used.
            </param>
            <param name="transactionHandlerFactory"> A function that returns a new instance of a transaction handler. </param>
            <param name="serverName"> A string that will be matched against the server name in the connection string. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
            <summary>
            Sets the <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory"/> that is used to create connections by convention if no other
            connection string or connection is given to or can be discovered by <see cref="T:System.Data.Entity.DbContext"/>.
            Note that a default connection factory is set in the app.config or web.config file whenever the
            EntityFramework NuGet package is installed. As for all config file settings, the default connection factory
            set in the config file will take precedence over any setting made with this method. Therefore the setting
            must be removed from the config file before calling this method will have any effect.
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to change
            the default connection factory being used.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="connectionFactory"> The connection factory. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            set the pluralization service.
            </summary>
            <param name="pluralizationService"> The pluralization service to use. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            set the database initializer to use for the given context type.  The database initializer is called when a
            the given <see cref="T:System.Data.Entity.DbContext"/> type is used to access a database for the first time.
            The default strategy for Code First contexts is an instance of <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/>.
            </summary>
            <remarks>
            Calling this method is equivalent to calling <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})"/>.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <typeparam name="TContext"> The type of the context. </typeparam>
            <param name="initializer"> The initializer to use, or null to disable initialization for the given context type. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register a
            <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator"/> for use with the provider represented by the given invariant name.
            </summary>
            <remarks>
            This method is typically used by providers to register an associated SQL generator for Code First Migrations.
            It is different from setting the generator in the <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/> because it allows
            EF to use the Migrations pipeline to create a database even when there is no Migrations configuration in the project
            and/or Migrations are not being explicitly used.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The invariant name of the ADO.NET provider for which this generator should be used. </param>
            <param name="sqlGenerator"> A delegate that returns a new instance of the SQL generator each time it is called. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver"/> which allows provider manifest tokens to
            be obtained from connections without necessarily opening the connection.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="resolver"> The manifest token resolver. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory for implementations of <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> which allows custom annotations
            represented by <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/> instances to be serialized to and from the EDMX XML.
            </summary>
            <remarks>
            Note that an <see cref="T:System.Func`1"/> is not needed if the annotation uses a simple string value.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="annotationName"> The name of custom annotation that will be handled by this serializer. </param>
            <param name="serializerFactory"> A delegate that will be used to create serializer instances. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver"/> which allows a <see cref="T:System.Data.Common.DbProviderFactory"/>
            to be obtained from a <see cref="T:System.Data.Common.DbConnection"/> in cases where the default implementation is not
            sufficient.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerFactoryResolver"> The provider factory service. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a <see cref="T:System.Func`2"/> as the model cache key factory which allows the key
            used to cache the model behind a <see cref="T:System.Data.Entity.DbContext"/> to be changed.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`2"/>. This means that, if desired, the same functionality can
            be achieved using a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="keyFactory"> The key factory. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a <see cref="T:System.Func`3"/> delegate which which be used for 
            creation of the default  <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> for a any
            <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/>. This default factory will only be used if no factory is
            set explicitly in the <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/> and if no factory has been registered
            for the provider in use using the
            <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})"/>
            method.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`3"/>. This means that, if desired, the same functionality
            can be achieved using a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="factory"> 
            A factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances for a given <see cref="T:System.Data.Common.DbConnection"/> and
            <see cref="T:System.String"/> representing the default schema.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a <see cref="T:System.Func`3"/> delegate which allows for creation of a customized
            <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> for the given provider for any <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration"/> 
            that does not have an explicit factory set.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`3"/>. This means that, if desired, the same functionality
            can be achieved using a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The invariant name of the ADO.NET provider for which this generator should be used. </param>
            <param name="factory"> 
            A factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances for a given <see cref="T:System.Data.Common.DbConnection"/> and
            <see cref="T:System.String"/> representing the default schema.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            the global instance of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> which will be used whenever a spatial provider is
            required and a provider-specific spatial provider cannot be found. Normally, a provider-specific spatial provider
            is obtained from the a <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> implementation which is in turn returned by resolving
            a service for <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> passing the provider invariant name as a key. However, this
            cannot work for stand-alone instances of <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> and <see cref="T:System.Data.Entity.Spatial.DbGeography"/> since
            it is impossible to know the spatial provider to use. Therefore, when creating stand-alone instances
            of <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> and <see cref="T:System.Data.Entity.Spatial.DbGeography"/> the global spatial provider is always used.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="spatialProvider"> The spatial provider. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> to use for a specific provider and provider
            manifest token.
            </summary>
            <remarks>
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)"/>
            to register spatial services for use only when a specific manifest token is returned by the provider.
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)"/> to register global
            spatial services to be used when provider information is not available or no provider-specific
            spatial services are found.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="key">
            The <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> indicating the type of ADO.NET connection for which this spatial provider will be used.
            </param>
            <param name="spatialProvider"> The spatial provider. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            an implementation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> to use for a specific provider with any
            manifest token.
            </summary>
            <remarks>
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)"/> 
            to register spatial services for use when any manifest token is returned by the provider.
            Use <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)"/> to register global
            spatial services to be used when provider information is not available or no provider-specific
            spatial services are found.
            
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this spatial provider will be used. </param>
            <param name="spatialProvider"> The spatial provider. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory for the type of <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter"/> to use with <see cref="P:System.Data.Entity.Database.Log"/>.
            </summary>
            <remarks>
            Note that setting the type of formatter to use with this method does change the way command are
            logged when <see cref="P:System.Data.Entity.Database.Log"/> is used. It is still necessary to set a <see cref="T:System.IO.TextWriter"/>
            instance onto <see cref="P:System.Data.Entity.Database.Log"/> before any commands will be logged.
            For more low-level control over logging/interception see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> and
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`1"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="logFormatterFactory">A delegate that will create formatter instances.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to
            register an <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> at application startup. Note that interceptors can also
            be added and removed at any time using <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/>. This means that, if desired, the same functionality can be achieved using
            a custom resolver or a resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="interceptor">The interceptor to register.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory to allow <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo"/> to create instances of a context that does not have a public,
            parameterless constructor.
            </summary>
            <remarks>
            This is typically needed to allow design-time tools like Migrations or scaffolding code to use contexts that
            do not have public, parameterless constructors.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`1"/> with the context <see cref="T:System.Type"/> as the key. This means that, if desired,
            the same functionality can be achieved using a custom resolver or a resolver backed by an
            Inversion-of-Control container.
            </remarks>
            <param name="contextType">The context type for which the factory should be used.</param>
            <param name="factory">The delegate to use to create context instances.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to set
            a factory to allow <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo"/> to create instances of a context that does not have a public,
            parameterless constructor.
            </summary>
            <remarks>
            This is typically needed to allow design-time tools like Migrations or scaffolding code to use contexts that
            do not have public, parameterless constructors.
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Func`1"/> with the context <see cref="T:System.Type"/> as the key. This means that, if desired,
            the same functionality can be achieved using a custom resolver or a resolver backed by an
            Inversion-of-Control container.
            </remarks>
            <typeparam name="TContext">The context type for which the factory should be used.</typeparam>
            <param name="factory">The delegate to use to create context instances.</param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
            <summary>
            Call this method from the constructor of a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/> to register
            a database table existence checker for a given provider.
            </summary>
            <remarks>
            This method is provided as a convenient and discoverable way to add configuration to the Entity Framework.
            Internally it works in the same way as using AddDependencyResolver to add an appropriate resolver for
            <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> and also using AddDefaultResolver to add the provider as a default
            resolver. This means that, if desired, the same functionality can be achieved using a custom resolver or a
            resolver backed by an Inversion-of-Control container.
            </remarks>
            <param name="providerInvariantName"> The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this provider will be used. </param>
            <param name="tableExistenceChecker"> The table existence checker to use. </param>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="E:System.Data.Entity.DbConfiguration.Loaded">
            <summary>
            Occurs during EF initialization after the DbConfiguration has been constructed but just before
            it is locked ready for use. Use this event to inspect and/or override services that have been
            registered before the configuration is locked. Note that this event should be used carefully
            since it may prevent tooling from discovering the same configuration that is used at runtime.
            </summary>
            <remarks>
            Handlers can only be added before EF starts to use the configuration and so handlers should
            generally be added as part of application initialization. Do not access the DbConfiguration
            static methods inside the handler; instead use the the members of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs"/>
            to get current services and/or add overrides.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> that is being used to resolve service
            dependencies in the Entity Framework.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
            <summary>
            This attribute can be placed on a subclass of <see cref="T:System.Data.Entity.DbContext"/> to indicate that the subclass of
            <see cref="T:System.Data.Entity.DbConfiguration"/> representing the code-based configuration for the application is in a different
            assembly than the context type.
            </summary>
            <remarks>
            Normally a subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> should be placed in the same assembly as
            the subclass of <see cref="T:System.Data.Entity.DbContext"/> used by the application. It will then be discovered automatically.
            However, if this is not possible or if the application contains multiple context types in different
            assemblies, then this attribute can be used to direct DbConfiguration discovery to the appropriate type.
            An alternative to using this attribute is to specify the DbConfiguration type to use in the application's
            config file. See http://go.microsoft.com/fwlink/?LinkId=260883 for more information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
            <summary>
            Indicates that the given subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> should be used for code-based configuration
            for this application.
            </summary>
            <param name="configurationType">
            The <see cref="T:System.Data.Entity.DbConfiguration"/> type to use.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
            <summary>
            Indicates that the subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> represented by the given assembly-qualified
            name should be used for code-based configuration for this application.
            </summary>
            <param name="configurationTypeName">
            The <see cref="T:System.Data.Entity.DbConfiguration"/> type to use.
            </param>
        </member>
        <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
            <summary>
            Gets the subclass of <see cref="T:System.Data.Entity.DbConfiguration"/> that should be used for code-based configuration
            for this application.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
            <summary>Implements the basic functionality required by aggregates in a GroupBy clause. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
            <summary>
            Gets the result type of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />.
            </summary>
            <returns>
            The result type of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
            <summary>
            Gets the list of expressions that define the arguments to this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />
            .
            </summary>
            <returns>
            The list of expressions that define the arguments to this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
            <summary>Represents the logical AND of two Boolean arguments. This class cannot be inherited. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
            <summary>Implements the basic functionality required by expressions that accept two expression operands.</summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>Represents the base type for all expressions.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            The type of the result produced by <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </returns>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <typeparam name="TResultType">The type of the result produced by visitor.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current DbExpression instance.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current DbExpression instance; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare to the current <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
            <summary>Serves as a hash function for the type.</summary>
            <returns>A hash code for the current expression.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified binary value, which may be null
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified binary value.
            </returns>
            <param name="value">The binary value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from a byte array.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Boolean value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Boolean value.
            </returns>
            <param name="value">The Boolean value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) byte value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified byte value.
            </returns>
            <param name="value">The byte value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable)
            <see
                cref="T:System.DateTime" />
            value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DateTime value.
            </returns>
            <param name="value">The DateTime value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The expression to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable)
            <see
                cref="T:System.DateTimeOffset" />
            value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DateTimeOffset value.
            </returns>
            <param name="value">The DateTimeOffset value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) decimal value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified decimal value.
            </returns>
            <param name="value">The decimal value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) double value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified double value.
            </returns>
            <param name="value">The double value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified
            <see
                cref="T:System.Data.Entity.Spatial.DbGeography" />
            value, which may be null.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DbGeography value.
            </returns>
            <param name="value">The DbGeography value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Data.Entity.Spatial.DbGeography"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            value, which may be null.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified DbGeometry value.
            </returns>
            <param name="value">The DbGeometry value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable)
            <see
                cref="T:System.Guid" />
            value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Guid value.
            </returns>
            <param name="value">The Guid value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Int16 value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Int16 value.
            </returns>
            <param name="value">The Int16 value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Int32 value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Int32 value.
            </returns>
            <param name="value">The Int32 value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Int64 value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Int64 value.
            </returns>
            <param name="value">The Int64 value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified (nullable) Single value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified Single value.
            </returns>
            <param name="value">The Single value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified string value.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the specified string value.
            </returns>
            <param name="value">The string value on which the returned expression should be based.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Enables implicit casting from <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
            <summary>Gets the type metadata for the result type of the expression.</summary>
            <returns>The type metadata for the result type of the expression.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
            <summary>Gets the kind of the expression, which indicates the operation of this expression.</summary>
            <returns>The kind of the expression, which indicates the operation of this expression.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the left argument.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the left argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />
            ,or its result type is not equal or promotable to the required type for the left argument.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the right argument.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the right argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />
            ,or its result type is not equal or promotable to the required type for the right argument.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by the  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
            <summary>Represents an apply operation, which is the invocation of the specified function for each element in the specified input set. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by the  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
            <summary>
            Represents an arithmetic operation applied to numeric arguments.
            Addition, subtraction, multiplication, division, modulo, and negation are arithmetic operations.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
            <summary>
            Gets the list of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> elements that define the current arguments.
            </summary>
            <returns>
            A fixed-size list of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> elements.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
            <summary>
            Represents the When, Then, and Else clauses of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            . This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
            <summary>
            Gets the When clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>
            The When clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
            <summary>
            Gets the Then clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>
            The Then clauses of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
            <summary>
            Gets the Else clause of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>
            The Else clause of this <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            ,or its result type is not equal or promotable to the result type of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            .
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
            <summary>Represents the type conversion of a single argument to the specified type. This class cannot be inherited. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
            <summary>Implements the basic functionality required by expressions that accept a single expression argument. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the argument.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" />
            , or its result type is not equal or promotable to the required type for the argument.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
            <summary>
            Describes the different "kinds" (classes) of command trees.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
            <summary>
            A query to retrieve data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
            <summary>
            Update existing data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
            <summary>
            Insert new data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
            <summary>
            Deleted existing data
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
            <summary>
            Call a function
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
            <summary>Represents a comparison operation applied to two arguments. Equality, greater than, greater than or equal, less than, less than or equal, and inequality are comparison operations. This class cannot be inherited.  </summary>
            <remarks>
            DbComparisonExpression requires that its arguments have a common result type
            that is equality comparable (for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.Equals and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.NotEquals),
            order comparable (for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.GreaterThan and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.LessThan),
            or both (for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.GreaterThanOrEquals and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind"/>.LessThanOrEquals).
            </remarks> 
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
            <summary>Represents different kinds of constants (literals). This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
            <summary>Gets the constant value.</summary>
            <returns>The constant value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
            <summary>Represents an unconditional join operation between the given collection arguments. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
            <summary>Represents the an expression that retrieves an entity based on the specified reference. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
            <summary>Removes duplicate elements from the specified set argument. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
            <summary>Represents the conversion of the specified set argument to a singleton. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
            <summary>Represents an expression that extracts a reference from the underlying entity instance. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
            <summary>Represents the set subtraction operation between the left and right operands. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor. </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
            <summary>
            Describes a binding for an expression. Conceptually similar to a foreach loop
            in C#. The DbExpression property defines the collection being iterated over,
            while the Var property provides a means to reference the current element
            of the collection during the iteration. DbExpressionBinding is used to describe the set arguments
            to relational expressions such as <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression"/>, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression"/>
            and <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression"/>.
            </summary>
            <seealso cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            <seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable"/>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the binding, or its result type is not equal or promotable to the result type of the current value of the property.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
            <summary>Gets the name assigned to the element variable.</summary>
            <returns>The name assigned to the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
            <summary>Gets the type metadata of the element variable.</summary>
            <returns>The type metadata of the element variable. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references the element variable.
            </summary>
            <returns>The variable reference.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
            <summary>Represents a predicate applied to filter an input set. This produces the set of elements that satisfy the predicate. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />
            , or its result type is not a Boolean type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
            <summary>Represents an invocation of a function. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
            <summary>Gets the metadata for the function to invoke.</summary>
            <returns>The metadata for the function to invoke.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
            <summary>Represents a collection of elements that compose a group.  </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
            <summary>Represents a group by operation. A group by operation is a grouping of the elements in the input set based on the specified key expressions followed by the application of the specified aggregates. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides grouping keys.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides grouping keys.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
            <summary>Represents the set intersection operation between the left and right operands. This class cannot be inherited. </summary>
            <remarks>
            DbIntersectExpression requires that its arguments have a common collection result type
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
            <summary>Represents an empty set determination applied to a single set argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
            <summary>Represents null determination applied to a single argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
            <summary>Represents the type comparison of a single argument against the specified type. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
            <summary>Gets the type metadata that the type metadata of the argument should be compared to.</summary>
            <returns>The type metadata that the type metadata of the argument should be compared to.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
            <summary>Represents an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
            <summary>Gets the join condition to apply.</summary>
            <returns>The join condition to apply.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />
            , or its result type is not a Boolean type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
            <summary>
            Allows the application of a lambda function to arguments represented by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            objects.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>The visitor pattern method for expression visitors that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>The visitor pattern method for expression visitors that produce a result value of a specific type.</summary>
            <returns>The type of the result produced by the expression visitor.</returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of type TResultType.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor </typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> representing the Lambda function applied by this expression.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> representing the Lambda function applied by this expression.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the arguments to which the Lambda function should be applied.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
            <summary>Represents a string comparison against the specified pattern with an optional escape string. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
            <summary>Gets an expression that specifies the string to compare against the given pattern.</summary>
            <returns>An expression that specifies the string to compare against the given pattern.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            , or its result type is not a string type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
            <summary>Gets an expression that specifies the pattern against which the given string should be compared.</summary>
            <returns>An expression that specifies the pattern against which the given string should be compared.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            , or its result type is not a string type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
            <summary>Gets an expression that provides an optional escape string to use for the comparison.</summary>
            <returns>An expression that provides an optional escape string to use for the comparison.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            , or its result type is not a string type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
            <summary>Represents the restriction of the number of elements in the argument collection to the specified limit value.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
            <summary>Gets an expression that specifies the input collection.</summary>
            <returns>An expression that specifies the input collection.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            , or its result type is not a collection type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
            <summary>Gets an expression that specifies the limit on the number of elements returned from the input collection.</summary>
            <returns>An expression that specifies the limit on the number of elements returned from the input collection.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            , or is not one of
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            or
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            , or its result type is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
            <summary>
            Gets whether the limit operation will include tied results. Including tied results might produce more results than specified by the
            <see
                cref="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit" />
            value.
            </summary>
            <returns>true if the limit operation will include tied results; otherwise, false. The default is false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
            <summary>Represents the construction of a new instance of a given type, including set and record types. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
            <summary>Represents the logical NOT of a single Boolean argument. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
            <summary>Represents a reference to a typed null literal. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
            <summary>Represents the retrieval of elements of the specified type from the given set argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
            <summary>Gets the metadata of the type of elements that should be retrieved from the set argument.</summary>
            <returns>The metadata of the type of elements that should be retrieved from the set argument. </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
            <summary>Represents the logical OR of two Boolean arguments. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
            <summary>Represents a reference to a parameter declared on the command tree that contains this expression. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
            <summary>Gets the name of the referenced parameter.</summary>
            <returns>The name of the referenced parameter.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
            <summary>Represents the projection of a given input set over the specified expression. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the projection.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the projection.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            , or its result type is not equal or promotable to the reference type of the current projection.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
            <summary>Provides methods and properties for retrieving an instance property. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
            <summary>Creates a new key/value pair based on this property expression.</summary>
            <returns>
            A new key/value pair with the key and value derived from the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
            <summary>
            Enables implicit casting to <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="value">The expression to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
            <summary>Gets the property metadata for the property to retrieve.</summary>
            <returns>The property metadata for the property to retrieve.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            , or its result type is not equal or promotable to the type that defines the property.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
            <summary>Represents a quantifier operation of the specified kind over the elements of the specified input set. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
            <summary>Gets the Boolean predicate that should be evaluated for each element in the input set.</summary>
            <returns>The Boolean predicate that should be evaluated for each element in the input set.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree for the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />
            ,or its result type is not a Boolean type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
            <summary>Represents a strongly typed reference to a specific instance within an entity set. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
            <summary>Gets the metadata for the entity set that contains the instance.</summary>
            <returns>The metadata for the entity set that contains the instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
            <summary>Represents the navigation of a relationship. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value. </summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
            <summary>Gets the metadata for the relationship over which navigation occurs.</summary>
            <returns>The metadata for the relationship over which navigation occurs.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
            <summary>Gets the metadata for the relationship end to navigate from.</summary>
            <returns>The metadata for the relationship end to navigate from.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
            <summary>Gets the metadata for the relationship end to navigate to.</summary>
            <returns>The metadata for the relationship end to navigate to.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the starting point of the navigation and must be a reference to an entity instance.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the instance of the source relationship end from which navigation should occur.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />
            , or its result type is not equal or promotable to the reference type of the
            <see
                cref="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" />
            property.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
            <summary>
            Skips a specified number of elements in the input set.
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            can only be used after the input collection has been sorted as specified by the sort keys.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
            <summary>Gets an expression that specifies the number of elements to skip from the input collection.</summary>
            <returns>An expression that specifies the number of elements to skip from the input collection.</returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            ; the expression is not either a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            or a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            ; or the result type of the expression is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
            <summary>
            Specifies a sort key that can be used as part of the sort order in a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
            . This class cannot be inherited.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
            <summary>Gets a Boolean value indicating whether or not this sort key uses an ascending sort order.</summary>
            <returns>true if this sort key uses an ascending sort order; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
            <summary>Gets a string value that specifies the collation for this sort key.</summary>
            <returns>A string value that specifies the collation for this sort key.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
            <summary>Represents a sort operation applied to the elements of the specified input set based on the given sort keys. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by 
            visitor
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            visitor  
            is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> list that defines the sort order.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
            <summary>Represents a type conversion operation applied to a polymorphic argument. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
            <summary>Supports standard aggregate functions, such as MIN, MAX, AVG, SUM, and so on. This class cannot be inherited.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
            <summary>Gets a value indicating whether this aggregate is a distinct aggregate.</summary>
            <returns>true if the aggregate is a distinct aggregate; otherwise, false. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
            <summary>Gets the method metadata that specifies the aggregate function to invoke.</summary>
            <returns>The method metadata that specifies the aggregate function to invoke.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
            <summary>
            An abstract base type for types that implement the IExpressionVisitor interface to derive from.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
            <summary>
            An abstract base type for types that implement the IExpressionVisitor interface to derive from.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
            <summary>Defines the basic functionality that should be implemented by visitors that do not return a result value.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
            <param name="expression">The expression to be handled.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>
            When overridden in a derived class, implements the visitor pattern for
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />
            .
            </summary>
            <param name="expression">
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that is visited.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>
            Visitor pattern method for DbInExpression.
            </summary>
            <param name="expression"> The DbInExpression that is being visited. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression"/>.
            </summary>
            <param name="expression"> The DbUnaryExpression to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression"/>.
            </summary>
            <param name="expression"> The DbBinaryExpression to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding"/>.
            </summary>
            <param name="binding"> The DbExpressionBinding to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="binding"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Convenience method for post-processing after a DbExpressionBinding has been visited.
            </summary>
            <param name="binding"> The previously visited DbExpressionBinding. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding"/>.
            </summary>
            <param name="binding"> The DbGroupExpressionBinding to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="binding"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>
            Convenience method indicating that the grouping keys of a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression"/> have been visited and the aggregates are now about to be visited.
            </summary>
            <param name="binding"> The DbGroupExpressionBinding of the DbGroupByExpression </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
            <summary>
            Convenience method for post-processing after a DbGroupExpressionBinding has been visited.
            </summary>
            <param name="binding"> The previously visited DbGroupExpressionBinding. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
            <summary>
            Convenience method indicating that the body of a Lambda <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression"/> is now about to be visited.
            </summary>
            <param name="lambda"> The DbLambda that is about to be visited </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lambda"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
            <summary>
            Convenience method for post-processing after a DbLambda has been visited.
            </summary>
            <param name="lambda"> The previously visited DbLambda. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>, if non-null.
            </summary>
            <param name="expression"> The expression to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Convenience method to visit each <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> in the given list, if the list is non-null.
            </summary>
            <param name="expressionList"> The list of expressions to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expressionList"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
            <summary>
            Convenience method to visit each <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate"/> in the list, if the list is non-null.
            </summary>
            <param name="aggregates"> The list of aggregates to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregates"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
            <summary>
            Convenience method to visit the specified <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate"/>.
            </summary>
            <param name="aggregate"> The aggregate to visit. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Called when an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> of an otherwise unrecognized type is encountered.
            </summary>
            <param name="expression"> The expression </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
            <exception cref="T:System.NotSupportedException">
            Always thrown if this method is called, since it indicates that
            <paramref name="expression"/>
            is of an unsupported type
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression"/>.
            </summary>
            <param name="expression"> The DbConstantExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression"/>.
            </summary>
            <param name="expression"> The DbNullExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression"/>.
            </summary>
            <param name="expression"> The DbVariableReferenceExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression"/>.
            </summary>
            <param name="expression"> The DbParameterReferenceExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression"/>.
            </summary>
            <param name="expression"> The DbFunctionExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression"/>.
            </summary>
            <param name="expression"> The DbLambdaExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression"/>.
            </summary>
            <param name="expression"> The DbPropertyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression"/>.
            </summary>
            <param name="expression"> The DbComparisonExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression"/>.
            </summary>
            <param name="expression"> The DbLikeExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression"/>.
            </summary>
            <param name="expression"> The DbLimitExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression"/>.
            </summary>
            <param name="expression"> The DbIsNullExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression"/>.
            </summary>
            <param name="expression"> The DbArithmeticExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression"/>.
            </summary>
            <param name="expression"> The DbAndExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression"/>.
            </summary>
            <param name="expression"> The DbOrExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression"/>.
            </summary>
            <param name="expression"> The DbInExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression"/>.
            </summary>
            <param name="expression"> The DbNotExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression"/>.
            </summary>
            <param name="expression"> The DbDistinctExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression"/>.
            </summary>
            <param name="expression"> The DbElementExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression"/>.
            </summary>
            <param name="expression"> The DbIsEmptyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression"/>.
            </summary>
            <param name="expression"> The DbUnionAllExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression"/>.
            </summary>
            <param name="expression"> The DbIntersectExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression"/>.
            </summary>
            <param name="expression"> The DbExceptExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression"/>.
            </summary>
            <param name="expression"> The DbOfTypeExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression"/>.
            </summary>
            <param name="expression"> The DbTreatExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression"/>.
            </summary>
            <param name="expression"> The DbCastExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression"/>.
            </summary>
            <param name="expression"> The DbIsOfExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression"/>.
            </summary>
            <param name="expression"> The DbCaseExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression"/>.
            </summary>
            <param name="expression"> The DbNewInstanceExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression"/>.
            </summary>
            <param name="expression"> The DbRefExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression"/>.
            </summary>
            <param name="expression"> The DbRelationshipNavigationExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression"/>.
            </summary>
            <param name="expression"> The DeRefExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression"/>.
            </summary>
            <param name="expression"> The DbRefKeyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression"/>.
            </summary>
            <param name="expression"> The DbEntityRefExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression"/>.
            </summary>
            <param name="expression"> The DbScanExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression"/>.
            </summary>
            <param name="expression"> The DbFilterExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression"/>.
            </summary>
            <param name="expression"> The DbProjectExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression"/>.
            </summary>
            <param name="expression"> The DbCrossJoinExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression"/>.
            </summary>
            <param name="expression"> The DbJoinExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression"/>.
            </summary>
            <param name="expression"> The DbApplyExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression"/>.
            </summary>
            <param name="expression"> The DbExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression"/>.
            </summary>
            <param name="expression"> The DbSkipExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression"/>.
            </summary>
            <param name="expression"> The DbSortExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
            <summary>
            Visitor pattern method for <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression"/>.
            </summary>
            <param name="expression"> The DbQuantifierExpression that is being visited. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
            <summary>Implements the visitor pattern for the set clause.</summary>
            <param name="setClause">The set clause.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
            <summary>Implements the visitor pattern for the modification clause.</summary>
            <param name="modificationClause">The modification clause.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
            <summary>Implements the visitor pattern for the collection of modification clauses.</summary>
            <param name="modificationClauses">The modification clauses.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
            <summary>Implements the visitor pattern for the command tree.</summary>
            <param name="commandTree">The command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
            <summary>Implements the visitor pattern for the delete command tree.</summary>
            <param name="deleteTree">The delete command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
            <summary>Implements the visitor pattern for the function command tree.</summary>
            <param name="functionTree">The function command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
            <summary>Implements the visitor pattern for the insert command tree.</summary>
            <param name="insertTree">The insert command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
            <summary>Implements the visitor pattern for the query command tree.</summary>
            <param name="queryTree">The query command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
            <summary>Implements the visitor pattern for the update command tree.</summary>
            <param name="updateTree">The update command tree.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
            <summary>An immutable class that implements the basic functionality for the Query, Insert, Update, Delete, and function invocation command tree types. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this command.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this command.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
            <summary>
            Gets a value indicating whether database null semantics are exhibited when comparing
            two operands, both of which are potentially nullable. The default value is true.
            
            For example (operand1 == operand2) will be translated as:
            
            (operand1 = operand2)
            
            if UseDatabaseNullSemantics is true, respectively
            
            (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL)))
            
            if UseDatabaseNullSemantics is false.
            </summary>
            <value>
            <c>true</c> if database null comparison behavior is enabled, otherwise <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
            <summary>
            Gets the name and corresponding type of each parameter that can be referenced within this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
            .
            </summary>
            <returns>
            The name and corresponding type of each parameter that can be referenced within this
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
            <summary>
            Gets the kind of this command tree.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
            <summary>
            Gets the metadata workspace used by this command tree.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
            <summary>
            Gets the data space in which metadata used by this command tree must reside.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
            <summary>Represents a single row delete operation expressed as a command tree. This class cannot be inherited.  </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
            <summary>Represents a data manipulation language (DML) operation expressed as a command tree.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the data manipulation language (DML) operation.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the DML operation.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree"/> class.
            </summary>
            <param name="metadata">The model this command will operate on.</param>
            <param name="dataSpace">The data space.</param>
            <param name="target">The target table for the data manipulation language (DML) operation.</param>
            <param name="predicate">A predicate used to determine which members of the target collection should be deleted.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.
            </summary>
            <remarks>
            The predicate can include only the following elements:
            <list>
                <item>Equality expression</item>
                <item>Constant expression</item>
                <item>IsNull expression</item>
                <item>Property expression</item>
                <item>Reference expression to the target</item>
                <item>And expression</item>
                <item>Or expression</item>
                <item>Not expression</item>
            </list>
            </remarks>        
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
            <summary>Gets the kind of this command tree.</summary>
            <returns>The kind of this command tree.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
            <summary>
            Contains values that each expression class uses to denote the operation it represents. The
            <see
                cref="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind" />
            property of an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            can be retrieved to determine which operation that expression represents.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
            <summary>
            True for all.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
            <summary>
            Logical And.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
            <summary>
            True for any.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
            <summary>
            Conditional case statement.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
            <summary>
            Polymorphic type cast.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
            <summary>
            A constant value.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
            <summary>
            Cross apply
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
            <summary>
            Cross join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
            <summary>
            Dereference.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
            <summary>
            Duplicate removal.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
            <summary>
            Division.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
            <summary>
            Set to singleton conversion.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
            <summary>
            Entity ref value retrieval.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
            <summary>
            Equality
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
            <summary>
            Set subtraction
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
            <summary>
            Restriction.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
            <summary>
            Full outer join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
            <summary>
            Invocation of a stand-alone function
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
            <summary>
            Greater than or equal.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
            <summary>
            Grouping.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
            <summary>
            Inner join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
            <summary>
            Set intersection.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
            <summary>
            Empty set determination.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
            <summary>
            Null determination.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
            <summary>
            Type comparison (specified Type or Subtype).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
            <summary>
            Type comparison (specified Type only).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
            <summary>
            Left outer join
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
            <summary>
            Less than or equal.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
            <summary>
            String comparison.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
            <summary>
            Result count restriction (TOP n).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
            <summary>
            Modulo.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
            <summary>
            Instance, row, and set construction.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
            <summary>
            Logical Not.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
            <summary>
            Inequality.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
            <summary>
            Null.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
            <summary>
            Set members by type (or subtype).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
            <summary>
            Set members by (exact) type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
            <summary>
            Logical Or.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
            <summary>
            Outer apply.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
            <summary>
            A reference to a parameter.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
            <summary>
            Addition.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
            <summary>
            Projection.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
            <summary>
            Retrieval of a static or instance property.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
            <summary>
            Reference.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
            <summary>
            Ref key value retrieval.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
            <summary>
            Navigation of a (composition or association) relationship.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
            <summary>
            Entity or relationship set scan.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
            <summary>
            Skip elements of an ordered collection.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
            <summary>
            Sorting.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
            <summary>
            Type conversion.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
            <summary>
            Set union (with duplicates).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
            <summary>
            A reference to a variable.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
            <summary>
            Application of a lambda function
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
            <summary>
            In.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
            <summary>Represents the invocation of a database function. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
            <summary>
            Constructs a new DbFunctionCommandTree that uses the specified metadata workspace, data space and function metadata
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="edmFunction">The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> that represents the function that is being invoked.</param>
            <param name="resultType">The expected result type for the function’s first result set.</param>
            <param name="parameters">The function's parameters.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>, <paramref name="dataSpace"/> or <paramref name="edmFunction"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/> does not represent a valid data space or <paramref name="edmFunction"/>
            is a composable function
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
            <summary>Gets the expected result type for the function’s first result set.</summary>
            <returns>The expected result type for the function’s first result set.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
            <summary>Gets or sets the command tree kind.</summary>
            <returns>The command tree kind.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
            <summary>Represents a single row insert operation expressed as a command tree. This class cannot be inherited.</summary>
            <remarks>
            Represents a single row insert operation expressed as a canonical command tree.
            When the <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning"/> property is set, the command returns a reader; otherwise,
            it returns a scalar value indicating the number of rows affected.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree"/> class.
            </summary>
            <param name="metadata">The model this command will operate on.</param>
            <param name="dataSpace">The data space.</param>
            <param name="target">The target table for the data manipulation language (DML) operation.</param>
            <param name="setClauses">The list of insert set clauses that define the insert operation. .</param>
            <param name="returning">A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that specifies a projection of results to be returned, based on the modified rows.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
            <summary>Gets the list of insert set clauses that define the insert operation. </summary>
            <returns>The list of insert set clauses that define the insert operation. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows. null indicates that no results should be returned from this command.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
            <summary>Gets the command tree kind.</summary>
            <returns>The command tree kind.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda">
            <summary>
            Represents a Lambda function that can be invoked to produce a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters</returns>
            <param name="body">An expression that defines the logic of the Lambda function</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression"/> collection that represents the formal parameters to the Lambda function.    These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="variables"/>
            is null or contains null, or
            <paramref name="body"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variables"/>
            contains more than one element with the same variable name.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters</returns>
            <param name="body">An expression that defines the logic of the Lambda function</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression"/> collection that represents the formal parameters to the Lambda function.    These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="variables"/>
            is null or contains null, or
            <paramref name="body"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variables"/>
            contains more than one element with the same variable name.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with a single argument of the specified type, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and single formal parameter.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>        
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="argument14Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null,
            <paramref name="argument14Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="argument14Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourteenth argument to the Lambda function
            </param>
            <param name="argument15Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null,
            <paramref name="argument14Type"/>
            is null,
            <paramref name="argument15Type"/>
            is null,
            or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Create(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda"/> with arguments of the specified types, as defined by the specified function.
            </summary>
            <returns>A new DbLambda that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="argument1Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the first argument to the Lambda function
            </param>
            <param name="argument2Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the second argument to the Lambda function
            </param>
            <param name="argument3Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the third argument to the Lambda function
            </param>
            <param name="argument4Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourth argument to the Lambda function
            </param>
            <param name="argument5Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifth argument to the Lambda function
            </param>
            <param name="argument6Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixth argument to the Lambda function
            </param>
            <param name="argument7Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the seventh argument to the Lambda function
            </param>
            <param name="argument8Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eighth argument to the Lambda function
            </param>
            <param name="argument9Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the ninth argument to the Lambda function
            </param>
            <param name="argument10Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the tenth argument to the Lambda function
            </param>
            <param name="argument11Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the eleventh argument to the Lambda function
            </param>
            <param name="argument12Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the twelfth argument to the Lambda function
            </param>
            <param name="argument13Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the thirteenth argument to the Lambda function
            </param>
            <param name="argument14Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fourteenth argument to the Lambda function
            </param>
            <param name="argument15Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the fifteenth argument to the Lambda function
            </param>
            <param name="argument16Type">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> that defines the EDM type of the sixteenth argument to the Lambda function
            </param>
            <param name="lambdaFunction">
            A function that defines the logic of the Lambda function as a
            <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument1Type"/>
            is null,
            <paramref name="argument2Type"/>
            is null,
            <paramref name="argument3Type"/>
            is null,
            <paramref name="argument4Type"/>
            is null,
            <paramref name="argument5Type"/>
            is null,
            <paramref name="argument6Type"/>
            is null,
            <paramref name="argument7Type"/>
            is null,
            <paramref name="argument8Type"/>
            is null,
            <paramref name="argument9Type"/>
            is null,
            <paramref name="argument10Type"/>
            is null,
            <paramref name="argument11Type"/>
            is null,
            <paramref name="argument12Type"/>
            is null,
            <paramref name="argument13Type"/>
            is null,
            <paramref name="argument14Type"/>
            is null,
            <paramref name="argument15Type"/>
            is null,
            <paramref name="argument16Type"/>
            is null, or
            <paramref name="lambdaFunction"/>
            is null or produces a result of null.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Body">
            <summary>Gets the body of the lambda expression.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the body of the lambda function.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambda.Variables">
            <summary>Gets the parameters of the lambda expression.</summary>
            <returns>The list of lambda function parameters represented as DbVariableReferenceExpression objects.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
            <summary>
            Specifies a single clause in an insert or update modification operation, see
            <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses"/> and <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses"/>
            </summary>
            <remarks>
            An abstract base class allows the possibility of patterns other than
            Property = Value in future versions, e.g.,
            <code>update SomeTable
                set ComplexTypeColumn.SomeProperty()
                where Id = 2</code>
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
            <summary>Represents a query operation expressed as a command tree. This class cannot be inherited.  </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new DbQueryCommandTree that uses the specified metadata workspace.
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the logic of the query.
            </param>
            <param name="validate"> When set to false the validation of the tree is turned off. </param>
            <param name="useDatabaseNullSemantics">A boolean that indicates whether database null semantics are exhibited when comparing
            two operands, both of which are potentially nullable.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>
            or
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/>
            does not represent a valid data space
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
            <summary>
            Constructs a new DbQueryCommandTree that uses the specified metadata workspace, using database null semantics.
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the logic of the query.
            </param>
            <param name="validate"> When set to false the validation of the tree is turned off. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>
            or
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/>
            does not represent a valid data space
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Constructs a new DbQueryCommandTree that uses the specified metadata workspace, using database null semantics.
            </summary>
            <param name="metadata"> The metadata workspace that the command tree should use. </param>
            <param name="dataSpace"> The logical 'space' that metadata in the expressions used in this command tree must belong to. </param>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the logic of the query.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/>
            or
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataSpace"/>
            does not represent a valid data space
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">The expression is associated with a different command tree.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
            <summary>Gets the kind of this command tree.</summary>
            <returns>The kind of this command tree.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
            <summary>Specifies the clause in a modification operation that sets the value of a property. This class cannot be inherited. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
            <summary>Represents a single-row update operation expressed as a command tree. This class cannot be inherited.  </summary>
            <remarks>
            Represents a single-row update operation expressed as a canonical command tree.
            When the <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning"/> property is set, the command returns a reader; otherwise,
            it returns a scalar indicating the number of rows affected.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree"/> class.
            </summary>
            <param name="metadata">The model this command will operate on.</param>
            <param name="dataSpace">The data space.</param>
            <param name="target">The target table for the data manipulation language (DML) operation.</param>
            <param name="predicate">A predicate used to determine which members of the target collection should be updated.</param>
            <param name="setClauses">The list of update set clauses that define the update operation.</param>
            <param name="returning">A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that specifies a projection of results to be returned, based on the modified rows.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
            <summary>Gets the list of update set clauses that define the update operation.</summary>
            <returns>The list of update set clauses that define the update operation.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned, based on the modified rows.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based, on the modified rows. null indicates that no results should be returned from this command.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be updated.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be updated.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
            <summary>Gets the kind of this command tree.</summary>
            <returns>The kind of this command tree.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
            <summary>Represents a reference to a variable that is currently in scope. This class cannot be inherited. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
            <summary>Gets the name of the referenced variable.</summary>
            <returns>The name of the referenced variable.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
            <summary>
            Defines the binding for the input set to a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression"/>.
            In addition to the properties of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding"/>, DbGroupExpressionBinding
            also provides access to the group element via the <seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable"/> variable reference
            and to the group aggregate via the <seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate"/> property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that defines the input set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
            <exception cref="T:System.ArgumentException">
            The expression is not associated with the command tree of the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />
            , or its result type is not equal or promotable to the result type of the current value of the property.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
            <summary>Gets the name assigned to the element variable.</summary>
            <returns>The name assigned to the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
            <summary>Gets the type metadata of the element variable.</summary>
            <returns>The type metadata of the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references the element variable.
            </summary>
            <returns>A reference to the element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
            <summary>Gets the name assigned to the group element variable.</summary>
            <returns>The name assigned to the group element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
            <summary>Gets the type metadata of the group element variable.</summary>
            <returns>The type metadata of the group element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references the group element variable.
            </summary>
            <returns>A reference to the group element variable.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> that represents the collection of elements in the group.
            </summary>
            <returns>The elements in the group.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
            <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s and allows that API to be accessed as extension methods on the expression type itself.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>Returns the specified arguments as a key/value pair object.</summary>
            <returns>A key/value pair object.</returns>
            <param name="value">The value in the key/value pair.</param>
            <param name="alias">The key in the key/value pair.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
            <summary>Returns the specified arguments as a key/value pair object.</summary>
            <returns>A key/value pair object.</returns>
            <param name="value">The value in the key/value pair.</param>
            <param name="alias">The key in the key/value pair.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses a generated variable name to bind the given expression.
            </summary>
            <returns>A new expression binding with the specified expression and a generated variable name.</returns>
            <param name="input">The expression to bind.</param>
            <exception cref="T:System.ArgumentNullException">input is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that uses the specified variable name to bind the given expression
            </summary>
            <returns>A new expression binding with the specified expression and variable name.</returns>
            <param name="input">The expression to bind.</param>
            <param name="varName">The variable name that should be used for the binding.</param>
            <exception cref="T:System.ArgumentNullException">input or varName is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>Creates a new group expression binding that uses generated variable and group variable names to bind the given expression.</summary>
            <returns>A new group expression binding with the specified expression and a generated variable name and group variable name.</returns>
            <param name="input">The expression to bind.</param>
            <exception cref="T:System.ArgumentNullException">input is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that uses the specified variable name and group variable names to bind the given expression.
            </summary>
            <returns>A new group expression binding with the specified expression, variable name and group variable name.</returns>
            <param name="input">The expression to bind.</param>
            <param name="varName">The variable name that should be used for the binding.</param>
            <param name="groupVarName">The variable name that should be used to refer to the group when the new group expression binding is used in a group-by expression.</param>
            <exception cref="T:System.ArgumentNullException">input, varName or groupVarName is null.</exception>
            <exception cref="T:System.ArgumentException">input does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.
            </summary>
            <returns>A new function aggregate with a reference to the given function and argument. The function aggregate's Distinct property will have the value false.</returns>
            <param name="function">The function that defines the aggregate operation.</param>
            <param name="argument">The argument over which the aggregate function should be calculated.</param>
            <exception cref="T:System.ArgumentNullException">function or argument null.</exception>
            <exception cref="T:System.ArgumentException">function is not an aggregate function or has more than one argument, or the result type of argument is not equal or promotable to the parameter type of function.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> that is applied in a distinct fashion.
            </summary>
            <returns>A new function aggregate with a reference to the given function and argument. The function aggregate's Distinct property will have the value true.</returns>
            <param name="function">The function that defines the aggregate operation.</param>
            <param name="argument">The argument over which the aggregate function should be calculated.</param>
            <exception cref="T:System.ArgumentNullException">function or argument is null.</exception>
            <exception cref="T:System.ArgumentException">function is not an aggregate function or has more than one argument, or the result type of argument is not equal or promotable to the parameter type of function.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate"/> over the specified argument
            </summary>
            <param name="argument"> The argument over which to perform the nest operation </param>
            <returns> A new group aggregate representing the elements of the group referenced by the given argument. </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new expression that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="body">An expression that defines the logic of the Lambda function.</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> collection that represents the formal parameters to the Lambda function. These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">variables is null or contains null, or body is null.</exception>
            <exception cref="T:System.ArgumentException">variables contains more than one element with the same variable name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> with the specified inline Lambda function implementation and formal parameters.
            </summary>
            <returns>A new expression that describes an inline Lambda function with the specified body and formal parameters.</returns>
            <param name="body">An expression that defines the logic of the Lambda function.</param>
            <param name="variables">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> collection that represents the formal parameters to the Lambda function. These variables are valid for use in the body expression.
            </param>
            <exception cref="T:System.ArgumentNullException">variables is null or contains null, or body is null.</exception>
            <exception cref="T:System.ArgumentException">variables contains more than one element with the same variable name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and default collation.
            </summary>
            <returns>A new sort clause with the given sort key and ascending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and default collation.
            </summary>
            <returns>A new sort clause with the given sort key and descending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with an ascending sort order and the specified collation.
            </summary>
            <returns>A new sort clause with the given sort key and collation, and ascending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> with a descending sort order and the specified collation.
            </summary>
            <returns>A new sort clause with the given sort key and collation, and descending sort order.</returns>
            <param name="key">The expression that defines the sort key.</param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
            <exception cref="T:System.ArgumentException">key does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the All operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
            <exception cref="T:System.ArgumentException">predicate  does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
            <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
            <exception cref="T:System.ArgumentNullException">input or apply is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of OuterApply.
            </returns>
            <param name="input">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.
            </param>
            <param name="apply">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies logic to evaluate once for each member of the input set.
            </param>
            <exception cref="T:System.ArgumentNullException">input or apply is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> that unconditionally joins the sets specified by the list of input expression bindings.
            </summary>
            <returns>
            A new DbCrossJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of CrossJoin, that represents the unconditional join of the input sets.
            </returns>
            <param name="inputs">A list of expression bindings that specifies the input sets.</param>
            <exception cref="T:System.ArgumentNullException">inputs is null or contains null element.</exception>
            <exception cref="T:System.ArgumentException">inputs contains fewer than 2 expression bindings.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right     input sets under the given join condition.
            </returns>
            <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
            <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">An expression that specifies the condition on which to join.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using LeftOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of LeftOuterJoin, that represents the left outer join operation applied to the left and right     input sets under the given join condition.
            </returns>
            <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
            <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">An expression that specifies the condition on which to join.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expression bindings, on the specified join condition, using FullOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of FullOuterJoin, that represents the full outer join operation applied to the left and right     input sets under the given join condition.
            </returns>
            <param name="left">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the left set argument.
            </param>
            <param name="right">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">An expression that specifies the condition on which to join.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
            <returns>A new DbFilterExpression that produces the filtered set.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="predicate">An expression representing a predicate to evaluate for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">input or predicate is null.</exception>
            <exception cref="T:System.ArgumentException">predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> that groups the elements of the input set according to the specified group keys and applies the given aggregates.
            </summary>
            <returns>A new DbGroupByExpression with the specified input set, grouping keys and aggregates.</returns>
            <param name="input">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set.
            </param>
            <param name="keys">A list of string-expression pairs that define the grouping columns.</param>
            <param name="aggregates">A list of expressions that specify aggregates to apply.</param>
            <exception cref="T:System.ArgumentNullException">input, keys or aggregates is null, keys contains a null column key or expression, or aggregates contains a null aggregate column name or aggregate.</exception>
            <exception cref="T:System.ArgumentException">Both keys and aggregates are empty, or an invalid or duplicate column name was specified.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified expression over the given input set.
            </summary>
            <returns>A new DbProjectExpression that represents the projection operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="projection">An expression to project over the set.</param>
            <exception cref="T:System.ArgumentNullException">input or projection is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that sorts the given input set by the given sort specifications before skipping the specified number of elements.
            </summary>
            <returns>A new DbSkipExpression that represents the skip operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
            <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
            <exception cref="T:System.ArgumentNullException">input, sortOrder or count is null, or sortOrder contains null.</exception>
            <exception cref="T:System.ArgumentException">
            sortOrder is empty, or count is not <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> or
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            or has a result type that is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort specifications.
            </summary>
            <returns>A new DbSortExpression that represents the sort operation.</returns>
            <param name="input">An expression binding that specifies the input set.</param>
            <param name="sortOrder">A list of sort specifications that determine how the elements of the input set should be sorted.</param>
            <exception cref="T:System.ArgumentNullException">input or sortOrder is null, or sortOrder contains null.</exception>
            <exception cref="T:System.ArgumentException">sortOrder is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, which represents a typed null value.
            </summary>
            <returns>An instance of DbNullExpression.</returns>
            <param name="nullType">The type of the null value.</param>
            <exception cref="T:System.ArgumentNullException">nullType is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the given constant value.
            </summary>
            <returns>A new DbConstantExpression with the given value.</returns>
            <param name="value">The constant value to represent.</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">value is not an instance of a valid constant type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> of the specified primitive type with the given constant value.
            </summary>
            <returns>A new DbConstantExpression with the given value and a result type of constantType.</returns>
            <param name="constantType">The type of the constant value.</param>
            <param name="value">The constant value to represent.</param>
            <exception cref="T:System.ArgumentNullException">value or constantType is null.</exception>
            <exception cref="T:System.ArgumentException">value is not an instance of a valid constant type, constantType does not represent a primitive type, or value is of a different primitive type than that represented by constantType.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> that references a parameter with the specified name and type.
            </summary>
            <returns>A DbParameterReferenceExpression that represents a reference to a parameter with the specified name and type. The result type of the expression will be the same as type.</returns>
            <param name="type">The type of the referenced parameter.</param>
            <param name="name">The name of the referenced parameter.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> that references a variable with the specified name and type.
            </summary>
            <returns>A DbVariableReferenceExpression that represents a reference to a variable with the specified name and type. The result type of the expression will be the same as type. </returns>
            <param name="type">The type of the referenced variable.</param>
            <param name="name">The name of the referenced variable.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> that references the specified entity or relationship set.
            </summary>
            <returns>A new DbScanExpression based on the specified entity or relationship set.</returns>
            <param name="targetSet">Metadata for the entity or relationship set to reference.</param>
            <exception cref="T:System.ArgumentNullException">targetSet is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> that performs the logical And of the left and right arguments.
            </summary>
            <returns>A new DbAndExpression with the specified arguments.</returns>
            <param name="left">A Boolean expression that specifies the left argument.</param>
            <param name="right">A Boolean expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">left and right  does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> that performs the logical Or of the left and right arguments.
            </summary>
            <returns>A new DbOrExpression with the specified arguments.</returns>
            <param name="left">A Boolean expression that specifies the left argument.</param>
            <param name="right">A Boolean expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression"/> that matches the result of the specified
            expression with the results of the constant expressions in the specified list.
            </summary>
            <param name="expression"> A DbExpression to be matched. </param>
            <param name="list"> A list of DbConstantExpression to test for a match. </param>
            <returns>
            A new DbInExpression with the specified arguments.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/>
            or
            <paramref name="list"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The result type of
            <paramref name="expression"/>
            is different than the result type of an expression from
            <paramref name="list"/>.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> that performs the logical negation of the given argument.
            </summary>
            <returns>A new DbNotExpression with the specified argument.</returns>
            <param name="argument">A Boolean expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that divides the left argument by the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the division operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left or right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that subtracts the right argument from the left argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the subtraction operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that computes the remainder of the left argument divided by the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the modulo operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that multiplies the left argument by the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the multiplication operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that adds the left argument to the right argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the addition operation.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common numeric result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the negation operation.</returns>
            <param name="argument">An expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">No numeric result type exists for argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> that negates the value of the argument.
            </summary>
            <returns>A new DbArithmeticExpression representing the negation operation.</returns>
            <param name="argument">An expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">No numeric result type exists for argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for equality.
            </summary>
            <returns>A new DbComparisonExpression representing the equality comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common equality-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that compares the left and right arguments for inequality.
            </summary>
            <returns>A new DbComparisonExpression representing the inequality comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common equality-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the greater-than comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the less-than comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is greater than or equal to the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the greater-than-or-equal-to comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common order-comparable result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> that determines whether the left argument is less than or equal to the right argument.
            </summary>
            <returns>A new DbComparisonExpression representing the less-than-or-equal-to comparison.</returns>
            <param name="left">An expression that specifies the left argument.</param>
            <param name="right">An expression that specifies the right argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common result type that is both equality- and order-comparable exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> that determines whether the specified argument is null.
            </summary>
            <returns>A new DbIsNullExpression with the specified argument.</returns>
            <param name="argument">An expression that specifies the argument.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument has a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern.
            </summary>
            <returns>A new DbLikeExpression with the specified input, pattern and a null escape.</returns>
            <param name="argument">An expression that specifies the input string.</param>
            <param name="pattern">An expression that specifies the pattern string.</param>
            <exception cref="T:System.ArgumentNullException">Argument or pattern is null.</exception>
            <exception cref="T:System.ArgumentException">Argument or pattern does not have a string result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> that compares the specified input string to the given pattern using the optional escape.
            </summary>
            <returns>A new DbLikeExpression with the specified input, pattern and escape.</returns>
            <param name="argument">An expression that specifies the input string.</param>
            <param name="pattern">An expression that specifies the pattern string.</param>
            <param name="escape">An optional expression that specifies the escape string.</param>
            <exception cref="T:System.ArgumentNullException">argument,  pattern or escape is null.</exception>
            <exception cref="T:System.ArgumentException">argument,  pattern or escape does not have a string result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> that applies a cast operation to a polymorphic argument.
            </summary>
            <returns>A new DbCastExpression with the specified argument and target type.</returns>
            <param name="argument">The argument to which the cast should be applied.</param>
            <param name="toType">Type metadata that specifies the type to cast to.</param>
            <exception cref="T:System.ArgumentNullException">Argument or toType is null.</exception>
            <exception cref="T:System.ArgumentException">The specified cast is not valid.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.
            </summary>
            <returns>A new DbTreatExpression with the specified argument and type.</returns>
            <param name="argument">An expression that specifies the instance.</param>
            <param name="treatType">Type metadata for the treat-as type.</param>
            <exception cref="T:System.ArgumentNullException">argument or treatType is null.</exception>
            <exception cref="T:System.ArgumentException">treatType is not in the same type hierarchy as the result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of the specified type.
            </summary>
            <returns>
            A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of
            <see
                cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />
            .
            </returns>
            <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="type">Type metadata for the type that elements of the input set must have to be included in the resulting set.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, or type is not a type in the same type hierarchy as the element type of the collection result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> that produces a set consisting of the elements of the given input set that are of exactly the specified type.
            </summary>
            <returns>
            A new DbOfTypeExpression with the specified set argument and type, and an ExpressionKind of
            <see
                cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />
            .
            </returns>
            <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="type">Type metadata for the type that elements of the input set must match exactly to be included in the resulting set.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, or type is not a type in the same type hierarchy as the element type of the collection result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> that determines whether the given argument is of the specified type or a subtype.
            </summary>
            <returns>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOf.</returns>
            <param name="argument">An expression that specifies the instance.</param>
            <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">type is not in the same type hierarchy as the result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> expression that determines whether the given argument is of the specified type, and only that type (not a subtype).
            </summary>
            <returns>A new DbIsOfExpression with the specified instance and type and DbExpressionKind IsOfOnly.</returns>
            <param name="argument">An expression that specifies the instance.</param>
            <param name="type">Type metadata that specifies the type that the instance's result type should be compared to.</param>
            <exception cref="T:System.ArgumentNullException">argument or type is null.</exception>
            <exception cref="T:System.ArgumentException">type is not in the same type hierarchy as the result type of argument.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> that retrieves a specific Entity given a reference expression.
            </summary>
            <returns>A new DbDerefExpression that retrieves the specified Entity.</returns>
            <param name="argument">
            An <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that provides the reference. This expression must have a reference Type.
            </param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a reference result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> that retrieves the ref of the specifed entity in structural form.
            </summary>
            <returns>A new DbEntityRefExpression that retrieves a reference to the specified entity.</returns>
            <param name="argument">The expression that provides the entity. This expression must have an entity result type.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have an entity result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet or entityType is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">entityType is not from the same type hierarchy (a subtype, supertype, or the same type) as entitySet's element type.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific entity of a given type based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given entity set.</returns>
            <param name="entitySet">The entity set in which the referenced element resides.</param>
            <param name="entityType">The specific type of the referenced entity. This must be an entity type from the same hierarchy as the entity set's element type.</param>
            <param name="keyValues">
            A collection of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that provide the key values. These expressions must match (in number, type, and order) the key properties of the referenced entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet or entityType is null, or keyValues is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">entityType is not from the same type hierarchy (a subtype, supertype, or the same type) as entitySet's element type.</exception>
            <exception cref="T:System.ArgumentException">The count of keyValues does not match the count of key members declared by the entitySet’s element type, or keyValues contains an expression with a result type that is not compatible with the type of the corresponding key member.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given Entity set.</returns>
            <param name="entitySet">The Entity set in which the referenced element resides.</param>
            <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
            <exception cref="T:System.ArgumentNullException">entitySet or keyRow is null.</exception>
            <exception cref="T:System.ArgumentException">keyRow does not have a record result type that matches the key properties of the referenced entity set's entity type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> that encodes a reference to a specific Entity based on key values.
            </summary>
            <returns>A new DbRefExpression that references the element with the specified key values in the given Entity set.</returns>
            <param name="entitySet">The Entity set in which the referenced element resides.</param>
            <param name="keyRow">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that constructs a record with columns that match (in number, type, and order) the Key properties of the referenced Entity type.
            </param>
            <param name="entityType">The type of the Entity that the reference should refer to.</param>
            <exception cref="T:System.ArgumentNullException">entitySet, keyRow or entityType is null.</exception>
            <exception cref="T:System.ArgumentException">entityType is not in the same type hierarchy as the entity set's entity type, or keyRow does not have a record result type that matches the key properties of the referenced entity set's entity type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> that retrieves the key values of the specifed reference in structural form.
            </summary>
            <returns>A new DbRefKeyExpression that retrieves the key values of the specified reference.</returns>
            <param name="argument">The expression that provides the reference. This expression must have a reference Type with an Entity element type.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a reference result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
            <returns>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</returns>
            <param name="navigateFrom">An expression that specifies the instance from which navigation should occur.</param>
            <param name="fromEnd">Metadata for the property that represents the end of the relationship from which navigation should occur.</param>
            <param name="toEnd">Metadata for the property that represents the end of the relationship to which navigation should occur.</param>
            <exception cref="T:System.ArgumentNullException">fromEnd, toEnd or navigateFrom is null.</exception>
            <exception cref="T:System.ArgumentException">fromEnd and toEnd are not declared by the same relationship type, or navigateFrom has a result type that is not compatible with the property type of fromEnd.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> representing the navigation of a composition or association relationship.
            </summary>
            <returns>A new DbRelationshipNavigationExpression representing the navigation of the specified from and to relation ends of the specified relation type from the specified navigation source instance.</returns>
            <param name="type">Metadata for the relation type that represents the relationship.</param>
            <param name="fromEndName">The name of the property of the relation type that represents the end of the relationship from which navigation should occur.</param>
            <param name="toEndName">The name of the property of the relation type that represents the end of the relationship to which navigation should occur.</param>
            <param name="navigateFrom">An expression the specifies the instance from which naviagtion should occur.</param>
            <exception cref="T:System.ArgumentNullException">type, fromEndName, toEndName or navigateFrom is null.</exception>
            <exception cref="T:System.ArgumentException">type is not associated with this command tree's metadata workspace or navigateFrom is associated with a different command tree, or type does not declare a relation end property with name toEndName or fromEndName, or navigateFrom has a result type that is not compatible with the property type of the relation end property with name fromEndName.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> that removes duplicates from the given set argument.
            </summary>
            <returns>A new DbDistinctExpression that represents the distinct operation applied to the specified set argument.</returns>
            <param name="argument">An expression that defines the set over which to perfom the distinct operation.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> that converts a set into a singleton.
            </summary>
            <returns>A DbElementExpression that represents the conversion of the set argument to a singleton.</returns>
            <param name="argument">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> that determines whether the specified set argument is an empty set.
            </summary>
            <returns>A new DbIsEmptyExpression with the specified argument.</returns>
            <param name="argument">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> that computes the subtraction of the right set argument from the left set argument.
            </summary>
            <returns>A new DbExceptExpression that represents the difference of the left argument from the right argument.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> that computes the intersection of the left and right set arguments.
            </summary>
            <returns>A new DbIntersectExpression that represents the intersection of the left and right arguments.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type exists between left or right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> that computes the union of the left and right set arguments and does not remove duplicates.
            </summary>
            <returns>A new DbUnionAllExpression that union, including duplicates, of the the left and right arguments.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type with an equality-comparable element type exists between left and right.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
            <returns>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</returns>
            <param name="argument">An expression that specifies the input collection.</param>
            <param name="count">An expression that specifies the limit value.</param>
            <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, or count does not have a result type that is equal or promotable to a 64-bit integer type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.
            </summary>
            <returns>A new DbCaseExpression with the specified cases and default result.</returns>
            <param name="whenExpressions">A list of expressions that provide the conditional for of each case.</param>
            <param name="thenExpressions">A list of expressions that provide the result of each case.</param>
            <param name="elseExpression">An expression that defines the result when no case is matched.</param>
            <exception cref="T:System.ArgumentNullException">whenExpressions or thenExpressions is null or contains null, or elseExpression is null.</exception>
            <exception cref="T:System.ArgumentException">whenExpressions or thenExpressions is empty or whenExpressions contains an expression with a non-Boolean result type, or no common result type exists for all expressions in thenExpressions and elseExpression.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
            <returns>A new DbFunctionExpression representing the function invocation.</returns>
            <param name="function">Metadata for the function to invoke.</param>
            <param name="arguments">A list of expressions that provide the arguments to the function.</param>
            <exception cref="T:System.ArgumentNullException">function is null, or arguments is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of parameters declared by function, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> representing the invocation of the specified function with the given arguments.
            </summary>
            <returns>A new DbFunctionExpression representing the function invocation.</returns>
            <param name="function">Metadata for the function to invoke.</param>
            <param name="arguments">Expressions that provide the arguments to the function.</param>
            <exception cref="T:System.ArgumentNullException">function is null, or arguments is null or contains null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of parameters declared by function, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding function parameter type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
            <returns>A new Expression representing the Lambda function application.</returns>
            <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
            <param name="arguments">A list of expressions that provide the arguments.</param>
            <exception cref="T:System.ArgumentNullException">lambda or arguments is null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of variables declared by lambda, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> representing the application of the specified Lambda function to the given arguments.
            </summary>
            <returns>A new expression representing the Lambda function application.</returns>
            <param name="lambda">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> instance representing the Lambda function to apply.
            </param>
            <param name="arguments">Expressions that provide the arguments.</param>
            <exception cref="T:System.ArgumentNullException">lambda or arguments is null.</exception>
            <exception cref="T:System.ArgumentException">The count of arguments does not equal the number of variables declared by lambda, or arguments contains an expression that has a result type that is not equal or promotable to the corresponding variable type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified type and arguments.</returns>
            <param name="instanceType">The type of the new instance.</param>
            <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
            <exception cref="T:System.ArgumentNullException">instanceType or arguments is null, or arguments contains null.</exception>
            <exception cref="T:System.ArgumentException">arguments is empty or the result types of the contained expressions do not match the requirements of instanceType  (as explained in the remarks section).</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />. If the type argument is a collection type, the arguments specify the elements of the collection. Otherwise the arguments are used as property or column values in the new instance.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified type and arguments.</returns>
            <param name="instanceType">The type of the new instance.</param>
            <param name="arguments">Expressions that specify values of the new instances, interpreted according to the instance's type.</param>
            <exception cref="T:System.ArgumentNullException">instanceType or arguments is null, or arguments contains null.</exception>
            <exception cref="T:System.ArgumentException">arguments is empty or the result types of the contained expressions do not match the requirements of instanceType  (as explained in the remarks section).</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a collection containing the specified elements. The type of the collection is based on the common type of the elements. If no common element type exists an exception is thrown.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified collection type and arguments.</returns>
            <param name="elements">A list of expressions that provide the elements of the collection.</param>
            <exception cref="T:System.ArgumentNullException">elements is null, or contains null.</exception>
            <exception cref="T:System.ArgumentException">elements is empty or contains expressions for which no common result type exists.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a collection containing the specified elements. The type of the collection is based on the common type of the elements. If no common element type exists an exception is thrown.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified collection type and arguments.</returns>
            <param name="elements">A list of expressions that provide the elements of the collection.</param>
            <exception cref="T:System.ArgumentNullException">elements is null, or contains null..</exception>
            <exception cref="T:System.ArgumentException">elements is empty or contains expressions for which no common result type exists.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs an empty collection of the specified collection type.
            </summary>
            <returns>A new DbNewInstanceExpression with the specified collection type and an empty Arguments list.</returns>
            <param name="collectionType">The type metadata for the collection to create</param>
            <exception cref="T:System.ArgumentNullException">collectionType is null.</exception>
            <exception cref="T:System.ArgumentException">collectionType is not a collection type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that produces a row with the specified named columns and the given values, specified as expressions.
            </summary>
            <returns>A new DbNewInstanceExpression that represents the construction of the row.</returns>
            <param name="columnValues">A list of string-DbExpression key-value pairs that defines the structure and values of the row.</param>
            <exception cref="T:System.ArgumentNullException">columnValues is null or contains an element with a null column name or expression.</exception>
            <exception cref="T:System.ArgumentException">columnValues is empty, or contains a duplicate or invalid column name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified property.
            </summary>
            <returns>A new DbPropertyExpression representing the property retrieval.</returns>
            <param name="instance">The instance from which to retrieve the property. May be null if the property is static.</param>
            <param name="propertyMetadata">Metadata for the property to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">propertyMetadata is null or instance is null and the property is not static.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified navigation property.
            </summary>
            <returns>A new DbPropertyExpression representing the navigation property retrieval.</returns>
            <param name="instance">The instance from which to retrieve the navigation property.</param>
            <param name="navigationProperty">Metadata for the navigation property to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">navigationProperty or instance is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the specified relationship end member.
            </summary>
            <returns>A new DbPropertyExpression representing the relationship end member retrieval.</returns>
            <param name="instance">The instance from which to retrieve the relationship end member.</param>
            <param name="relationshipEnd">Metadata for the relationship end member to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">relationshipEnd is null or instance is null and the property is not static.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> representing the retrieval of the instance property with the specified name from the given instance.
            </summary>
            <returns>A new DbPropertyExpression that represents the property retrieval.</returns>
            <param name="instance">The instance from which to retrieve the property.</param>
            <param name="propertyName">The name of the property to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">propertyName is null or instance is null and the property is not static.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">No property with the specified name is declared by the type of instance.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" /> representing setting a property to a value.
            </summary>
            <param name="property">The property to be set.</param>
            <param name="value">The value to set the property to.</param>
            <returns>The newly created set clause.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for all elements of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the All operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="predicate">A method representing a predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
            <exception cref="T:System.ArgumentException">source  does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by Predicate  does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> applied to a new
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            with the specified argument.
            </returns>
            <param name="source">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that determines whether the specified set argument is non-empty.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> applied to a new
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />
            with the specified argument.
            </returns>
            <param name="argument">An expression that specifies the input set.</param>
            <exception cref="T:System.ArgumentNullException">argument is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> that determines whether the given predicate holds for any element of the input set.
            </summary>
            <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="predicate">A method representing the predicate to evaluate for each member of the input set. This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that specifies the logic to evaluate once for each member of the input set. </param>
            <exception cref="T:System.ArgumentNullException">source or apply is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The result of apply contains a name or expression that is null.</exception>
            <exception cref="T:System.ArgumentException">The result of apply contains a name or expression that is not valid in an expression binding.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set have an apply column value of null.
            </summary>
            <returns>
            An new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of OuterApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that specifies the logic to evaluate once for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">source or apply is null.</exception>
            <exception cref="T:System.ArgumentException">Source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The result of apply contains a name or expression that is null.</exception>
            <exception cref="T:System.ArgumentException">The result of apply contains a name or expression that is not valid in an expression binding.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using FullOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of FullOuterJoin, that represents the full outer join operation applied to the left and right input sets under the given join condition.
            </returns>
            <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
            <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
            <param name="joinCondition"> A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right input sets under the given join condition.
            </returns>
            <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
            <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the left and right expressions, on the specified join condition, using LeftOuterJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of LeftOuterJoin, that represents the left outer join operation applied to the left and right input sets under the given join condition.
            </returns>
            <param name="left">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the left set argument.
            </param>
            <param name="right">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the right set argument.
            </param>
            <param name="joinCondition">A method representing the condition on which to join. This method must produce an expression with a Boolean result type that provides the logic of the join condition.</param>
            <exception cref="T:System.ArgumentNullException">left, right or joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">left or right does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by joinCondition is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by joinCondition does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> that joins the sets specified by the outer and inner expressions, on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbJoinExpression, with an <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.
            </returns>
            <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
            <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
            <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
            <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
            <exception cref="T:System.ArgumentNullException">outer, inner, outerKey or innerKey is null.</exception>
            <exception cref="T:System.ArgumentException">outer or inner does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by outerKey or innerKey is null.</exception>
            <exception cref="T:System.ArgumentException">The expressions produced by outerKey and innerKey are not comparable for equality.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that projects the specified selector over the sets specified by the outer and inner expressions, joined on an equality condition between the specified outer and inner keys, using InnerJoin as the
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            .
            </summary>
            <returns>
            A new DbProjectExpression with the specified selector as its projection, and a new DbJoinExpression as its input. The input DbJoinExpression is created with an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of InnerJoin, that represents the inner join operation applied to the left and right input sets under a join condition that compares the outer and inner key values for equality.
            </returns>
            <param name="outer">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the outer set argument.
            </param>
            <param name="inner">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the inner set argument.
            </param>
            <param name="outerKey">A method that specifies how the outer key value should be derived from an element of the outer set.</param>
            <param name="innerKey">A method that specifies how the inner key value should be derived from an element of the inner set.</param>
            <param name="selector">
            A method that specifies how an element of the result set should be derived from elements of the inner and outer sets. This method must produce an instance of a type that is compatible with Join and can be resolved into a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
            <typeparam name="TSelector">The type of the  selector .</typeparam>
            <exception cref="T:System.ArgumentNullException">outer, inner, outerKey, innerKey or selector is null.</exception>
            <exception cref="T:System.ArgumentException">outer or inner does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by outerKey or innerKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The result of selector is null after conversion to DbExpression.</exception>
            <exception cref="T:System.ArgumentException">The expressions produced by outerKey and innerKey is not comparable for equality.</exception>
            <exception cref="T:System.ArgumentException">The result of Selector is not compatible with SelectMany.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and default collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with ascending sort order and the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey  does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and default collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that sorts the given input set by the specified sort key, with descending sort order and the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the order-by operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="sortKey">A method that specifies how to derive the sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> that selects the specified expression over the given input set.
            </summary>
            <returns>A new DbProjectExpression that represents the select operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="projection">
            A method that specifies how to derive the projected expression given a member of the input set. This method must produce an instance of a type that is compatible with Select and can be resolved into a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TProjection  are described in remarks.
            </param>
            <typeparam name="TProjection">The method result type of projection.</typeparam>
            <exception cref="T:System.ArgumentNullException">source or projection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The result of projection is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the apply column from each row, producing the overall collection of apply results.
            </summary>
            <returns>
            An new DbProjectExpression that selects the apply column from a new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that represents the logic to evaluate once for each member of the input set.</param>
            <exception cref="T:System.ArgumentNullException">source or apply is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by apply is null.</exception>
            <exception cref="T:System.ArgumentException">source  does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by apply does not have a collection type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> that evaluates the given apply expression once for each element of a given input set, producing a collection of rows with corresponding input and apply columns. Rows for which apply evaluates to an empty set are not included. A
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />
            is then created that selects the specified selector over each row, producing the overall collection of results.
            </summary>
            <returns>
            An new DbProjectExpression that selects the result of the given selector from a new DbApplyExpression with the specified input and apply bindings and an
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />
            of CrossApply.
            </returns>
            <param name="source">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that specifies the input set.
            </param>
            <param name="apply">A method that represents the logic to evaluate once for each member of the input set. </param>
            <param name="selector">
            A method that specifies how an element of the result set should be derived given an element of the input and apply sets. This method must produce an instance of a type that is compatible with SelectMany and can be resolved into a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
            . Compatibility requirements for  TSelector  are described in remarks.
            </param>
            <typeparam name="TSelector">The method result type of selector.</typeparam>
            <exception cref="T:System.ArgumentNullException">source, apply or selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by apply is null.</exception>
            <exception cref="T:System.ArgumentNullException">The result of selector is null on conversion to DbExpression.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by apply does not have a collection type. does not have a collection type. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> that skips the specified number of elements from the given sorted input set.
            </summary>
            <returns>A new DbSkipExpression that represents the skip operation.</returns>
            <param name="argument">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that specifies the sorted input set.
            </param>
            <param name="count">An expression the specifies how many elements of the ordered set to skip.</param>
            <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
            <exception cref="T:System.ArgumentException">
            count is not <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> or
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />
            or has a result type that is not equal or promotable to a 64-bit integer type.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> that restricts the number of elements in the Argument collection to the specified count Limit value. Tied results are not included in the output.
            </summary>
            <returns>A new DbLimitExpression with the specified argument and count limit values that does not include tied results.</returns>
            <param name="argument">An expression that specifies the input collection.</param>
            <param name="count">An expression that specifies the limit value.</param>
            <exception cref="T:System.ArgumentNullException">argument or count is null.</exception>
            <exception cref="T:System.ArgumentException">argument does not have a collection result type, count does not have a result type that is equal or promotable to a 64-bit integer type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with default collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in ascending sort order and  with the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition. </param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with default collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
            <exception cref="T:System.ArgumentNullException">source or sortKey is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> that with a sort order that includes the sort order of the given order input set together with the specified sort key in descending sort order and  with the specified collation.
            </summary>
            <returns>A new DbSortExpression that represents the new overall order-by operation.</returns>
            <param name="source">A DbSortExpression that specifies the ordered input set.</param>
            <param name="sortKey">A method that specifies how to derive the additional sort key expression given a member of the input set. This method must produce an expression with an order-comparable result type that provides the sort key definition.</param>
            <param name="collation">The collation to sort under.</param>
            <exception cref="T:System.ArgumentNullException">source, sortKey or collation is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by sortKey is null.</exception>
            <exception cref="T:System.ArgumentException">source does not have a collection result type.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by sortKey does not have an order-comparable string result type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">collation is empty or contains only space characters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> that filters the elements in the given input set using the specified predicate.
            </summary>
            <returns>A new DbQuantifierExpression that represents the Any operation.</returns>
            <param name="source">An expression that specifies the input set.</param>
            <param name="predicate">A method representing the predicate to evaluate for each member of the input set.    This method must produce an expression with a Boolean result type that provides the predicate logic.</param>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The expression produced by predicate is null.</exception>
            <exception cref="T:System.ArgumentException">The expression produced by predicate does not have a Boolean result type.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that computes the union of the left and right set arguments with duplicates removed.
            </summary>
            <returns>A new DbExpression that computes the union, without duplicates, of the the left and right arguments.</returns>
            <param name="left">An expression that defines the left set argument.</param>
            <param name="right">An expression that defines the right set argument.</param>
            <exception cref="T:System.ArgumentNullException">left or right is null.</exception>
            <exception cref="T:System.ArgumentException">No common collection result type with an equality-comparable element type exists between left and right.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value true.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value true.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value false.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> with the Boolean value false.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
            <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that invoke canonical EDM functions, and allows that API to be accessed as extension methods on the expression type itself.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Avg' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the average value.</returns>
            <param name="collection">An expression that specifies the collection from which the average value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Count' function over the specified collection. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that produces the count value.</returns>
            <param name="collection">An expression that specifies the collection over which the count value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BigCount' function over the specified collection. The result type of the expression is Edm.Int64.
            </summary>
            <returns>A new DbFunctionExpression that produces the count value.</returns>
            <param name="collection">An expression that specifies the collection over which the count value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Max' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the maximum value.</returns>
            <param name="collection">An expression that specifies the collection from which the maximum value should be retrieved</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Min' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the minimum value.</returns>
            <param name="collection">An expression that specifies the collection from which the minimum value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Sum' function over the specified collection. The result type of the expression is the same as the element type of the collection.
            </summary>
            <returns>A new DbFunctionExpression that produces the sum.</returns>
            <param name="collection">An expression that specifies the collection from which the sum should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StDev' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the standard deviation value over non-null members of the collection.</returns>
            <param name="collection">An expression that specifies the collection for which the standard deviation should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StDevP' function over the population of the specified collection. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the standard deviation value.</returns>
            <param name="collection">An expression that specifies the collection for which the standard deviation should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Var' function over the non-null members of the specified collection. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the statistical variance value for the non-null members of the collection.</returns>
            <param name="collection">An expression that specifies the collection for which the statistical variance should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'VarP' function over the population of the specified collection. The result type of the expression Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that produces the statistical variance value.</returns>
            <param name="collection">An expression that specifies the collection for which the statistical variance should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Concat' function with the specified arguments, which must each have a string result type. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that produces the concatenated string.</returns>
            <param name="string1">An expression that specifies the string that should appear first in the concatenated result string.</param>
            <param name="string2">An expression that specifies the string that should appear second in the concatenated result string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Contains' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether or not searchedForString occurs within searchedString.</returns>
            <param name="searchedString">An expression that specifies the string to search for any occurence of searchedForString.</param>
            <param name="searchedForString">An expression that specifies the string to search for in searchedString.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether or not stringArgument ends with suffix.</returns>
            <param name="stringArgument">An expression that specifies the string that is searched at the end for string suffix.</param>
            <param name="suffix">An expression that specifies the target string that is searched for at the end of stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IndexOf' function with the specified arguments, which must each have a string result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the first index of stringToFind in searchString.</returns>
            <param name="searchString">An expression that specifies the string to search for stringToFind.</param>
            <param name="stringToFind">An expression that specifies the string to locate within searchString should be checked.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Left' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that returns the the leftmost substring of length length from stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string from which to extract the leftmost substring.</param>
            <param name="length">An expression that specifies the length of the leftmost substring to extract from stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Length' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the length of stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string for which the length should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Replace' function with the specified arguments, which must each have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression than returns a new string based on stringArgument where every occurence of toReplace is replaced by replacement.</returns>
            <param name="stringArgument">An expression that specifies the string in which to perform the replacement operation.</param>
            <param name="toReplace">An expression that specifies the string that is replaced.</param>
            <param name="replacement">An expression that specifies the replacement string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Reverse' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that produces the reversed value of stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string to reverse.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Right' function with the specified arguments, which must have a string and integer numeric result type. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that returns the the rightmost substring of length length from stringArgument.</returns>
            <param name="stringArgument">An expression that specifies the string from which to extract the rightmost substring.</param>
            <param name="length">An expression that specifies the length of the rightmost substring to extract from stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartsWith' function with the specified arguments, which must each have a string result type. The result type of the expression is Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether or not stringArgument starts with prefix.</returns>
            <param name="stringArgument">An expression that specifies the string that is searched at the start for string prefix.</param>
            <param name="prefix">An expression that specifies the target string that is searched for at the start of stringArgument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Substring' function with the specified arguments, which must have a string and integer numeric result types. The result type of the expression is string.
            </summary>
            <returns>A new DbFunctionExpression that returns the substring of length length from stringArgument starting at start.</returns>
            <param name="stringArgument">An expression that specifies the string from which to extract the substring.</param>
            <param name="start">An expression that specifies the starting index from which the substring should be taken.</param>
            <param name="length">An expression that specifies the length of the substring.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ToLower' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument converted to lower case.</returns>
            <param name="stringArgument">An expression that specifies the string that should be converted to lower case.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ToUpper' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument converted to upper case.</returns>
            <param name="stringArgument">An expression that specifies the string that should be converted to upper case.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Trim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument with leading and trailing space removed.</returns>
            <param name="stringArgument">An expression that specifies the string from which leading and trailing space should be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'RTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument with trailing space removed.</returns>
            <param name="stringArgument">An expression that specifies the string from which trailing space should be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'LTrim' function with the specified argument, which must have a string result type. The result type of the expression is also string.
            </summary>
            <returns>A new DbFunctionExpression that returns value of stringArgument with leading space removed.</returns>
            <param name="stringArgument">An expression that specifies the string from which leading space should be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Year' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer year value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the year should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Month' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer month value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the month should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Day' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer day value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the day should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DayOfYear' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer day of year value from dateValue.</returns>
            <param name="dateValue">An expression that specifies the value from which the day within the year should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Hour' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer hour value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the hour should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Minute' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer minute value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the minute should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Second' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer second value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the second should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Millisecond' function with the specified argument, which must have a DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer millisecond value from timeValue.</returns>
            <param name="timeValue">An expression that specifies the value from which the millisecond should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GetTotalOffsetMinutes' function with the specified argument, which must have a DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of minutes dateTimeOffsetArgument is offset from GMT.</returns>
            <param name="dateTimeOffsetArgument">An expression that specifies the DateTimeOffset value from which the minute offset from GMT should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CurrentDateTime' function.
            </summary>
            <returns>A new DbFunctionExpression that returns the current date and time as an Edm.DateTime instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CurrentDateTimeOffset' function.
            </summary>
            <returns>A new DbFunctionExpression that returns the current date and time as an Edm.DateTimeOffset instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CurrentUtcDateTime' function.
            </summary>
            <returns>A new DbFunctionExpression that returns the current UTC date and time as an Edm.DateTime instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'TruncateTime' function with the specified argument, which must have a DateTime or DateTimeOffset result type. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that returns the value of dateValue with time set to zero.</returns>
            <param name="dateValue">An expression that specifies the value for which the time portion should be truncated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CreateDateTime' function with the specified arguments. second must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTime.
            </summary>
            <returns>A new DbFunctionExpression that returns a new DateTime based on the specified values.</returns>
            <param name="year">An expression that provides the year value for the new DateTime instance.</param>
            <param name="month">An expression that provides the month value for the new DateTime instance.</param>
            <param name="day">An expression that provides the day value for the new DateTime instance.</param>
            <param name="hour">An expression that provides the hour value for the new DateTime instance.</param>
            <param name="minute">An expression that provides the minute value for the new DateTime instance.</param>
            <param name="second">An expression that provides the second value for the new DateTime instance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CreateDateTimeOffset' function with the specified arguments. second must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.DateTimeOffset.
            </summary>
            <returns>A new DbFunctionExpression that returns a new DateTimeOffset based on the specified values.</returns>
            <param name="year">An expression that provides the year value for the new DateTimeOffset instance.</param>
            <param name="month">An expression that provides the month value for the new DateTimeOffset instance.</param>
            <param name="day">An expression that provides the day value for the new DateTimeOffset instance.</param>
            <param name="hour">An expression that provides the hour value for the new DateTimeOffset instance.</param>
            <param name="minute">An expression that provides the minute value for the new DateTimeOffset instance.</param>
            <param name="second">An expression that provides the second value for the new DateTimeOffset instance.</param>
            <param name="timeZoneOffset">An expression that provides the number of minutes in the time zone offset value for the new DateTimeOffset instance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CreateTime' function with the specified arguments. second must have a result type of Edm.Double, while all other arguments must have a result type of Edm.Int32. The result type of the expression is Edm.Time.
            </summary>
            <returns>A new DbFunctionExpression that returns a new Time based on the specified values.</returns>
            <param name="hour">An expression that provides the hour value for the new DateTime instance.</param>
            <param name="minute">An expression that provides the minute value for the new DateTime instance.</param>
            <param name="second">An expression that provides the second value for the new DateTime instance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddYears' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of years specified by addValue to the value specified by dateValue.</returns>
            <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of years to add to dateValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMonths' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of months specified by addValue to the value specified by dateValue.</returns>
            <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of months to add to dateValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddDays' function with the specified arguments, which must have DateTime or DateTimeOffset and integer result types. The result type of the expression is the same as the result type of dateValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of days specified by addValue to the value specified by dateValue.</returns>
            <param name="dateValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of days to add to dateValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddHours' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of hours specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of hours to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMinutes' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of minutes specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of minutes to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddSeconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of seconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of seconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMilliseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of milliseconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of milliseconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddMicroseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of microseconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of microseconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AddNanoseconds' function with the specified arguments, which must have DateTime, DateTimeOffset or Time, and integer result types. The result type of the expression is the same as the result type of timeValue.
            </summary>
            <returns>A new DbFunctionExpression that adds the number of nanoseconds specified by addValue to the value specified by timeValue.</returns>
            <param name="timeValue">An expression that specifies the value to which addValueshould be added.</param>
            <param name="addValue">An expression that specifies the number of nanoseconds to add to timeValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffYears' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of years that is the difference between dateValue1 and dateValue2.</returns>
            <param name="dateValue1">An expression that specifies the first date value argument.</param>
            <param name="dateValue2">An expression that specifies the second date value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMonths' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of months that is the difference between dateValue1 and dateValue2.</returns>
            <param name="dateValue1">An expression that specifies the first date value argument.</param>
            <param name="dateValue2">An expression that specifies the second date value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffDays' function with the specified arguments, which must each have DateTime or DateTimeOffset result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of days that is the difference between dateValue1 and dateValue2.</returns>
            <param name="dateValue1">An expression that specifies the first date value argument.</param>
            <param name="dateValue2">An expression that specifies the second date value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffHours' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of hours that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMinutes' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of minutes that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffSeconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of seconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMilliseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of milliseconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffMicroseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of microseconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'DiffNanoseconds' function with the specified arguments, which must each have DateTime, DateTimeOffset or Time result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the number of nanoseconds that is the difference between timeValue1 and timeValue2.</returns>
            <param name="timeValue1">An expression that specifies the first time value argument.</param>
            <param name="timeValue2">An expression that specifies the second time value argument.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Round' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that rounds the specified argument to the nearest integer value.</returns>
            <param name="value">An expression that specifies the numeric value to round.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Round' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that rounds the specified argument to the nearest integer value, with precision as specified by digits.</returns>
            <param name="value">An expression that specifies the numeric value to round.</param>
            <param name="digits">An expression that specifies the number of digits of precision to use when rounding.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Floor' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that returns the largest integer value not greater than value.</returns>
            <param name="value">An expression that specifies the numeric value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Ceiling' function with the specified argument, which must each have a single, double or decimal result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that returns the smallest integer value not less than than value.</returns>
            <param name="value">An expression that specifies the numeric value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Abs' function with the specified argument, which must each have a numeric result type. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that returns the absolute value of value.</returns>
            <param name="value">An expression that specifies the numeric value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Truncate' function with the specified arguments, which must have a single, double or decimal, and integer result types. The result type of the expression is the same as the result type of value.
            </summary>
            <returns>A new DbFunctionExpression that truncates the specified argument to the nearest integer value, with precision as specified by digits.</returns>
            <param name="value">An expression that specifies the numeric value to truncate.</param>
            <param name="digits">An expression that specifies the number of digits of precision to use when truncating.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Power' function with the specified arguments, which must have numeric result types. The result type of the expression is the same as the result type of baseArgument.
            </summary>
            <returns>A new DbFunctionExpression that returns the value of baseArgument raised to the power specified by exponent.</returns>
            <param name="baseArgument">An expression that specifies the numeric value to raise to the given power.</param>
            <param name="exponent">An expression that specifies the power to which baseArgument should be raised.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseAnd' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise AND of value1 and value2.</returns>
            <param name="value1">An expression that specifies the first operand.</param>
            <param name="value2">An expression that specifies the second operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseOr' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise OR of value1 and value2.</returns>
            <param name="value1">An expression that specifies the first operand.</param>
            <param name="value2">An expression that specifies the second operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseNot' function with the specified argument, which must have an integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise NOT of value.</returns>
            <param name="value">An expression that specifies the first operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'BitwiseXor' function with the specified arguments, which must have the same integer numeric result type. The result type of the expression is the same as the type of the arguments.
            </summary>
            <returns>A new DbFunctionExpression that returns the value produced by performing the bitwise XOR (exclusive OR) of value1 and value2.</returns>
            <param name="value1">An expression that specifies the first operand.</param>
            <param name="value2">An expression that specifies the second operand.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'NewGuid' function.
            </summary>
            <returns>A new DbFunctionExpression that returns a new GUID value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
            <summary>
            Provides a constructor-like means of calling
            <see
                cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> class with the specified first column value and optional successive column values.
            </summary>
            <param name="columnValue">A key-value pair that provides the first column in the new row instance. (required)</param>
            <param name="columnValues">A key-value pairs that provide any subsequent columns in the new row instance. (optional)</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> that constructs a new row based on the columns contained in this Row instance.
            </summary>
            <returns>A new DbNewInstanceExpression that constructs a row with the same column names and DbExpression values as this Row instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
            <summary>
            Converts the given Row instance into an instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/>
            </summary>
            <param name="row">The Row instance.</param>
            <returns> A DbExpression based on the Row instance </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="row"/>
            is null.
            </exception>
            <seealso cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression"/>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
            <summary>
            Provides an API to construct <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />s that invoke spatial realted canonical EDM functions, and, where appropriate, allows that API to be accessed as extension methods on the expression type itself.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromText' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geometry. Its value has the default coordinate system id (SRID) of the underlying provider.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified value.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromText' function with the specified arguments. wellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPointFromText' function with the specified arguments. pointWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry point value based on the specified values.</returns>
            <param name="pointWellKnownText">An expression that provides the well known text representation of the geometry point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryLineFromText' function with the specified arguments. lineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry line value based on the specified values.</returns>
            <param name="lineWellKnownText">An expression that provides the well known text representation of the geometry line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPolygonFromText' function with the specified arguments. polygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry polygon value based on the specified values.</returns>
            <param name="polygonWellKnownText">An expression that provides the well known text representation of the geometry polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPointFromText' function with the specified arguments. multiPointWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownText">An expression that provides the well known text representation of the geometry multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiLineFromText' function with the specified arguments. multiLineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownText">An expression that provides the well known text representation of the geometry multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPolygonFromText' function with the specified arguments. multiPolygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownText">An expression that provides the well known text representation of the geometry multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryCollectionFromText' function with the specified arguments. geometryCollectionWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry collection value based on the specified values.</returns>
            <param name="geometryCollectionWellKnownText">An expression that provides the well known text representation of the geometry collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromBinary' function with the specified argument, which must have a binary result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified binary value.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromBinary' function with the specified arguments. wellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPointFromBinary' function with the specified arguments. pointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry point value based on the specified values.</returns>
            <param name="pointWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryLineFromBinary' function with the specified arguments. lineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry line value based on the specified values.</returns>
            <param name="lineWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryPolygonFromBinary' function with the specified arguments. polygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry polygon value based on the specified values.</returns>
            <param name="polygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPointFromBinary' function with the specified arguments. multiPointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiLineFromBinary' function with the specified arguments. multiLineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryMultiPolygonFromBinary' function with the specified arguments. multiPolygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryCollectionFromBinary' function with the specified arguments. geometryCollectionWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry collection value based on the specified values.</returns>
            <param name="geometryCollectionWellKnownBinaryValue">An expression that provides the well known binary representation of the geometry collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromGml' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified value with the default coordinate system id (SRID) of the underlying provider.</returns>
            <param name="geometryMarkup">An expression that provides the Geography Markup Language (GML) representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeometryFromGml' function with the specified arguments. geometryMarkup must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geometry value based on the specified values.</returns>
            <param name="geometryMarkup">An expression that provides the Geography Markup Language (GML) representation of the geometry value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geometry value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromText' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geography. Its value has the default coordinate system id (SRID) of the underlying provider.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified value.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromText' function with the specified arguments. wellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
            <param name="wellKnownText">An expression that provides the well known text representation of the geography value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPointFromText' function with the specified arguments.
            </summary>
            <returns>The canonical 'GeographyPointFromText' function.</returns>
            <param name="pointWellKnownText">An expression that provides the well-known text representation of the geography point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography point value's coordinate systempointWellKnownTextValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyLineFromText' function with the specified arguments. lineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography line value based on the specified values.</returns>
            <param name="lineWellKnownText">An expression that provides the well known text representation of the geography line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPolygonFromText' function with the specified arguments. polygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography polygon value based on the specified values.</returns>
            <param name="polygonWellKnownText">An expression that provides the well known text representation of the geography polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPointFromText' function with the specified arguments. multiPointWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownText">An expression that provides the well known text representation of the geography multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiLineFromText' function with the specified arguments. multiLineWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownText">An expression that provides the well known text representation of the geography multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPolygonFromText' function with the specified arguments. multiPolygonWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownText">An expression that provides the well known text representation of the geography multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyCollectionFromText' function with the specified arguments. geographyCollectionWellKnownText must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography collection value based on the specified values.</returns>
            <param name="geographyCollectionWellKnownText">An expression that provides the well known text representation of the geography collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromBinary' function with the specified argument, which must have a binary result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified binary value.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromBinary' function with the specified arguments. wellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
            <param name="wellKnownBinaryValue">An expression that provides the well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPointFromBinary' function with the specified arguments. pointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography point value based on the specified values.</returns>
            <param name="pointWellKnownBinaryValue">An expression that provides the well known binary representation of the geography point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography point value's coordinate systempointWellKnownBinaryValue.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyLineFromBinary' function with the specified arguments. lineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography line value based on the specified values.</returns>
            <param name="lineWellKnownBinaryValue">An expression that provides the well known binary representation of the geography line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyPolygonFromBinary' function with the specified arguments. polygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography polygon value based on the specified values.</returns>
            <param name="polygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geography polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPointFromBinary' function with the specified arguments. multiPointWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-point value based on the specified values.</returns>
            <param name="multiPointWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-point value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-point value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiLineFromBinary' function with the specified arguments. multiLineWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-line value based on the specified values.</returns>
            <param name="multiLineWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-line value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-line value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyMultiPolygonFromBinary' function with the specified arguments. multiPolygonWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography multi-polygon value based on the specified values.</returns>
            <param name="multiPolygonWellKnownBinaryValue">An expression that provides the well known binary representation of the geography multi-polygon value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography multi-polygon value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyCollectionFromBinary' function with the specified arguments. geographyCollectionWellKnownBinaryValue must have a binary result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography collection value based on the specified values.</returns>
            <param name="geographyCollectionWellKnownBinaryValue">An expression that provides the well known binary representation of the geography collection value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography collection value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromGml' function with the specified argument, which must have a string result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified value with the default coordinate system id (SRID) of the underlying provider.</returns>
            <param name="geographyMarkup">An expression that provides the Geography Markup Language (GML) representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'GeographyFromGml' function with the specified arguments. geographyMarkup must have a string result type, while coordinateSystemId must have an integer numeric result type. The result type of the expression is Edm.Geography.
            </summary>
            <returns>A new DbFunctionExpression that returns a new geography value based on the specified values.</returns>
            <param name="geographyMarkup">An expression that provides the Geography Markup Language (GML) representation of the geography value.</param>
            <param name="coordinateSystemId">An expression that provides the coordinate system id (SRID) of the geography value's coordinate system.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'CoordinateSystemId' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the integer SRID value from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the value from which the coordinate system id (SRID) should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTypeName' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
            <returns>A new DbFunctionExpression that returns the string Geometry Type name from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the value from which the Geometry Type name should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDimension' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns the Dimension value from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the value from which the Dimension value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEnvelope' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns the the minimum bounding box for geometryValue.</returns>
            <param name="geometryValue">An expression that specifies the value from which the Envelope value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsBinary' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Binary.
            </summary>
            <returns>A new DbFunctionExpression that returns the well known binary representation of spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the well known binary representation should be produced.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsGml' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
            <returns>A new DbFunctionExpression that returns the Geography Markup Language (GML) representation of spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the Geography Markup Language (GML) representation should be produced.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'AsText' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.String.
            </summary>
            <returns>A new DbFunctionExpression that returns the well known text representation of spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the well known text representation should be produced.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsEmptySpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue is empty.</returns>
            <param name="spatialValue">An expression that specifies the spatial value from which the IsEmptySptiaal value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsSimpleGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue is a simple geometry.</returns>
            <param name="geometryValue">The geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBoundary' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns the the boundary for geometryValue.</returns>
            <param name="geometryValue">An expression that specifies the geometry value from which the SpatialBoundary value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsValidGeometry' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue is valid.</returns>
            <param name="geometryValue">An expression that specifies the geometry value which should be tested for spatial validity.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialEquals' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue1 and spatialValue2 are equal.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for equality.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDisjoint' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue1 and spatialValue2 are spatially disjoint.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for disjointness.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersects' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether spatialValue1 and spatialValue2 intersect.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value that should be compared with spatialValue1 for intersection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialTouches' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 touches geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialCrosses' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 crosses geometryValue2 intersect.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialWithin' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 is spatially within geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialContains' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 spatially contains geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialOverlaps' function with the specified arguments, which must each have an Edm.Geometry result type. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 spatially overlaps geometryValue2.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialRelate' function with the specified arguments, which must have Edm.Geometry and string result types. The result type of the expression is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns a Boolean value indicating whether geometryValue1 is spatially related to geometryValue2 according to the spatial relationship designated by intersectionPatternMatrix.</returns>
            <param name="geometryValue1">An expression that specifies the first geometry value.</param>
            <param name="geometryValue2">An expression that specifies the geometry value that should be compared with geometryValue1.</param>
            <param name="intersectionPatternMatrix">An expression that specifies the text representation of the Dimensionally Extended Nine-Intersection Model (DE-9IM) intersection pattern used to compare geometryValue1 and geometryValue2.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialBuffer' function with the specified arguments, which must have a Edm.Geography or Edm.Geometry and Edm.Double result types. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns a geometry value representing all points less than or equal to distance from spatialValue.</returns>
            <param name="spatialValue">An expression that specifies the spatial value.</param>
            <param name="distance">An expression that specifies the buffer distance.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Distance' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type.  The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns the distance between the closest points in spatialValue1 and spatialValue1.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value from which the distance from spatialValue1 should be measured.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialConvexHull' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns the the convex hull for geometryValue.</returns>
            <param name="geometryValue">An expression that specifies the geometry value from which the convex hull value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialIntersection' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the spatial value representing the intersection of spatialValue1 and spatialValue2.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the intersection with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialUnion' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the spatial value representing the union of spatialValue1 and spatialValue2.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the union with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the geometry value representing the difference of spatialValue2 with spatialValue1.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the difference with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialSymmetricDifference' function with the specified arguments, which must each have an Edm.Geography or Edm.Geometry result type. The result type of spatialValue1 must match the result type of spatialValue2. The result type of the expression is the same as the type of spatialValue1 and spatialValue2.
            </summary>
            <returns>A new DbFunctionExpression that returns the geometry value representing the symmetric difference of spatialValue2 with spatialValue1.</returns>
            <param name="spatialValue1">An expression that specifies the first spatial value.</param>
            <param name="spatialValue2">An expression that specifies the spatial value for which the symmetric difference with spatialValue1 should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns either the number of elements in spatialValue or null if spatialValue is not a collection.</returns>
            <param name="spatialValue">An expression that specifies the geography or geometry collection value from which the number of elements should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialElementAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the collection element at position indexValue in spatialValue or null if spatialValue is not a collection.</returns>
            <param name="spatialValue">An expression that specifies the geography or geometry collection value.</param>
            <param name="indexValue">An expression that specifies the position of the element to be retrieved from within the geometry or geography collection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'XCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the X co-ordinate value of geometryValue or null if geometryValue is not a point.</returns>
            <param name="geometryValue">An expression that specifies the geometry point value from which the X co-ordinate value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'YCoordinate' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Y co-ordinate value of geometryValue or null if geometryValue is not a point.</returns>
            <param name="geometryValue">An expression that specifies the geometry point value from which the Y co-ordinate value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Elevation' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the elevation value of spatialValue or null if spatialValue is not a point.</returns>
            <param name="spatialValue">An expression that specifies the spatial point value from which the elevation (Z co-ordinate) value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Measure' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Measure of spatialValue or null if spatialValue is not a point.</returns>
            <param name="spatialValue">An expression that specifies the spatial point value from which the Measure (M) co-ordinate value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Latitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Latitude value of geographyValue or null if geographyValue is not a point.</returns>
            <param name="geographyValue">An expression that specifies the geography point value from which the Latitude value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Longitude' function with the specified argument, which must have an Edm.Geography result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the Longitude value of geographyValue or null if geographyValue is not a point.</returns>
            <param name="geographyValue">An expression that specifies the geography point value from which the Longitude value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'SpatialLength' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the length of spatialValue or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the length should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'StartPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the start point of spatialValue or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the start point should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'EndPoint' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the end point of spatialValue or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the end point should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsClosedSpatial' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns either a Boolean value indicating whether spatialValue is closed, or null if spatialValue is not a curve.</returns>
            <param name="spatialValue">An expression that specifies the spatial curve value from which the IsClosedSpatial value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'IsRing' function with the specified argument, which must have an Edm.Geometry result type. The result type is Edm.Boolean.
            </summary>
            <returns>A new DbFunctionExpression that returns either a Boolean value indicating whether geometryValue is a ring (both closed and simple), or null if geometryValue is not a curve.</returns>
            <param name="geometryValue">An expression that specifies the geometry curve value from which the IsRing value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointCount' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns either the number of points in spatialValue or null if spatialValue is not a line string.</returns>
            <param name="spatialValue">An expression that specifies the spatial line string value from which the number of points should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointAt' function with the specified arguments. The first argument must have an Edm.Geography or Edm.Geometry result type. The second argument must have an integer numeric result type. The result type of the expression is the same as that of spatialValue.
            </summary>
            <returns>A new DbFunctionExpression that returns either the point at position indexValue in spatialValue or null if spatialValue is not a line string.</returns>
            <param name="spatialValue">An expression that specifies the spatial line string value.</param>
            <param name="indexValue">An expression that specifies the position of the point to be retrieved from within the line string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Area' function with the specified argument, which must have an Edm.Geography or Edm.Geometry result type. The result type of the expression is Edm.Double.
            </summary>
            <returns>A new DbFunctionExpression that returns either the area of spatialValue or null if spatialValue is not a surface.</returns>
            <param name="spatialValue">An expression that specifies the spatial surface value for which the area should be calculated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'Centroid' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either the centroid point of geometryValue (which may not be on the surface itself) or null if geometryValue is not a surface.</returns>
            <param name="geometryValue">An expression that specifies the geometry surface value from which the centroid should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'PointOnSurface' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either a point guaranteed to be on the surface geometryValue or null if geometryValue is not a surface.</returns>
            <param name="geometryValue">An expression that specifies the geometry surface value from which the point should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'ExteriorRing' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either the exterior ring of the polygon geometryValue or null if geometryValue is not a polygon.</returns>
            <param name="geometryValue">The geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingCount' function with the specified argument, which must have an Edm.Geometry result type. The result type of the expression is Edm.Int32.
            </summary>
            <returns>A new DbFunctionExpression that returns either the number of interior rings in the polygon geometryValue or null if geometryValue is not a polygon.</returns>
            <param name="geometryValue">The geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> that invokes the canonical 'InteriorRingAt' function with the specified arguments. The first argument must have an Edm.Geometry result type. The second argument must have an integer numeric result types. The result type of the expression is Edm.Geometry.
            </summary>
            <returns>A new DbFunctionExpression that returns either the interior ring at position indexValue in geometryValue or null if geometryValue is not a polygon.</returns>
            <param name="geometryValue">The geometry value.</param>
            <param name="indexValue">An expression that specifies the position of the interior ring to be retrieved from within the polygon.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
            <summary>
            Ensures that all metadata in a given expression tree is from the specified metadata workspace,
            potentially rebinding and rebuilding the expressions to appropriate replacement metadata where necessary.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" /> class.</summary>
            <param name="targetWorkspace">The target workspace.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>Implements the visitor pattern for the entity set.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="entitySet">The entity set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>Implements the visitor pattern for the function.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="functionMetadata">The function metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>Implements the visitor pattern for the type.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>Implements the visitor pattern for the type usage.</summary>
            <returns>The implemented visitor pattern.</returns>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
            <summary>Implements the visitor pattern for retrieving an instance property.</summary>
            <returns>The implemented visitor.</returns>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
            <summary>
            Represents a boolean expression that tests whether a specified item matches any element in a list.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>
            The visitor pattern method for expression visitors that do not produce a result value.
            </summary>
            <param name="visitor"> An instance of DbExpressionVisitor. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/>
            is null
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>
            The visitor pattern method for expression visitors that produce a result value of a specific type.
            </summary>
            <param name="visitor"> An instance of a typed DbExpressionVisitor that produces a result value of type TResultType. </param>
            <typeparam name="TResultType">
            The type of the result produced by <paramref name="visitor"/>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/>
            is null
            </exception>
            <returns>
            An instance of <typeparamref name="TResultType"/> .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
            <summary>
            Gets a DbExpression that specifies the item to be matched.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
            <summary>
            Gets the list of DbExpression to test for a match.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
            <summary>
            Represents the retrieval of the key value of the specified Reference as a row.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
            <summary>
            Represents the set union (without duplicate removal) operation between the left and right operands.
            </summary>
            <remarks>
            DbUnionAllExpression requires that its arguments have a common collection result type
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
            <summary>
            Represents a 'scan' of all elements of a given entity set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
            <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
            <param name="visitor">
            An instance of <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.
            </param>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
            <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
            <returns>
            A result value of a specific type produced by
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
            .
            </returns>
            <param name="visitor">
            An instance of a typed <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.
            </param>
            <typeparam name="TResultType">The type of the result produced by  visitor .</typeparam>
            <exception cref="T:System.ArgumentNullException"> visitor  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
            <summary>Gets the metadata for the referenced entity or relationship set.</summary>
            <returns>The metadata for the referenced entity or relationship set.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
            <summary>
            Extension methods for <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
            <summary>
            Gets the conceptual model from the specified DbModel.
            </summary>
            <param name="model">An instance of a class that implements IEdmModelAdapter (ex. DbModel).</param>
            <returns>An instance of EdmModel that represents the conceptual model.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
            <summary>
            Gets the store model from the specified DbModel.
            </summary>
            <param name="model">An instance of a class that implements IEdmModelAdapter (ex. DbModel).</param>
            <returns>An instance of EdmModel that represents the store model.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
            <summary>
            An interface to get the underlying store and conceptual model for a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
            <summary>
            Gets the conceptual model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
            <summary>
            Gets the store model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
            <summary>
            Inherit from this class to create a service that allows for code generation of custom annotations as part of 
            scaffolding Migrations. The derived class should be set onto the <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator"/>.
            </summary>
            <remarks>
            Note that an <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> is not needed if the annotation uses a simple string value,
            or if calling ToString on the annotation object is sufficient for use in the scaffolded Migration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Override this method to return additional namespaces that should be included in the code generated for the
            scaffolded migration. The default implementation returns an empty enumeration.
            </summary>
            <param name="annotationNames">The names of the annotations that are being included in the generated code.</param>
            <returns>A list of additional namespaces to include.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Implement this method to generate code for the given annotation value.
            </summary>
            <param name="annotationName">The name of the annotation for which a value is being generated.</param>
            <param name="annotation">The annotation value.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
            <summary>
            Represents a pair of annotation values in a scaffolded or hand-coded <see cref="T:System.Data.Entity.Migrations.DbMigration"/>.
            </summary>
            <remarks>
            Code First allows for custom annotations to be associated with columns and tables in the
            generated model. This class represents a pair of annotation values in a migration such
            that when the Code First model changes the old annotation value and the new annotation
            value can be provided to the migration and used in SQL generation.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new pair of annotation values.
            </summary>
            <param name="oldValue">The old value of the annotation, which may be null if the annotation has just been created.</param>
            <param name="newValue">The new value of the annotation, which may be null if the annotation has been deleted.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
            <summary>
            Returns true if both annotation pairs contain the same values, otherwise false.
            </summary>
            <param name="left">A pair of annotation values.</param>
            <param name="right">A pair of annotation values.</param>
            <returns>True if both pairs contain the same values.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
            <summary>
            Returns true if the two annotation pairs contain different values, otherwise false.
            </summary>
            <param name="left">A pair of annotation values.</param>
            <param name="right">A pair of annotation values.</param>
            <returns>True if the pairs contain different values.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
            <summary>
            Gets the old value of the annotation, which may be null if the annotation has just been created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
            <summary>
            Gets the new value of the annotation, which may be null if the annotation has been deleted.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
            <summary>
            Returned by <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)"/> and related methods to indicate whether or
            not one object does not conflict with another such that the two can be combined into one.
            </summary>
            <remarks>
            If the two objects are not compatible then information about why they are not compatible is contained
            in the <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage"/> property.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult"/> instance.
            </summary>
            <param name="isCompatible">Indicates whether or not the two tested objects are compatible.</param>
            <param name="errorMessage">
            An error message indicating how the objects are not compatible. Expected to be null if isCompatible is true.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
            <summary>
            Implicit conversion to a bool to allow the result object to be used directly in checks.
            </summary>
            <param name="result">The object to convert.</param>
            <returns>True if the result is compatible; false otherwise.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
            <summary>
            True if the two tested objects are compatible; otherwise false.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
            <summary>
            If <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible"/> is true, then returns an error message indicating how the two tested objects
            are incompatible.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
            <summary>
            Types used as custom annotations can implement this interface to indicate that an attempt to use
            multiple annotations with the same name on a given table or column may be possible by merging
            the multiple annotations into one.
            </summary>
            <remarks>
            Normally there can only be one custom annotation with a given name on a given table or
            column. If a table or column ends up with multiple annotations, for example, because
            multiple CLR properties map to the same column, then an exception will be thrown.
            However, if the annotation type implements this interface, then the two annotations will be
            checked for compatibility using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)"/> method and, if compatible,
            will be merged into one using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
            <summary>
            Returns true if this annotation does not conflict with the given annotation such that
            the two can be combined together using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)"/> method.
            </summary>
            <param name="other">The annotation to compare.</param>
            <returns>A CompatibilityResult indicating whether or not this annotation is compatible with the other.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
            <summary>
            Merges this annotation with the given annotation and returns a new merged annotation. This method is
            only expected to succeed if <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)"/> returns true.
            </summary>
            <param name="other">The annotation to merge with this one.</param>
            <returns>A new merged annotation.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
            <summary>
            Instances of this class are used as custom annotations for representing database indexes in an
            Entity Framework model.
            </summary>
            <remarks>
            An index annotation is added to a Code First model when an <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> is placed on
            a mapped property of that model. This is used by Entity Framework Migrations to create indexes on
            mapped database columns. Note that multiple index attributes on a property will be merged into a
            single annotation for the column. Similarly, index attributes on multiple properties that map to the
            same column will be merged into a single annotation for the column. This means that one index
            annotation can represent multiple indexes. Within an annotation there can be only one index with any
            given name.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
            <summary>
            The name used when this annotation is stored in Entity Framework metadata or serialized into
            an SSDL/EDMX file.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
            <summary>
            Creates a new annotation for the given index.
            </summary>
            <param name="indexAttribute">An index attributes representing an index.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
            <summary>
            Creates a new annotation for the given collection of indexes.
            </summary>
            <param name="indexAttributes">Index attributes representing one or more indexes.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
            <summary>
            Returns true if this annotation does not conflict with the given annotation such that
            the two can be combined together using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)"/> method.
            </summary>
            <remarks>
            Each index annotation contains at most one <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> with a given name.
            Two annotations are considered compatible if each IndexAttribute with a given name is only
            contained in one annotation or the other, or if both annotations contain an IndexAttribute
            with the given name.
            </remarks>
            <param name="other">The annotation to compare.</param>
            <returns>A CompatibilityResult indicating whether or not this annotation is compatible with the other.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
            <summary>
            Merges this annotation with the given annotation and returns a new annotation containing the merged indexes.
            </summary>
            <remarks>
            Each index annotation contains at most one <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> with a given name.
            The merged annotation will contain IndexAttributes from both this and the other annotation.
            If both annotations contain an IndexAttribute with the same name, then the merged annotation
            will contain one IndexAttribute with that name.
            </remarks>
            <param name="other">The annotation to merge with this one.</param>
            <returns>A new annotation with indexes from both annotations merged.</returns>
            <exception cref="T:System.InvalidOperationException">
            The other annotation contains indexes that are not compatible with indexes in this annotation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
            <summary>
            Gets the indexes represented by this annotation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
            <summary>
                This class is used to serialize and deserialize <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> objects so that they
                can be stored in the EDMX form of the Entity Framework model.
            </summary>
            <remarks>
                An example of the serialized format is:
                { Name: 'MyIndex', Order: 7, IsClustered: True, IsUnique: False } { } { Name: 'MyOtherIndex' }.
                Note that properties that have not been explicitly set in an index attribute will be excluded from
                the serialized output. So, in the example above, the first index has all properties specified,
                the second has none, and the third has just the name set.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
            <summary>
            Implement this interface to allow custom annotations represented by <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/> instances to be
            serialized to and from the EDMX XML. Usually a serializer instance is set using the
            <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})"/> method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
            <summary>
            Serializes the given annotation value into a string for storage in the EDMX XML.
            </summary>
            <param name="name">The name of the annotation that is being serialized.</param>
            <param name="value">The value to serialize.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
            <summary>
            Deserializes the given string back into the expected annotation value.
            </summary>
            <param name="name">The name of the annotation that is being deserialized.</param>
            <param name="value">The string to deserialize.</param>
            <returns>The deserialized annotation value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
            <summary>
                Serializes the given <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> into a string for storage in the EDMX XML.
            </summary>
            <param name="name">The name of the annotation that is being serialized.</param>
            <param name="value">The value to serialize which must be an IndexAnnotation object.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
            <summary>
                Deserializes the given string back into an <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> object.
            </summary>
            <param name="name">The name of the annotation that is being deserialized.</param>
            <param name="value">The string to deserialize.</param>
            <returns>The deserialized annotation value.</returns>
            <exception cref="T:System.FormatException">If there is an error reading the serialized value.</exception>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
            <summary>
            This interface is implemented by any object that can resolve a dependency, either directly
            or through use of an external container.
            </summary>
            <remarks>
            The public services currently resolved using IDbDependencyResolver are documented here:
            http://msdn.microsoft.com/en-us/data/jj680697
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
            <summary>
            Attempts to resolve a dependency for a given contract type and optionally a given key.
            If the resolver cannot resolve the dependency then it must return null and not throw. This
            allows resolvers to be used in a Chain of Responsibility pattern such that multiple resolvers
            can be asked to resolve a dependency until one finally does.
            </summary>
            <param name="type"> The interface or abstract base class that defines the dependency to be resolved. The returned object is expected to be an instance of this type. </param>
            <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
            <returns> The resolved dependency, which must be an instance of the given contract type, or null if the dependency could not be resolved. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
            <summary>
            Attempts to resolve a dependencies for a given contract type and optionally a given key.
            If the resolver cannot resolve the dependency then it must return an empty enumeration and
            not throw. This method differs from <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> in that it returns all registered
            services for the given type and key combination.
            </summary>
            <param name="type"> The interface or abstract base class that defines the dependency to be resolved. Every returned object is expected to be an instance of this type. </param>
            <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
            <returns> All services that resolve the dependency, which must be instances of the given contract type, or an empty enumeration if the dependency could not be resolved. </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> implementation used for resolving <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/>
            factories.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver"/>
            </summary>
            <param name="transactionHandlerFactory">A function that returns a new instance of a transaction handler.</param>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which the transaction handler will be used.
            <c>null</c> will match anything.
            </param>
            <param name="serverName">
            A string that will be matched against the server name in the connection string. <c>null</c> will match anything.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this method will attempt
            to return the service to use, otherwise it will return <c>null</c>. When the given type is
            <see cref="T:System.Func`1"/>, then the key is expected to be a <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An <see cref="T:System.Func`1"/>, or null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this resolver will attempt
            to return the service to use, otherwise it will return an empty enumeration. When the given type is
            <see cref="T:System.Func`1"/>, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An enumerable of <see cref="T:System.Func`1"/>, or an empty enumeration.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogger">
            <summary>
            A simple logger for logging SQL and other database operations to the console or a file.
            A logger can be registered in code or in the application's web.config /app.config file.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework loads the application's <see cref="T:System.Data.Entity.DbConfiguration"/>.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor">
            <summary>
            This is the base interface for all interfaces that provide interception points for various
            different types and operations. For example, see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>.
            Interceptors are registered on the <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor.Loaded(System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs,System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext)">
            <summary>
            Occurs during EF initialization after the <see cref="T:System.Data.Entity.DbConfiguration"/> has been constructed but just before
            it is locked ready for use. Use this event to inspect and/or override services that have been
            registered before the configuration is locked. Note that an interceptor of this type should be used carefully
            since it may prevent tooling from discovering the same configuration that is used at runtime.
            </summary>
            <remarks>
            Handlers can only be added before EF starts to use the configuration and so handlers should
            generally be added as part of application initialization. Do not access the DbConfiguration
            static methods inside the handler; instead use the the members of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs"/>
            to get current services and/or add overrides.
            </remarks>
            <param name="loadedEventArgs">Arguments to the event that this interceptor mirrors.</param>
            <param name="interceptionContext">Contextual information about the event.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor">
            <summary>
            Creates a new logger that will send log output to the console.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor(System.String)">
            <summary>
            Creates a new logger that will send log output to a file. If the file already exists then
            it is overwritten.
            </summary>
            <param name="path">A path to the file to which log output will be written.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new logger that will send log output to a file.
            </summary>
            <param name="path">A path to the file to which log output will be written.</param>
            <param name="append">True to append data to the file if it exists; false to overwrite the file.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.Dispose">
            <summary>
            Stops logging and closes the underlying file if output is being written to a file.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.Dispose(System.Boolean)">
            <summary>
            Stops logging and closes the underlying file if output is being written to a file.
            </summary>
            <param name="disposing">
            True to release both managed and unmanaged resources; False to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.StartLogging">
            <summary>
            Starts logging. This method is a no-op if logging is already started.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.StopLogging">
            <summary>
            Stops logging. This method is a no-op if logging is not started.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.System#Data#Entity#Infrastructure#Interception#IDbConfigurationInterceptor#Loaded(System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs,System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext)">
            <summary>
            Called to start logging during Entity Framework initialization when this logger is registered.
            as an <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/>. 
            </summary>
            <param name="loadedEventArgs">Arguments to the event that this interceptor mirrors.</param>
            <param name="interceptionContext">Contextual information about the event.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/>
            implementations.
            </summary>
            <remarks>
            Note that specific types/operations that can be intercepted may use a more specific
            interception context derived from this class. For example, if SQL is being executed by
            a <see cref="T:System.Data.Entity.DbContext"/>, then the DbContext will be contained in the
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> instance that is passed to the methods
            of <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>.
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> by copying state from the given
            interception context. See <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> that contains all the contextual information in this
            interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone">
            <summary>
            Call this method when creating a copy of an interception context in order to add new state
            to it. Using this method instead of calling the constructor directly ensures virtual dispatch
            so that the new type will have the same type (and any specialized state) as the context that
            is being cloned.
            </summary>
            <returns>A new context with all state copied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.DbContexts">
            <summary>
            Gets all the <see cref="T:System.Data.Entity.DbContext"/> instances associated with this interception context.
            </summary>
            <remarks>
            This list usually contains zero or one items. However, it can contain more than one item if
            a single <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> has been used to construct multiple <see cref="T:System.Data.Entity.DbContext"/>
            instances.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ObjectContexts">
            <summary>
            Gets all the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> instances associated with this interception context.
            </summary>
            <remarks>
            This list usually contains zero or one items. However, it can contain more than one item when
            EF has created a new <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> for use in database creation and initialization, or
            if a single <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/> is used with multiple <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ObjectContexts"/>.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync">
            <summary>
            True if the operation is being executed asynchronously, otherwise false.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> by copying state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> that contains all the contextual information in
            this interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> that contains all the contextual information in
            this interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext"/> that contains all the contextual information in
            this interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
            <summary>
                Implemented by Entity Framework providers and used to check whether or not tables exist
                in a given database. This is used by database initializers when determining whether or not to
                treat an existing database as empty such that tables should be created.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
            <summary>
                When overridden in a derived class checks where the given tables exist in the database
                for the given connection.
            </summary>
            <param name="context">
                The context for which table checking is being performed, usually used to obtain an appropriate
                <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/>.
            </param>
            <param name="connection">
                A connection to the database. May be open or closed; should be closed again if opened. Do not
                dispose.
            </param>
            <param name="modelTables">The tables to check for existence.</param>
            <param name="edmMetadataContextTableName">The name of the EdmMetadata table to check for existence.</param>
            <returns>True if any of the model tables or EdmMetadata table exists.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
            <summary>
                Helper method to get the table name for the given s-space <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet"/>.
            </summary>
            <param name="modelTable">The s-space entity set for the table.</param>
            <returns>The table name.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
            <summary>
            Thrown when an error occurs committing a <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/>
            </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/>
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException"/> class.
            </summary>
            <param name="info">The data necessary to serialize or deserialize an object.</param>
            <param name="context">Description of the source and destination of the specified serialized stream.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
            <summary>
            Event arguments passed to <see cref="E:System.Data.Entity.DbConfiguration.Loaded"/> event handlers.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
            <summary>
            Call this method to add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of
            Responsibility of resolvers that are used to resolve dependencies needed by the Entity Framework.
            </summary>
            <remarks>
            Resolvers are asked to resolve dependencies in reverse order from which they are added. This means
            that a resolver can be added to override resolution of a dependency that would already have been
            resolved in a different way.
            The only exception to this is that any dependency registered in the application's config file
            will always be used in preference to using a dependency resolver added here, unless the
            overrideConfigFile is set to true in which case the resolver added here will also override config
            file settings.
            </remarks>
            <param name="resolver"> The resolver to add. </param>
            <param name="overrideConfigFile">If true, then the resolver added will take precedence over settings in the config file.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Call this method to add a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> instance to the Chain of Responsibility
            of resolvers that are used to resolve dependencies needed by the Entity Framework. Unlike the AddDependencyResolver
            method, this method puts the resolver at the bottom of the Chain of Responsibility such that it will only
            be used to resolve a dependency that could not be resolved by any of the other resolvers.
            </summary>
            <param name="resolver"> The resolver to add. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
            <summary>
            Adds a wrapping resolver to the configuration that is about to be locked. A wrapping
            resolver is a resolver that incepts a service would have been returned by the resolver
            chain and wraps or replaces it with another service of the same type.
            </summary>
            <typeparam name="TService">The type of service to wrap or replace.</typeparam>
            <param name="serviceInterceptor">A delegate that takes the unwrapped service and key and returns the wrapped or replaced service.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
            <summary>
            Returns a snapshot of the <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> that is about to be locked.
            Use the GetService methods on this object to get services that have been registered.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> implementation used for resolving <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/>
            factories.
            </summary>
            <remarks>
            This class can be used by <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/> to aid in the resolving
            of <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> factories as a default service for the provider.
            </remarks>
            <typeparam name="T">The type of execution strategy that is resolved.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1"/>
            </summary>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </param>
            <param name="serverName">
            A string that will be matched against the server name in the connection string. <c>null</c> will match anything.
            </param>
            <param name="getExecutionStrategy">A function that returns a new instance of an execution strategy.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this resolver will attempt
            to return the service to use, otherwise it will return null. When the given type is
            Func{IExecutionStrategy}, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An <see cref="T:System.Func`1"/>, or null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
            <summary>
            If the given type is <see cref="T:System.Func`1"/>, then this resolver will attempt
            to return the service to use, otherwise it will return an empty enumeration. When the given type is
            Func{IExecutionStrategy}, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>.
            </summary>
            <param name="type">The service type to resolve.</param>
            <param name="key">A key used to make a determination of the service to return.</param>
            <returns>
            An enumerable of <see cref="T:System.Func`1"/>, or an empty enumeration.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
            <summary>
            Extension methods to call the <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> method using
            a generic type parameter and/or no name.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> passing the generic type of the method and the given
            name as arguments.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <param name="key"> The key of the dependency to resolve. </param>
            <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)"/> passing the given type argument and using
            null for the name argument.
            </summary>
            <param name="resolver"> The resolver to use. </param>
            <param name="type"> The contract type to resolve. </param>
            <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)"/> passing the generic type of the method and the given
            name as arguments.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <param name="key"> The key of the dependency to resolve. </param>
            <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if no services are resolved.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)"/> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
            <typeparam name="T"> The contract type to resolve. </typeparam>
            <param name="resolver"> The resolver to use. </param>
            <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if no services are resolved.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
            <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)"/> passing the given type argument and using
            null for the name argument.
            </summary>
            <param name="resolver"> The resolver to use. </param>
            <param name="type"> The contract type to resolve. </param>
            <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if no services are resolved.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
            <summary>
            Implements <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> to resolve a dependency such that it always returns
            the same instance.
            </summary>
            <typeparam name="T"> The type that defines the contract for the dependency that will be resolved. </typeparam>
            <remarks>
            This class is immutable such that instances can be accessed by multiple threads at the same time.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
            <summary>
            Constructs a new resolver that will return the given instance for the contract type
            regardless of the key passed to the Get method.
            </summary>
            <param name="singletonInstance"> The instance to return. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
            <summary>
            Constructs a new resolver that will return the given instance for the contract type
            if the given key matches exactly the key passed to the Get method.
            </summary>
            <param name="singletonInstance"> The instance to return. </param>
            <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
            <summary>
            Constructs a new resolver that will return the given instance for the contract type
            if the given key matches the key passed to the Get method based on the given predicate.
            </summary>
            <param name="singletonInstance"> The instance to return. </param>
            <param name="keyPredicate"> A predicate that takes the key object and returns true if and only if it matches. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbConnection"/> with return type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The return type of the target method.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls with return type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The return type of the target method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalResult">
            <summary>
            If execution of the operation completes without throwing, then this property will contain
            the result of the operation. If the operation was suppressed or did not fail, then this property
            will always contain the default value for the generic type.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/>
            property are set. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/> property can be set or changed by interceptors,
            while this property will always represent the actual result returned by the operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set result will be returned instead. Otherwise, if the operation succeeds, then
            this property will be set to the returned result. In either case, interceptors that run
            after the operation can change this property to change the result that will be returned.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalResult"/>
            property are set. However, this property can be set or changed by interceptors, while the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalResult"/> property will always represent the actual result returned by the
            operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.SuppressExecution"/>, by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception"/> to be thrown, or
            by setting the operation result using <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task`1"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.WithIsolationLevel(System.Data.IsolationLevel)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given <see cref="P:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.IsolationLevel"/>.
            </summary>
            <param name="isolationLevel">The isolation level to associate.</param>
            <returns>A new interception context associated with the given isolation level.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.IsolationLevel">
            <summary>
            The <see cref="P:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext.IsolationLevel"/> that will be used or has been used to start a transaction.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter">
            <summary>
            This is the default log formatter used when some <see cref="T:System.Action`1"/> is set onto the <see cref="P:System.Data.Entity.Database.Log"/>
            property. A different formatter can be used by creating a class that inherits from this class and overrides
            some or all methods to change behavior.
            </summary>
            <remarks>
            To set the new formatter create a code-based configuration for EF using <see cref="T:System.Data.Entity.DbConfiguration"/> and then
            set the formatter class to use with <see cref="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})"/>.
            Note that setting the type of formatter to use with this method does change the way command are
            logged when <see cref="P:System.Data.Entity.Database.Log"/> is used. It is still necessary to set a <see cref="T:System.Action`1"/>
            onto <see cref="P:System.Data.Entity.Database.Log"/> before any commands will be logged.
            For more low-level control over logging/interception see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> and
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework executes commands.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or
            one of its async counterparts is made.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>  or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
            <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
            <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/> or
            one of its async counterparts is made.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/> or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
            <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework performs operations on a <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/> is invoked.
            </summary>
            <param name="connection">The connection beginning the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/> is invoked.
            The transaction used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result"/>.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.Close"/> is invoked.
            </summary>
            <param name="connection">The connection being closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Close"/> is invoked.
            </summary>
            <param name="connection">The connection that was closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is set.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionString"/> is set.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.Database"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.Database"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.DataSource"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.DataSource"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.ComponentModel.Component.Dispose"/> is invoked.
            </summary>
            <param name="connection">The connection being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.ComponentModel.Component.Dispose"/> is invoked.
            </summary>
            <param name="connection">The connection that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/> is invoked.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/> is invoked.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.Open"/> or its async counterpart is invoked.
            </summary>
            <param name="connection">The connection being opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Open"/> or its async counterpart is invoked.
            </summary>
            <param name="connection">The connection that was opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ServerVersion"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ServerVersion"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.State"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.State"/> is retrieved.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework commits or rollbacks a transaction.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbTransaction.Connection"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbTransaction.Connection"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Called before <see cref="P:System.Data.Common.DbTransaction.IsolationLevel"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Called after <see cref="P:System.Data.Common.DbTransaction.IsolationLevel"/> is retrieved.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Commit"/> is invoked.
            </summary>
            <param name="transaction">The transaction being commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Commit"/> is invoked.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Dispose"/> is invoked.
            </summary>
            <param name="transaction">The transaction being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Dispose"/> is invoked.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Rollback"/> is invoked.
            </summary>
            <param name="transaction">The transaction being rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Rollback"/> is invoked.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.#ctor(System.Action{System.String})">
            <summary>
            Creates a formatter that will not filter by any <see cref="T:System.Data.Entity.DbContext"/> and will instead log every command
            from any context and also commands that do not originate from a context.
            </summary>
            <remarks>
            This constructor is not used when a delegate is set on <see cref="P:System.Data.Entity.Database.Log"/>. Instead it can be
            used by setting the formatter directly using <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Add(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)"/>.
            </remarks>
            <param name="writeAction">The delegate to which output will be sent.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.#ctor(System.Data.Entity.DbContext,System.Action{System.String})">
            <summary>
            Creates a formatter that will only log commands the come from the given <see cref="T:System.Data.Entity.DbContext"/> instance.
            </summary>
            <remarks>
            This constructor must be called by a class that inherits from this class to override the behavior
            of <see cref="P:System.Data.Entity.Database.Log"/>.
            </remarks>
            <param name="context">
            The context for which commands should be logged. Pass null to log every command
            from any context and also commands that do not originate from a context.
            </param>
            <param name="writeAction">The delegate to which output will be sent.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Write(System.String)">
            <summary>
            Writes the given string to the underlying write delegate.
            </summary>
            <param name="output">The string to write.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or
            one of its async counterparts is made.
            The default implementation calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> and starts <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or
            one of its async counterparts is made.
            The default implementation stops <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"/> and calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made.
            The default implementation calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> and starts <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or
            one of its async counterparts is made.
            The default implementation stops <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"/> and calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>  or
            one of its async counterparts is made.
            The default implementation calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> and starts <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>  or
            one of its async counterparts is made.
            The default implementation stops <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"/> and calls <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called whenever a command is about to be executed. The default implementation of this method
            filters by <see cref="T:System.Data.Entity.DbContext"/> set into <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>. This method would typically only be overridden to change the
            context filtering behavior.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command that will be executed.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called whenever a command has completed executing. The default implementation of this method
            filters by <see cref="T:System.Data.Entity.DbContext"/> set into <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then calls
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogResult``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/>. This method would typically only be overridden to change the context
            filtering behavior.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command that was executed.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called to log a command that is about to be executed. Override this method to change how the
            command is logged to <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.WriteAction"/>.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command to be logged.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogParameter``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0},System.Data.Common.DbParameter)">
            <summary>
            Called by <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> to log each parameter. This method can be called from an overridden
            implementation of <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})"/> to log parameters, and/or can be overridden to
            change the way that parameters are logged to <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.WriteAction"/>.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command being logged.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
            <param name="parameter">The parameter to log.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogResult``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
            <summary>
            Called to log the result of executing a command. Override this method to change how results are
            logged to <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.WriteAction"/>.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <param name="command">The command being logged.</param>
            <param name="interceptionContext">Contextual information associated with the command.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection beginning the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection being opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Open"/> or its async counterpart is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection that was opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection being closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Close"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection that was closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Called before <see cref="M:System.ComponentModel.Component.Dispose"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="connection">The connection being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Does not write to log unless overridden. </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction being commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Commit"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called before <see cref="M:System.Data.Common.DbTransaction.Dispose"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="transaction">The transaction being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Does not write to log unless overridden.
            </summary>
            <param name="transaction">The transaction being rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            This method is called after <see cref="M:System.Data.Common.DbTransaction.Rollback"/> is invoked.
            The default implementation of this method filters by <see cref="T:System.Data.Entity.DbContext"/> set into
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"/>, if any, and then logs the event.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context">
            <summary>
            The context for which commands are being logged, or null if commands from all contexts are
            being logged.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch">
            <summary>
            The stop watch used to time executions. This stop watch is started at the end of
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/>, <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/>, and <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/>
            methods and is stopped at the beginning of the <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/>, <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/>,
            and <see cref="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> methods. If these methods are overridden and the stop watch is being used
            then the overrides should either call the base method or start/stop the watch themselves.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbConnection"/> that don't return any results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext">
            <summary>
            Represents contextual information associated with calls that don't return any results.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.SuppressExecution"/> or by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception"/> to be thrown
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to property setters of type <typeparamref name="TValue"/> on a <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <typeparam name="TValue">The type of the target property.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to property setters of type <typeparamref name="TValue"/>.
            </summary>
            <remarks>
            An instance of this class is passed to the dispatch methods and does not contain mutable information such as
            the result of the operation. This mutable information is obtained from the <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/>
            that is passed to the interceptors. Instances of this class are publicly immutable. To add contextual information
            use one of the With... or As... methods to create a new interception context containing the new information.
            </remarks>
            <typeparam name="TValue">The type of the target property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.WithValue(`0)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given property value.
            </summary>
            <param name="value">The value that will be assigned to the target property.</param>
            <returns>A new interception context associated with the given property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Value">
            <summary>
            The value that will be assigned to the target property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.SuppressExecution"/> or by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception"/> to be thrown
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.PropertyInterceptionContext`1.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.WithValue(`0)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the given property value.
            </summary>
            <param name="value">The value that will be assigned to the target property.</param>
            <returns>A new interception context associated with the given property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher">
            <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbCommand"/> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
            <remarks>
            This class is used internally by Entity Framework when executing commands. It is provided publicly so that
            code that runs outside of the core EF assemblies can opt-in to command interception/tracing. This is
            typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Scalar(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="command">The command on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            implementations.
            </summary>
            <remarks>
            An instance of this class is passed to the dispatch methods of <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher"/>
            and does not contain mutable information such as the result of the operation. This mutable information
            is obtained from the <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that is passed to the interceptors.
            Instances of this class are publicly immutable. To add contextual information use one of the
            With... or As... methods to create a new interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> by copying state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithCommandBehavior(System.Data.CommandBehavior)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior"/>.
            </summary>
            <param name="commandBehavior">The command behavior to associate.</param>
            <returns>A new interception context associated with the given command behavior.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"/> that contains all the contextual information in this
            interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior">
            <summary>
            The <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior"/> that will be used or has been used to execute the command with a
            <see cref="T:System.Data.Common.DbDataReader"/>. This property is only used for <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/>
            and its async counterparts.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>
            implementations including the result of the operation.
            </summary>
            <typeparam name="TResult">The type of the operation's results.</typeparam>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.SuppressExecution">
            <summary>
            Prevents the operation from being executed if called before the operation has executed.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this method is called after the operation has already executed.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithCommandBehavior(System.Data.CommandBehavior)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the given <see cref="T:System.Data.CommandBehavior"/>.
            </summary>
            <param name="commandBehavior">The command behavior to associate.</param>
            <returns>A new interception context associated with the given command behavior.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult">
            <summary>
            If execution of the operation completes without throwing, then this property will contain
            the result of the operation. If the operation was suppressed or did not fail, then this property
            will always contain the default value for the generic type.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>
            property are set. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/> property can be set or changed by interceptors,
            while this property will always represent the actual result returned by the operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set result will be returned instead. Otherwise, if the operation succeeds, then
            this property will be set to the returned result. In either case, interceptors that run
            after the operation can change this property to change the result that will be returned.
            </summary>
            <remarks>
            When an operation operation completes without throwing both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult"/>
            property are set. However, this property can be set or changed by interceptors, while the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult"/> property will always represent the actual result returned by the
            operation, if any.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.IsExecutionSuppressed">
            <summary>
            When true, this flag indicates that that execution of the operation has been suppressed by
            one of the interceptors. This can be done before the operation has executed by calling
            <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.SuppressExecution"/>, by setting an <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"/> to be thrown, or
            by setting the operation result using <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException">
            <summary>
            If execution of the operation fails, then this property will contain the exception that was
            thrown. If the operation was suppressed or did not fail, then this property will always be null.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"/> property are set
            to the exception that was thrown. However, the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"/> property can be set or
            changed by interceptors, while this property will always represent the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception">
            <summary>
            If this property is set before the operation has executed, then execution of the operation will
            be suppressed and the set exception will be thrown instead. Otherwise, if the operation fails, then
            this property will be set to the exception that was thrown. In either case, interceptors that run
            after the operation can change this property to change the exception that will be thrown, or set this
            property to null to cause no exception to be thrown at all.
            </summary>
            <remarks>
            When an operation fails both this property and the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException"/> property are set
            to the exception that was thrown. However, the this property can be set or changed by
            interceptors, while the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException"/> property will always represent
            the original exception thrown.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.TaskStatus">
            <summary>
            Set to the status of the <see cref="T:System.Threading.Tasks.Task`1"/> after an async operation has finished. Not used for
            synchronous operations.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor">
            <summary>
            Base class that implements <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>. This class is a convenience for
            use when only one or two methods of the interface actually need to have any implementation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext">
            <summary>
            Represents contextual information associated with calls into <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> by copying state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"/> that contains all the contextual information in this
            interception context the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult">
            <summary>
            The original tree created by Entity Framework. Interceptors can change the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result"/> property to change the tree that will be used, but the
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult"/> will always be the tree created by Entity Framework.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result">
            <summary>
            The command tree that will be used by Entity Framework. This starts as the tree contained in the 
            the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult"/> property but can be set by interceptors to change
            the tree that will be used by Entity Framework.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.UserState">
            <summary>
            Gets or sets a value containing arbitrary user-specified state information associated with the operation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher">
            <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbConnection"/> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
            <remarks>
            This class is used internally by Entity Framework when interacting with <see cref="T:System.Data.Common.DbConnection"/>.
            It is provided publicly so that code that runs outside of the core EF assemblies can opt-in to command
            interception/tracing. This is typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.BeginTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/>.
            </summary>
            <remarks>
            Note that the result of executing the command is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Close(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.Close"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Dispose(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.ComponentModel.Component.Dispose"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetConnectionString(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.ConnectionString"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.SetConnectionString(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            setting <see cref="P:System.Data.Common.DbConnection.ConnectionString"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Information about the context of the call being made, including the value to be set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetConnectionTimeout(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetDatabase(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.Database"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetDataSource(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.DataSource"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.EnlistTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbConnection.Open"/>.
            </summary>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetServerVersion(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.ServerVersion"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetState(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbConnection.State"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="connection">The connection on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbDispatchers">
            <summary>
            Provides access to all dispatchers through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Command">
            <summary>
            Provides methods for dispatching to <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> interceptors for
            interception of methods on <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Transaction">
            <summary>
            Provides methods for dispatching to <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> interceptors for
            interception of methods on <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Connection">
            <summary>
            Provides methods for dispatching to <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> interceptors for
            interception of methods on <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbInterception">
            <summary>
            This is the registration point for <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> interceptors. Interceptors
            receive notifications when EF performs certain operations such as executing commands against
            the database. For example, see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Add(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
            <summary>
            Registers a new <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> to receive notifications. Note that the interceptor
            must implement some interface that extends from <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> to be useful.
            </summary>
            <param name="interceptor">The interceptor to add.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Remove(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
            <summary>
            Removes a registered <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"/> so that it will no longer receive notifications.
            If the given interceptor is not registered, then this is a no-op.
            </summary>
            <param name="interceptor">The interceptor to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch">
            <summary>
            This is the entry point for dispatching to interceptors. This is usually only used internally by
            Entity Framework but it is provided publicly so that other code can make sure that registered
            interceptors are called when operations are performed on behalf of EF. For example, EF providers
            a may make use of this when executing commands.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher">
            <summary>
            Used for dispatching operations to a <see cref="T:System.Data.Common.DbTransaction"/> such that any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> will be notified before and after the
            operation executes.
            Instances of this class are obtained through the the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"/> fluent API.
            </summary>
            <remarks>
            This class is used internally by Entity Framework when interacting with <see cref="T:System.Data.Common.DbTransaction"/>.
            It is provided publicly so that code that runs outside of the core EF assemblies can opt-in to command
            interception/tracing. This is typically done by EF providers that are executing commands on behalf of EF.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetConnection(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbTransaction.Connection"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetIsolationLevel(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after
            getting <see cref="P:System.Data.Common.DbTransaction.IsolationLevel"/>.
            </summary>
            <remarks>
            Note that the value of the property is returned by this method. The result is not available
            in the interception context passed into this method since the interception context is cloned before
            being passed to interceptors.
            </remarks>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
            <returns>The result of the operation, which may have been modified by interceptors.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Commit(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Commit"/>.
            </summary>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Dispose(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Dispose"/>.
            </summary>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Rollback(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Sends <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> and
            <see cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/> to any <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor"/>
            registered on <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> before/after making a
            call to <see cref="M:System.Data.Common.DbTransaction.Rollback"/>.
            </summary>
            <param name="transaction">The transaction on which the operation will be executed.</param>
            <param name="interceptionContext">Optional information about the context of the call being made.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionDispatcher.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbTransaction"/> that don't return any results.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.WithConnection(System.Data.Common.DbConnection)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="connection">The connection on which the transaction was started.</param>
            <returns>A new interception context that also contains the connection on which the transaction was started.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext.Connection">
            <summary>
            The connection on which the transaction was started
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1">
            <summary>
            Represents contextual information associated with calls to <see cref="T:System.Data.Common.DbTransaction"/> with return type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The return type of the target method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext">
            <summary>
            Represents contextual information associated with calls to <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/>
            implementations.
            </summary>
            <remarks>
            Instances of this class are publicly immutable for contextual information. To add
            contextual information use one of the With... or As... methods to create a new
            interception context containing the new information.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> with no state.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> by copying immutable state from the given
            interception context. Also see <see cref="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Clone"/>
            </summary>
            <param name="copyFrom">The context from which to copy state.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.AsAsync">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the <see cref="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"/> flag set to true.
            </summary>
            <returns>A new interception context associated with the async flag set.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.WithTransaction(System.Transactions.Transaction)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context together with the given <see cref="P:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Transaction"/>.
            </summary>
            <param name="transaction">The transaction to be used in the <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/> invocation.</param>
            <returns>A new interception context associated with the given isolation level.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Clone">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.WithDbContext(System.Data.Entity.DbContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext"/> that contains all the contextual information in this
            interception context with the addition of the given <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </summary>
            <param name="context">The context to associate.</param>
            <returns>A new interception context associated with the given context.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Transaction">
            <summary>
            The <see cref="P:System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext.Transaction"/> that will be used or has been used to enlist a connection.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor">
            <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/> to
            receive notifications when Entity Framework creates <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree"/> command trees.
            </summary>
            <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor.TreeCreated(System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext)">
            <summary>
            This method is called after a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree"/> has been created.
            The tree that is used after interception can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result"/> while intercepting.
            </summary>
            <remarks>
            Command trees are created for both queries and insert/update/delete commands. However, query
            command trees are cached by model which means that command tree creation only happens the
            first time a query is executed and this notification will only happen at that time
            </remarks>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
            <summary>
            Represents a mapping view.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView"/> instance having the specified entity SQL.
            </summary>
            <param name="entitySql">A string that specifies the entity SQL.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
            <summary>
            Gets the entity SQL.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
            <summary>
            Base abstract class for mapping view cache implementations.
            Derived classes must have a parameterless constructor if used with <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>
            Gets a view corresponding to the specified extent.
            </summary>
            <param name="extent">An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase"/> that specifies the extent.</param>
            <returns>A <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView"/> that specifies the mapping view, 
            or null if the extent is not associated with a mapping view.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
            <summary>
            Gets a hash value computed over the mapping closure.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
            <summary>
            Specifies the means to create concrete <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/> instances.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
            <summary>
            Creates a generated view cache instance for the container mapping specified by
            the names of the mapped containers.
            </summary>
            <param name="conceptualModelContainerName">The name of a container in the conceptual model.</param>
            <param name="storeModelContainerName">The name of a container in the store model.</param>
            <returns>
            A <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/> that specifies the generated view cache.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
            <summary>
            Defines a custom attribute that specifies the mapping view cache type (subclass of <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/>)
            associated with a context type (subclass of <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or <see cref="T:System.Data.Entity.DbContext"/>).
            The cache type is instantiated at runtime and used to retrieve pre-generated views in the
            corresponding context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute"/>  instance that associates a context type
            with a mapping view cache type.
            </summary>
            <param name="contextType">
            A subclass of <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="cacheType">
            A subclass of <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/>.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute"/> instance that associates a context type
            with a mapping view cache type.
            </summary>
            <param name="contextType">
            A subclass of <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="cacheTypeName">The assembly qualified full name of the cache type.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
            <summary>
            The base class for interceptors that handle the transaction operations. Derived classes can be registered using
            <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})"/> or
            <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler"/> class.
            </summary>
            <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Initializes this instance using the specified context.
            </summary>
            <param name="context">The context for which transaction operations will be handled.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
            <summary>
            Initializes this instance using the specified context.
            </summary>
            <param name="context">The context for which transaction operations will be handled.</param>
            <param name="connection">The connection to use for the initialization.</param>
            <remarks>
            This method is called by migrations. It is important that no action is performed on the
            specified context that causes it to be initialized.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this transaction handler.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
            <summary>
            Checks whether the supplied interception context contains the target context
            or the supplied connection is the same as the one used by the target context.
            </summary>
            <param name="connection">A connection.</param>
            <param name="interceptionContext">An interception context.</param>
            <returns>
            <c>true</c> if the supplied interception context contains the target context or
            the supplied connection is the same as the one used by the target context if
            the supplied interception context doesn't contain any contexts; <c>false</c> otherwise.
            </returns>
            <remarks>
            Note that calling this method will trigger initialization of any DbContext referenced from the <paramref name="interceptionContext"/>
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
            <summary>
            When implemented in a derived class returns the script to prepare the database
            for this transaction handler.
            </summary>
            <returns>A script to change the database schema for this transaction handler.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection beginning the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection being closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that was closed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection being opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection that was opened.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction being commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction being disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction being rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Can be implemented in a derived class.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
            <summary>
            Gets the context.
            </summary>
            <value>
            The <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext"/> for which the transaction operations will be handled.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
            <summary>
            Gets the context.
            </summary>
            <value>
            The <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext"/> for which the transaction operations will be handled, could be null.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The <see cref="T:System.Data.Common.DbConnection"/> for which the transaction operations will be handled.
            </value>
            <remarks>
            This connection object is only used to determine whether a particular operation needs to be handled
            in cases where a context is not available.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this transaction handler is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
            <summary>
            This class is used by <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> to write and read transaction tracing information
            from the database.
            To customize the definition of the transaction table you can derive from
            this class and override <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)"/>. Derived classes can be registered
            using <see cref="T:System.Data.Entity.DbConfiguration"/>.
            </summary>
            <remarks>
            By default EF will poll the resolved <see cref="T:System.Data.Entity.Infrastructure.TransactionContext"/> to check wether the database schema is compatible and
            will try to modify it accordingly if it's not. To disable this check call
            <code>Database.SetInitializer&lt;TTransactionContext&gt;(null)</code> where TTransactionContext is the type of the resolved context.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.DbContext">
            <summary>
            A DbContext instance represents a combination of the Unit Of Work and Repository patterns such that
            it can be used to query from a database and group together changes that will then be written
            back to the store as a unit.
            DbContext is conceptually similar to ObjectContext.
            </summary>
            <remarks>
            DbContext is usually used with a derived type that contains <see cref="T:System.Data.Entity.DbSet`1"/> properties for
            the root entities of the model. These sets are automatically initialized when the
            instance of the derived class is created.  This behavior can be modified by applying the
            <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute"/>  attribute to either the entire derived context
            class, or to individual properties on the class.
            The Entity Data Model backing the context can be specified in several ways.  When using the Code First
            approach, the <see cref="T:System.Data.Entity.DbSet`1"/> properties on the derived context are used to build a model
            by convention.  The protected OnModelCreating method can be overridden to tweak this model.  More
            control over the model used for the Model First approach can be obtained by creating a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>
            explicitly from a <see cref="T:System.Data.Entity.DbModelBuilder"/> and passing this model to one of the DbContext constructors.
            When using the Database First or Model First approach the Entity Data Model can be created using the
            Entity Designer (or manually through creation of an EDMX file) and then this model can be specified using
            entity connection string or an <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/> object.
            The connection to the database (including the name of the database) can be specified in several ways.
            If the parameterless DbContext constructor is called from a derived context, then the name of the derived context
            is used to find a connection string in the app.config or web.config file.  If no connection string is found, then
            the name is passed to the DefaultConnectionFactory registered on the <see cref="T:System.Data.Entity.Database"/> class.  The connection
            factory then uses the context name as the database name in a default connection string.  (This default connection
            string points to .\SQLEXPRESS on the local machine unless a different DefaultConnectionFactory is registered.)
            Instead of using the derived context name, the connection/database name can also be specified explicitly by
            passing the name to one of the DbContext constructors that takes a string.  The name can also be passed in
            the form "name=myname", in which case the name must be found in the config file or an exception will be thrown.
            Note that the connection found in the app.config or web.config file can be a normal database connection
            string (not a special Entity Framework connection string) in which case the DbContext will use Code First.
            However, if the connection found in the config file is a special Entity Framework connection string, then the
            DbContext will use Database/Model First and the model specified in the connection string will be used.
            An existing or explicitly created DbConnection can also be used instead of the database/connection name.
            A <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> can be applied to a class derived from DbContext to set the
            version of conventions used by the context when it creates a model. If no attribute is applied then the
            latest version of conventions will be used.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
            <summary>
            Interface implemented by objects that can provide an <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext"/> instance.
            The <see cref="T:System.Data.Entity.DbContext"/> class implements this interface to provide access to the underlying
            ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
            <summary>
            Gets the object context.
            </summary>
            <value> The object context. </value>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor">
            <summary>
            Constructs a new context instance using conventions to create the name of the database to
            which a connection will be made.  The by-convention name is the full name (namespace + class name)
            of the derived context class.
            See the class remarks for how this is used to create a connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
            Constructs a new context instance using conventions to create the name of the database to
            which a connection will be made, and initializes it from the given model.
            The by-convention name is the full name (namespace + class name) of the derived context class.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="model"> The model that will back this context. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
            <summary>
            Constructs a new context instance using the given string as the name or connection string for the
            database to which a connection will be made.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString"> Either the database name or a connection string. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
            Constructs a new context instance using the given string as the name or connection string for the
            database to which a connection will be made, and initializes it from the given model.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString"> Either the database name or a connection string. </param>
            <param name="model"> The model that will back this context. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect to a database.
            The connection will not be disposed when the context is disposed if <paramref name="contextOwnsConnection" />
            is <c>false</c>.
            </summary>
            <param name="existingConnection"> An existing connection to use for the new context. </param>
            <param name="contextOwnsConnection">
            If set to <c>true</c> the connection is disposed when the context is disposed, otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect to a database,
            and initializes it from the given model.
            The connection will not be disposed when the context is disposed if <paramref name="contextOwnsConnection" />
            is <c>false</c>.
            </summary>
            <param name="existingConnection"> An existing connection to use for the new context. </param>
            <param name="model"> The model that will back this context. </param>
            <param name="contextOwnsConnection">
                If set to <c>true</c> the connection is disposed when the context is disposed, otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
            <summary>
            Constructs a new context instance around an existing ObjectContext.
            </summary>
            <param name="objectContext"> An existing ObjectContext to wrap with the new context. </param>
            <param name="dbContextOwnsObjectContext">
                If set to <c>true</c> the ObjectContext is disposed when the DbContext is disposed, otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
            before the model has been locked down and used to initialize the context.  The default
            implementation of this method does nothing, but it can be overridden in a derived class
            such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
            is created.  The model for that context is then cached and is for all further instances of
            the context in the app domain.  This caching can be disabled by setting the ModelCaching
            property on the given ModelBuidler, but note that this can seriously degrade performance.
            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
            classes directly.
            </remarks>
            <param name="modelBuilder"> The builder that defines the model for the context being created. </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set``1">
            <summary>
            Returns a <see cref="T:System.Data.Entity.DbSet`1"/> instance for access to entities of the given type in the context
            and the underlying store.
            </summary>
            <remarks>
            Note that Entity Framework requires that this method return the same instance each time that it is called
            for a given context instance and entity type. Also, the non-generic <see cref="T:System.Data.Entity.DbSet"/> returned by the
            <see cref="M:System.Data.Entity.DbContext.Set(System.Type)"/> method must wrap the same underlying query and set of entities. These invariants must
            be maintained if this method is overridden for anything other than creating test doubles for unit testing.
            See the <see cref="T:System.Data.Entity.DbSet`1"/> class for more details.
            </remarks>
            <typeparam name="TEntity"> The type entity for which a set should be returned. </typeparam>
            <returns> A set for the given entity type. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
            <summary>
            Returns a non-generic <see cref="T:System.Data.Entity.DbSet"/> instance for access to entities of the given type in the context
            and the underlying store.
            </summary>
            <param name="entityType"> The type of entity for which a set should be returned. </param>
            <returns> A set for the given entity type. </returns>
            <remarks>
            Note that Entity Framework requires that this method return the same instance each time that it is called
            for a given context instance and entity type. Also, the generic <see cref="T:System.Data.Entity.DbSet`1"/> returned by the
            <see cref="M:System.Data.Entity.DbContext.Set(System.Type)"/> method must wrap the same underlying query and set of entities. These invariants must
            be maintained if this method is overridden for anything other than creating test doubles for unit testing.
            See the <see cref="T:System.Data.Entity.DbSet"/> class for more details.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.SaveChanges">
            <summary>
            Saves all changes made in this context to the underlying database.
            </summary>
            <returns> The number of objects written to the underlying database. </returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
            A database command did not affect the expected number of rows. This usually indicates an optimistic 
            concurrency violation; that is, a row has been changed in the database since it was queried.
            </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
            The save was aborted because validation of entity property values failed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            An attempt was made to use unsupported behavior such as executing multiple asynchronous commands concurrently
            on the same context instance.</exception>
            <exception cref="T:System.ObjectDisposedException">The context or connection have been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
            Some error occurred attempting to process entities in the context either before or after sending commands
            to the database.
            </exception>
        </member>
        <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
            <summary>
            Validates tracked entities and returns a Collection of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> containing validation results.
            </summary>
            <returns> Collection of validation results for invalid entities. The collection is never null and must not contain null values or results for valid entities. </returns>
            <remarks>
            1. This method calls DetectChanges() to determine states of the tracked entities unless
            DbContextConfiguration.AutoDetectChangesEnabled is set to false.
            2. By default only Added on Modified entities are validated. The user is able to change this behavior
            by overriding ShouldValidateEntity method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
            Extension point allowing the user to override the default behavior of validating only
            added and modified entities.
            </summary>
            <param name="entityEntry"> DbEntityEntry instance that is supposed to be validated. </param>
            <returns> true to proceed with validation; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Extension point allowing the user to customize validation of an entity or filter out validation results.
            Called by <see cref="M:System.Data.Entity.DbContext.GetValidationErrors"/>.
            </summary>
            <param name="entityEntry"> DbEntityEntry instance to be validated. </param>
            <param name="items">
            User-defined dictionary containing additional info for custom validation. It will be passed to
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
            and will be exposed as
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>
            . This parameter is optional and can be null.
            </param>
            <returns> Entity validation result. Possibly null when overridden. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> object for the given entity providing access to
            information about the entity and the ability to perform actions on the entity.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <param name="entity"> The entity. </param>
            <returns> An entry for the entity. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> object for the given entity providing access to
            information about the entity and the ability to perform actions on the entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> An entry for the entity. </returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose">
            <summary>
            Calls the protected Dispose method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
            <summary>
            Disposes the context. The underlying <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> is also disposed if it was created
            is by this context or ownership was passed to this context when this context was created.
            The connection to the database (<see cref="T:System.Data.Common.DbConnection"/> object) is also disposed if it was created
            is by this context or ownership was passed to this context when this context was created.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContext.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContext.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.DbContext.Database">
            <summary>
            Creates a Database instance for this context that allows for creation/deletion/existence checks
            for the underlying database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
            <summary>
            Returns the Entity Framework ObjectContext that is underlying this context.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.DbContext.ChangeTracker">
            <summary>
            Provides access to features of the context that deal with change tracking of entities.
            </summary>
            <value> An object used to access features that deal with change tracking. </value>
        </member>
        <member name="P:System.Data.Entity.DbContext.Configuration">
            <summary>
            Provides access to configuration options for the context.
            </summary>
            <value> An object used to access configuration options. </value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.TransactionContext"/> class.
            </summary>
            <param name="existingConnection">The connection used by the context for which the transactions will be recorded.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
            <summary>
            Gets or sets a <see cref="T:System.Data.Entity.DbSet`1"/> that can be used to read and write <see cref="T:System.Data.Entity.Infrastructure.TransactionRow"/> instances.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
            <summary>
            A transaction handler that allows to gracefully recover from connection failures
            during transaction commit by storing transaction tracing information in the database.
            It needs to be registered by using <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})"/>.
            </summary>
            <remarks>
            This transaction handler uses <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext"/> to store the transaction information
            the schema used can be configured by creating a class derived from <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext"/>
            that overrides DbContext.OnModelCreating(DbModelBuilder) and passing it to the constructor of this class.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> class using the default <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext"/>.
            </summary>
            <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> class.
            </summary>
            <param name="transactionContextFactory">The transaction context factory.</param>
            <remarks>
            One of the Initialize methods needs to be called before this instance can be used.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
            <summary>
            Stores the tracking information for the new transaction to the database in the same transaction.
            </summary>
            <param name="connection">The connection that began the transaction.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            If there was an exception thrown checks the database for this transaction and rethrows it if not found.
            Otherwise marks the commit as succeeded and queues the transaction information to be deleted.
            </summary>
            <param name="transaction">The transaction that was commited.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Stops tracking the transaction that was rolled back.
            </summary>
            <param name="transaction">The transaction that was rolled back.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
            <summary>
            Stops tracking the transaction that was disposed.
            </summary>
            <param name="transaction">The transaction that was disposed.</param>
            <param name="interceptionContext">Contextual information associated with the call.</param>
            <seealso cref="M:System.Data.Entity.Infrastructure.Interception.IDbTransactionInterceptor.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)"/>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
            <summary>
            Removes all the transaction history.
            </summary>
            <remarks>
            This method should only be invoked when there are no active transactions to remove any leftover history
            that was not deleted due to catastrophic failures
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
            <summary>
            Adds the specified transaction to the list of transactions that can be removed from the database
            </summary>
            <param name="transaction">The transaction to be removed from the database.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
            <summary>
            Removes the transactions marked for deletion.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
            <summary>
            Removes the transactions marked for deletion if their number exceeds <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit"/>.
            </summary>
            <param name="force">
            if set to <c>true</c> will remove all the old transactions even if their number does not exceed <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit"/>.
            </param>
            <param name="useExecutionStrategy">
            if set to <c>true</c> the operation will be executed using the associated execution strategy
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> associated with the <paramref name="context"/> if there is one;
            otherwise returns <c>null</c>.
            </summary>
            <param name="context">The context</param>
            <returns>The associated <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/>.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/> associated with the <paramref name="context"/> if there is one;
            otherwise returns <c>null</c>.
            </summary>
            <param name="context">The context</param>
            <returns>The associated <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler"/>.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
            <summary>
            Gets the transaction context.
            </summary>
            <value>
            The transaction context.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
            <summary>
            Gets the number of transactions to be executed on the context before the transaction log will be cleaned.
            The default value is 20.
            </summary>
        </member>
        <member name="T:System.Data.Entity.IDatabaseInitializer`1">
            <summary>
            An implementation of this interface is used to initialize the underlying database when
            an instance of a <see cref="T:System.Data.Entity.DbContext"/> derived class is used for the first time.
            This initialization can conditionally create the database and/or seed it with data.
            The strategy used is set using the static InitializationStrategy property of the
            <see cref="T:System.Data.Entity.Database"/> class.
            The following implementations are provided: <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1"/>,
            <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1"/>, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/>.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context"> The context. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
            <summary>
            Rrepresents a transaction
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
            <summary>
            A unique id assigned to a transaction object.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
            <summary>
            The local time when the transaction was started.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
             <summary>
             Helper class that is used to configure a parameter.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Binary data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="maxLength"> The maximum allowable length of the array data. </param>
             <param name="fixedLength"> Value indicating whether or not all data should be padded to the maximum length. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Boolean data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Byte data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass DateTime data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The precision of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Decimal data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The numeric precision of the parameter. </param>
             <param name="scale"> The numeric scale of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Double data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass GUID data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Single data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Short data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Integer data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Long data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass String data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="maxLength"> The maximum allowable length of the string data. </param>
             <param name="fixedLength"> Value indicating whether or not all data should be padded to the maximum length. </param>
             <param name="unicode"> Value indicating whether or not the parameter supports Unicode content. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass Time data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The precision of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass DateTimeOffset data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="precision"> The precision of the parameter. </param>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass geography data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Creates a new parameter definition to pass geometry data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="defaultValue"> Constant value to use as the default value for this parameter. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this parameter. </param>
             <param name="name"> The name of the parameter. </param>
             <param name="storeType"> Provider specific data type to use for this parameter. </param>
             <param name="outParameter">A value indicating whether the parameter is an output parameter.</param>
             <returns> The newly constructed parameter definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
             <summary>
             Represents altering an existing stored procedure.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
             <summary>
             A migration operation that affects stored procedures.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
             <summary>
             Represents an operation to modify a database schema.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the MigrationOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments">
             Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue"
             }'.
             </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
            <summary>
            Gets additional arguments that may be processed by providers.
            
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
            (such as the end user of an application). If input is accepted from such sources it should be validated 
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure.</param>
             <param name="bodySql">The body of the stored procedure expressed in SQL.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure.
            </summary>
            <value>
            The name of the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
            <summary>
            Gets the body of the stored procedure expressed in SQL.
            </summary>
            <value>
            The body of the stored procedure expressed in SQL.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
            <summary>
            Gets the parameters of the stored procedure.
            </summary>
            <value>
            The parameters of the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure.</param>
             <param name="bodySql">The body of the stored procedure expressed in SQL.</param>
             <param name="anonymousArguments">Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.</param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation. 
            Always returns a <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
            <summary>
            Represents changes made to custom annotations on a table.
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
            (such as the end user of an application). If input is accepted from such sources it should be validated
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
            <summary>
            Initializes a new instance of the AlterTableOperation class.
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
            (such as the end user of an application). If input is accepted from such sources it should be validated
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
            <param name="name"> Name of the table on which annotations have changed. </param>
            <param name="annotations">The custom annotations on the table that have changed.</param>
            <param name="anonymousArguments">
            Additional arguments that may be processed by providers. Use anonymous type syntax to
            specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
            <summary>
            Gets the name of the table on which annotations have changed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
            <summary>
            Gets the columns to be included in the table for which annotations have changed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
            <summary>
            Gets the custom annotations that have changed on the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
            <summary>
            Gets an operation that is the inverse of this one such that annotations will be changed back to how
            they were before this operation was applied.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
             <summary>
             Represents renaming an existing index.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the RenameIndexOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> Name of the table the index belongs to. </param>
             <param name="name"> Name of the index to be renamed. </param>
             <param name="newName"> New name for the index. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
            <summary>
            Gets the name of the table the index belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
            <summary>
            Gets the name of the index to be renamed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
            <summary>
            Gets the new name for the index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
            <summary>
            Gets an operation that reverts the rename.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
             <summary>
             Used when scripting an update database operation to store the operations that would have been performed against the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="historyQueryTrees">
             The queries used to determine if this migration needs to be applied to the database. 
             This is used to generate an idempotent SQL script that can be run against a database at any version.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
             <summary>
             Adds a migration to this update database operation.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="migrationId">The id of the migration.</param>
             <param name="operations">The individual operations applied by the migration.</param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
            <summary>
            The queries used to determine if this migration needs to be applied to the database. 
            This is used to generate an idempotent SQL script that can be run against a database at any version.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
            <summary>
            Gets the migrations applied during the update database operation.
            </summary>
            <value>
            The migrations applied during the update database operation.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if any of the operations may result in data loss.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
            <summary>
            Represents a migration to be applied to the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
            <summary>
            Gets the id of the migration.
            </summary>
            <value>
            The id of the migration.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
            <summary>
            Gets the individual operations applied by this migration.
            </summary>
            <value>
            The individual operations applied by this migration.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
             <summary>
             Represents moving a stored procedure to a new schema in the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure to move.</param>
             <param name="newSchema">The new schema for the stored procedure.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure to move.
            </summary>
            <value>
            The name of the stored procedure to move.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
            <summary>
            Gets the new schema for the stored procedure.
            </summary>
            <value>
            The new schema for the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
             <summary>
             Represents renaming a stored procedure in the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure to rename.</param>
             <param name="newName">The new name for the stored procedure.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure to rename.
            </summary>
            <value>
            The name of the stored procedure to rename.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
            <summary>
            Gets the new name for the stored procedure.
            </summary>
            <value>
            The new name for the stored procedure.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
            <summary>
            Represents a migration operation that can not be performed, possibly because it is not supported by the targeted database provider.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
             <summary>
             Represents information about a parameter.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
             <summary>
             Represents information about a property of an entity.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
             <summary>
             Initializes a new instance of the PropertyModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this property model. </param>
             <param name="typeUsage"> Additional details about the data type. This includes details such as maximum length, nullability etc. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
            <summary>
            Gets the data type for this property model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
            <summary>
            Gets additional details about the data type of this property model.
            This includes details such as maximum length, nullability etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
             <summary>
             Gets or sets the name of the property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
             <summary>
             Gets or sets a provider specific data type to use for this property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
            <summary>
            Gets or sets the maximum length for this property model.
            Only valid for array data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
            <summary>
            Gets or sets the precision for this property model.
            Only valid for decimal data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
            <summary>
            Gets or sets the scale for this property model.
            Only valid for decimal data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
             <summary>
             Gets or sets a constant value to use as the default value for this property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
             <summary>
             Gets or sets a SQL expression used as the default value for this property model.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
            <summary>
            Gets or sets a value indicating if this property model is fixed length.
            Only valid for array data types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
            <summary>
            Gets or sets a value indicating if this property model supports Unicode characters.
            Only valid for textual data types.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
             <summary>
             Initializes a new instance of the ParameterModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this parameter. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
             <summary>
             Initializes a new instance of the ParameterModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this parameter. </param>
             <param name="typeUsage"> Additional details about the data type. This includes details such as maximum length, nullability etc. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
            <summary>
            Gets or sets a value indicating whether this instance is out parameter.
            </summary>
            <value>
            <c>true</c> if this instance is out parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
             <summary>
             Drops a stored procedure from the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure to drop.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
            <summary>
            Gets the name of the stored procedure to drop.
            </summary>
            <value>
            The name of the stored procedure to drop.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
            <summary>
            Gets an operation that will revert this operation. 
            Always returns a <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
            <summary>
            Gets a value indicating if this operation may result in data loss. Always returns false.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
            <summary>
            Filters the entity types that this convention applies to based on a
            predicate.
            </summary>
            <param name="predicate"> A function to test each entity type for a condition. </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
            <summary>
            Filters the entity types that this convention applies to based on a predicate
            while capturing a value to use later during configuration.
            </summary>
            <typeparam name="T"> Type of the captured value. </typeparam>
            <param name="capturingPredicate">
            A function to capture a value for each entity type. If the value is null, the
            entity type will be filtered out.
            </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/>
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model that inherit from a common, specified type.
            </summary>
            <typeparam name="T"> The common type of the entity types that this convention applies to. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
            <summary>
            Filters the entity types that this convention applies to based on a
            predicate.
            </summary>
            <param name="predicate"> A function to test each entity type for a condition. </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
            <summary>
            Filters the entity types that this convention applies to based on a predicate
            while capturing a value to use later during configuration.
            </summary>
            <typeparam name="TValue"> Type of the captured value. </typeparam>
            <param name="capturingPredicate">
            A function to capture a value for each entity type. If the value is null, the
            entity type will be filtered out.
            </param>
            <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/>
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model that inherit from a common, specified type and a
            captured value.
            </summary>
            <typeparam name="T"> The common type of the entity types that this convention applies to. </typeparam>
            <typeparam name="TValue"> Type of the captured value. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/>
            using a captured value.
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model and a captured value.
            </summary>
            <typeparam name="T"> Type of the captured value. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
            <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
            <param name="entityConfigurationAction">
            An action that performs configuration against a <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/>
            using a captured value.
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
            <summary>
            Allows configuration to be performed for an entity type in a model.
            This configuration functionality is available via lightweight conventions.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
            <summary>
            Configures the entity set name to be used for this entity type.
            The entity set name can only be configured for the base type in each set.
            </summary>
            <param name="entitySetName"> The name of the entity set. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
            <summary>
            Excludes this entity type from the model so that it will not be mapped to the database.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
            <summary>
            Changes this entity type to a complex type.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <param name="propertyName"> The name of the property to be configured. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect if the property does not exist.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <param name="propertyInfo"> The property to be configured. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect if the property does not exist.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
            <summary>
            Configures a property that is defined on this type.
            </summary>
            <param name="propertyName"> The name of the property being configured. </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
            <summary>
            Configures a property that is defined on this type.
            </summary>
            <param name="propertyInfo"> The property being configured. </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
            <summary>
            Configures the primary key property for this entity type.
            </summary>
            <param name="propertyName"> The name of the property to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
            <summary>
            Configures the primary key property for this entity type.
            </summary>
            <param name="propertyInfo"> The property to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <param name="propertyNames"> The names of the properties to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <param name="keyProperties"> The properties to be used as the primary key. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured or if any
            property does not exist.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <param name="schemaName"> The database schema of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Calling this method will have no effect if the 
            annotation with the given name has already been configured.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            The default conventions for procedure and parameter names will be used.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            </summary>
            <param name="modificationStoredProceduresConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
            <summary>
            Gets the <see cref="T:System.Type"/> of this entity type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
            <summary>
            Allows configuration to be performed for an entity type in a model.
            This configuration functionality is available via lightweight conventions.
            </summary>
            <typeparam name="T"> A type inherited by the entity type. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
            <summary>
            Configures the entity set name to be used for this entity type.
            The entity set name can only be configured for the base type in each set.
            </summary>
            <param name="entitySetName"> The name of the entity set. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
            <summary>
            Excludes this entity type from the model so that it will not be mapped to the database.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
            <summary>
            Changes this entity type to a complex type.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <typeparam name="TProperty"> The type of the property to be ignored. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t =&gt; t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures a property that is defined on this type.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <typeparam name="TProperty"> The type of the key. </typeparam>
            <param name="keyExpression"> A lambda expression representing the property to be used as the primary key. C#: t =&gt; t.Id VB.Net: Function(t) t.Id If the primary key is made up of multiple properties then specify an anonymous type including the properties. C#: t =&gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <param name="schemaName"> The database schema of the table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Calling this method will have no effect if the 
            annotation with the given name has already been configured.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            The default conventions for procedure and parameter names will be used.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            </summary>
            <param name="modificationStoredProceduresConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
            <summary>
            Gets the <see cref="T:System.Type"/> of this entity type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
            <summary>
            Identifies conventions that can be added to or removed from a <see cref="T:System.Data.Entity.DbModelBuilder"/> instance.
            </summary>
            <remarks>
            Note that implementations of this interface must be immutable.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
            <summary>
            A general purpose class for Code First conventions that read attributes from .NET properties
            and generate column annotations based on those attributes.
            </summary>
            <typeparam name="TAttribute">The type of attribute to discover.</typeparam>
            <typeparam name="TAnnotation">The type of annotation that will be created.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
            <summary>
            A convention that doesn't override configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
            <summary>
            The derived class can use the default constructor to apply a set rule of that change the model configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
            <summary>
            Begins configuration of a lightweight convention that applies to all mapped types in
            the model.
            </summary>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
            <summary>
            Begins configuration of a lightweight convention that applies to all mapped types in
            the model that derive from or implement the specified type.
            </summary>
            <typeparam name="T"> The type of the entities that this convention will apply to. </typeparam>
            <returns> A configuration object for the convention. </returns>
            <remarks> This method does not add new types to the model.</remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
            <summary>
            Begins configuration of a lightweight convention that applies to all properties
            in the model.
            </summary>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
            <summary>
            Begins configuration of a lightweight convention that applies to all primitive
            properties of the specified type in the model.
            </summary>
            <typeparam name="T"> The type of the properties that the convention will apply to. </typeparam>
            <returns> A configuration object for the convention. </returns>
            <remarks>
            The convention will apply to both nullable and non-nullable properties of the
            specified type.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
            <summary>
            Constructs a convention that will create column annotations with the given name and
            using the given factory delegate.
            </summary>
            <param name="annotationName">The name of the annotations to create.</param>
            <param name="annotationFactory">A factory for creating the annotation on each column.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
            <summary>
            A general purpose class for Code First conventions that read attributes from .NET types
            and generate table annotations based on those attributes.
            </summary>
            <typeparam name="TAttribute">The type of attribute to discover.</typeparam>
            <typeparam name="TAnnotation">The type of annotation that will be created.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
            <summary>
            Constructs a convention that will create table annotations with the given name and
            using the given factory delegate.
            </summary>
            <param name="annotationName">The name of the annotations to create.</param>
            <param name="annotationFactory">A factory for creating the annotation on each table.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
            <summary>
            A convention for discovering <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute"/> attributes on properties and generating
            <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation"/> column annotations in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
            <summary>
            Constructs a new instance of the convention.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
            <summary>
            Base class for conventions that process CLR attributes found on primitive properties in the model.
            </summary>
            <typeparam name="TAttribute"> The type of the attribute to look for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
            <summary>
            Applies this convention to a property that has an attribute of type TAttribute applied.
            </summary>
            <param name="configuration">The configuration for the property that has the attribute.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
            <summary>
            Base class for conventions that process CLR attributes found on properties of types in the model.
            </summary>
            <remarks>
            Note that the derived convention will be applied for any non-static property on the mapped type that has
            the specified attribute, even if it wasn't included in the model.
            </remarks>
            <typeparam name="TAttribute"> The type of the attribute to look for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
            <summary>
            Applies this convention to a property that has an attribute of type TAttribute applied.
            </summary>
            <param name="memberInfo">The member info for the property that has the attribute.</param>
            <param name="configuration">The configuration for the class that contains the property.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
            <summary>
            Base class for conventions that process CLR attributes found in the model.
            </summary>
            <typeparam name="TAttribute"> The type of the attribute to look for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
            <summary>
            Applies this convention to a class that has an attribute of type TAttribute applied.
            </summary>
            <param name="configuration">The configuration for the class that contains the property.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
            <summary>
            Used to configure a property in a mapping fragment.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property, in a mapping fragment.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same PropertyMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same PropertyMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
            <summary>
                Convention to introduce indexes for foreign keys.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
            <summary>
            A convention that operates on the database section of the model after the model is created.
            </summary>
            <typeparam name="T">The type of metadata item that this convention operates on.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Applies this convention to an item in the model.
            </summary>
            <param name="item">The item to apply the convention to.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
            <summary>
            A convention that operates on the conceptual section of the model after the model is created.
            </summary>
            <typeparam name="T">The type of metadata item that this convention operates on.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Applies this convention to an item in the model.
            </summary>
            <param name="item">The item to apply the convention to.</param>
            <param name="model">The model.</param>
        </member>
        <member name="T:System.Data.Entity.QueryableExtensions">
            <summary>
            Useful extension methods for use with Entity Framework LINQ queries.
            </summary>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable`1"/> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable`1"/> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> and <see cref="T:System.Data.Entity.DbSet`1"/> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable`1"/>. Other instances of <see cref="T:System.Linq.IQueryable`1"/>
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable`1"/> to specify multiple paths for the query.
            </remarks>
            <typeparam name="T"> The type of entity being queried. </typeparam>
            <param name="source">
            The source <see cref="T:System.Linq.IQueryable`1"/> on which to call Include.
            </param>
            <param name="path"> The dot-separated list of related objects to return in the query results. </param>
            <returns>
            A new <see cref="T:System.Linq.IQueryable`1"/> with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable"/> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable"/> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery"/>, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> and <see cref="T:System.Data.Entity.DbSet"/> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable"/>. Other instances of <see cref="T:System.Linq.IQueryable"/>
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable"/> to specify multiple paths for the query.
            </remarks>
            <param name="source">
            The source <see cref="T:System.Linq.IQueryable"/> on which to call Include.
            </param>
            <param name="path"> The dot-separated list of related objects to return in the query results. </param>
            <returns>
            A new <see cref="T:System.Linq.IQueryable"/> with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            The path expression must be composed of simple property access expressions together with calls to Select for
            composing additional includes after including a collection proprty.  Examples of possible include paths are:
            To include a single reference: query.Include(e => e.Level1Reference)
            To include a single collection: query.Include(e => e.Level1Collection)
            To include a reference and then a reference one level down: query.Include(e => e.Level1Reference.Level2Reference)
            To include a reference and then a collection one level down: query.Include(e => e.Level1Reference.Level2Collection)
            To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))
            To include a collection and then a reference one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection))
            To include a collection, a reference, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Reference.Level3Reference))
            To include a collection, a collection, and a reference two levels down: query.Include(e => e.Level1Collection.Select(l1 => l1.Level2Collection.Select(l2 => l2.Level3Reference)))
            This extension method calls the Include(String) method of the source IQueryable object, if such a method exists.
            If the source IQueryable does not have a matching method, then this method does nothing.
            The Entity Framework ObjectQuery, ObjectSet, DbQuery, and DbSet types all have an appropriate Include method to call.
            When you call the Include method, the query path is only valid on the returned instance of the IQueryable&lt;T&gt;. Other
            instances of IQueryable&lt;T&gt; and the object context itself are not affected.  Because the Include method returns the
            query object, you can call this method multiple times on an IQueryable&lt;T&gt; to specify multiple paths for the query.
            </remarks>
            <typeparam name="T"> The type of entity being queried. </typeparam>
            <typeparam name="TProperty"> The type of navigation property being included. </typeparam>
            <param name="source"> The source IQueryable on which to call Include. </param>
            <param name="path"> A lambda expression representing the path to include. </param>
            <returns>
            A new IQueryable&lt;T&gt; with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
            <typeparam name="T"> The element type. </typeparam>
            <param name="source"> The source query. </param>
            <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
            <param name="source"> The source query. </param>
            <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable`1"/> to apply AsStreaming to.
            </param>
            <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
            <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
            <param name="source">
            An <see cref="T:System.Linq.IQueryable"/> to apply AsStreaming to.
            </param>
            <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
            <summary>
            Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1"/>,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext"/>
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
            <param name="source"> The source query. </param>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="countAccessor">An expression that evaluates to the number of elements to skip.</param>
            <returns>A sequence that contains elements that occur after the specified index in the 
            input sequence.</returns>
        </member>
        <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="countAccessor">An expression that evaluates to the number of elements 
            to return.</param>
            <returns>A sequence that contains the specified number of elements from the 
            start of the input sequence.</returns>
        </member>
        <member name="T:System.Data.Entity.TransactionalBehavior">
            <summary>
            Controls the transaction creation behavior while executing a database command or query.
            </summary>
        </member>
        <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
            <summary>
            If no transaction is present then a new transaction will be used for the operation.
            </summary>
        </member>
        <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
            <summary>
            If an existing transaction is present then use it, otherwise execute the command or query without a transaction.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
            <summary>
            Specifies a structural type mapping.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
            <summary>
            Adds a property mapping.
            </summary>
            <param name="propertyMapping">The property mapping to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
            <summary>
            Removes a property mapping.
            </summary>
            <param name="propertyMapping">The property mapping to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Adds a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Removes a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
            <summary>
            Gets a read-only collection of property mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
            <summary>
            Gets a read-only collection of property mapping conditions.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
            <summary>
            Represents the base item class for all the metadata
            </summary>
            <summary>
            Represents the base item class for all the metadata
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
            <summary>
            Adds or updates an annotation with the specified name and value.
            </summary>
            <remarks>
            If an annotation with the given name already exists then the value of that annotation
            is updated to the given value. If the given value is null then the annotation will be
            removed.
            </remarks>
            <param name="name">The name of the annotation property.</param>
            <param name="value">The value of the annotation property.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
            <summary>
            Removes an annotation with the specified name.
            </summary>
            <param name="name">The name of the annotation property.</param>
            <returns>true if an annotation was removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
            <summary>
            Returns a conceptual model built-in type that matches one of the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />
            values.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that represents the built-in type in the EDM.
            </returns>
            <param name="builtInTypeKind">
            One of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> values.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
            <summary>Returns the list of the general facet descriptions for a specified type.</summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> object that represents the list of the general facet descriptions for a specified type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
            <summary>Gets the built-in type kind for this type.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
            <summary>Gets the list of properties of the current type.</summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties of the current type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
            <summary>Gets or sets the documentation associated with this type.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> object that represents the documentation on this type.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
            <summary>
            Indicates that the given method is a proxy for an EDM function.
            </summary>
            <remarks>
            Note that this attribute has been replaced by the <see cref="T:System.Data.Entity.DbFunctionAttribute"/> starting with EF6.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.DbFunctionAttribute">
            <summary>
            Indicates that the given method is a proxy for an EDM function.
            </summary>
            <remarks>
            Note that this class was called EdmFunctionAttribute in some previous versions of Entity Framework.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.DbFunctionAttribute" /> class.
            </summary>
            <param name="namespaceName">The namespace of the mapped-to function.</param>
            <param name="functionName">The name of the mapped-to function.</param>
        </member>
        <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
            <summary>The namespace of the mapped-to function.</summary>
            <returns>The namespace of the mapped-to function.</returns>
        </member>
        <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
            <summary>The name of the mapped-to function.</summary>
            <returns>The name of the mapped-to function.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new DbFunctionAttribute instance.
            </summary>
            <param name="namespaceName"> The namespace name of the EDM function represented by the attributed method. </param>
            <param name="functionName"> The function name of the EDM function represented by the attributed method. </param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
            <summary>
            Provides common language runtime (CLR) methods that expose EDM canonical functions
            for use in <see cref="T:System.Data.Entity.DbContext"/> or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> LINQ to Entities queries.
            </summary>
            <remarks>
            Note that these functions have been moved to the <see cref="T:System.Data.Entity.DbFunctions"/> class starting with EF6.
            The functions are retained here only to help in the migration of older EF apps to EF6.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Left EDM function to return a given
            number of the leftmost characters in a string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="stringArgument"> The input string. </param>
            <param name="length"> The number of characters to return </param>
            <returns> A string containing the number of characters asked for from the left of the input string. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Right EDM function to return a given
            number of the rightmost characters in a string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="stringArgument"> The input string. </param>
            <param name="length"> The number of characters to return </param>
            <returns> A string containing the number of characters asked for from the right of the input string. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Reverse EDM function to return a given
            string with the order of the characters reversed.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="stringArgument"> The input string. </param>
            <returns> The input string with the order of the characters reversed. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical GetTotalOffsetMinutes EDM function to
            return the number of minutes that the given date/time is offset from UTC. This is generally between +780
            and -780 (+ or - 13 hrs).
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateTimeOffsetArgument"> The date/time value to use. </param>
            <returns> The offset of the input from UTC. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical TruncateTime EDM function to return
            the given date with the time portion cleared.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The date/time value to use. </param>
            <returns> The input date with the time portion cleared. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical TruncateTime EDM function to return
            the given date with the time portion cleared.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The date/time value to use. </param>
            <returns> The input date with the time portion cleared. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical CreateDateTime EDM function to
            create a new <see cref="T:System.DateTime"/> object.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="year"> The year. </param>
            <param name="month"> The month (1-based). </param>
            <param name="day"> The day (1-based). </param>
            <param name="hour"> The hours. </param>
            <param name="minute"> The minutes. </param>
            <param name="second"> The seconds, including fractional parts of the seconds if desired. </param>
            <returns> The new date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical CreateDateTimeOffset EDM function to
            create a new <see cref="T:System.DateTimeOffset"/> object.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="year"> The year. </param>
            <param name="month"> The month (1-based). </param>
            <param name="day"> The day (1-based). </param>
            <param name="hour"> The hours. </param>
            <param name="minute"> The minutes. </param>
            <param name="second"> The seconds, including fractional parts of the seconds if desired. </param>
            <param name="timeZoneOffset"> The time zone offset part of the new date. </param>
            <returns> The new date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical CreateTime EDM function to
            create a new <see cref="T:System.TimeSpan"/> object.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="hour"> The hours. </param>
            <param name="minute"> The minutes. </param>
            <param name="second"> The seconds, including fractional parts of the seconds if desired. </param>
            <returns> The new time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddYears EDM function to
            add the given number of years to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of years to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddYears EDM function to
            add the given number of years to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of years to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMonths EDM function to
            add the given number of months to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of months to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMonths EDM function to
            add the given number of months to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of months to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddDays EDM function to
            add the given number of days to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of days to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddDays EDM function to
            add the given number of days to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of days to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddHours EDM function to
            add the given number of hours to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of hours to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddHours EDM function to
            add the given number of hours to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of hours to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddHours EDM function to
            add the given number of hours to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of hours to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMinutes EDM function to
            add the given number of minutes to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of minutes to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMinutes EDM function to
            add the given number of minutes to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of minutes to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMinutes EDM function to
            add the given number of minutes to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of minutes to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddSeconds EDM function to
            add the given number of seconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of seconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddSeconds EDM function to
            add the given number of seconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of seconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddSeconds EDM function to
            add the given number of seconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of seconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMilliseconds EDM function to
            add the given number of milliseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of milliseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMilliseconds EDM function to
            add the given number of milliseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of milliseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMilliseconds EDM function to
            add the given number of milliseconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of milliseconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMicroseconds EDM function to
            add the given number of microseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of microseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMicroseconds EDM function to
            add the given number of microseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of microseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMicroseconds EDM function to
            add the given number of microseconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of microseconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddNanoseconds EDM function to
            add the given number of nanoseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of nanoseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddNanoseconds EDM function to
            add the given number of nanoseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of nanoseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddNanoseconds EDM function to
            add the given number of nanoseconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of nanoseconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffYears EDM function to
            calculate the number of years between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of years between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffYears EDM function to
            calculate the number of years between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of years between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMonths EDM function to
            calculate the number of months between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of months between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMonths EDM function to
            calculate the number of months between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of months between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffDays EDM function to
            calculate the number of days between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of days between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffDays EDM function to
            calculate the number of days between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of days between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffHours EDM function to
            calculate the number of hours between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of hours between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffHours EDM function to
            calculate the number of hours between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of hours between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffHours EDM function to
            calculate the number of hours between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of hours between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMinutes EDM function to
            calculate the number of minutes between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of minutes between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMinutes EDM function to
            calculate the number of minutes between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of minutes between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMinutes EDM function to
            calculate the number of minutes between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of minutes between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffSeconds EDM function to
            calculate the number of seconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of seconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffSeconds EDM function to
            calculate the number of seconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of seconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffSeconds EDM function to
            calculate the number of seconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of seconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMilliseconds EDM function to
            calculate the number of milliseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of milliseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMilliseconds EDM function to
            calculate the number of milliseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of milliseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMilliseconds EDM function to
            calculate the number of milliseconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of milliseconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMicroseconds EDM function to
            calculate the number of microseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of microseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMicroseconds EDM function to
            calculate the number of microseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of microseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMicroseconds EDM function to
            calculate the number of microseconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of microseconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffNanoseconds EDM function to
            calculate the number of nanoseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of nanoseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffNanoseconds EDM function to
            calculate the number of nanoseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of nanoseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffNanoseconds EDM function to
            calculate the number of nanoseconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of nanoseconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Truncate EDM function to
            truncate the given value to the number of specified digits.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="value"> The value to truncate. </param>
            <param name="digits"> The number of digits to preserve. </param>
            <returns> The truncated value. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Truncate EDM function to
            truncate the given value to the number of specified digits.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="value"> The value to truncate. </param>
            <param name="digits"> The number of digits to preserve. </param>
            <returns> The truncated value. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
            <summary>
            When used as part of a LINQ to Entities query, this method acts as an operator that ensures the input
            is treated as a Unicode string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function impacts the way the LINQ query is translated to a query that can be run in the database.
            </remarks>
            <param name="value"> The input string. </param>
            <returns> The input string treated as a Unicode string. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
            <summary>
            When used as part of a LINQ to Entities query, this method acts as an operator that ensures the input
            is treated as a non-Unicode string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function impacts the way the LINQ query is translated to a query that can be run in the database.
            </remarks>
            <param name="value"> The input string. </param>
            <returns> The input string treated as a non-Unicode string. </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
            <summary>
            Options for query execution.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions"/>.
            </summary>
            <param name="mergeOption"> Merge option to use for entity results. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions"/>.
            </summary>
            <param name="mergeOption"> Merge option to use for entity results. </param>
            <param name="streaming"> Whether the query is streaming or buffering. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the two objects are equal; otherwise, false.</returns>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
            <summary>
            Determines whether the specified objects are not equal.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the two objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
            <summary>
            Merge option to use for entity results.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
            <summary>
            Whether the query is streaming or buffering.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
            <summary>
            DataRecord interface supporting structured types and rich metadata information.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Data.Common.DbDataRecord" /> object with the specified index.
            </summary>
            <returns>
            A <see cref="T:System.Data.Common.DbDataRecord" /> object.
            </returns>
            <param name="i">The index of the row.</param>
        </member>
        <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
            <summary>
            Returns nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.
            </summary>
            <returns>
            Nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.
            </returns>
            <param name="i">The ordinal of the column.</param>
        </member>
        <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
            <summary>
            Gets <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> for this
            <see
                cref="T:System.Data.Entity.Core.IExtendedDataRecord" />
            .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> object.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
            <summary>
            DataRecordInfo class providing a simple way to access both the type information and the column information.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
            <summary>
            Initializes a new <see cref="T:System.Data.Common.DbDataRecord" /> object for a specific type with an enumerable collection of data fields.
            </summary>
            <param name="metadata">
            The metadata for the type represented by this object, supplied by
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            .
            </param>
            <param name="memberInfo">
            An enumerable collection of <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> objects that represent column information.
            </param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
            <summary>
            Gets <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> for this
            <see
                cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" />
            object.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> object.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
            <summary>
            Gets type info for this object as a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> value.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
            <summary>
            A prepared command definition, can be cached and reused to avoid
            repreparing a command.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> class using the supplied
            <see
                cref="T:System.Data.Common.DbCommand" />
            .
            </summary>
            <param name="prototype">
            The supplied <see cref="T:System.Data.Common.DbCommand" />.
            </param>
            <param name="cloneMethod"> method used to clone the <see cref="T:System.Data.Common.DbCommand" /> </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object that can be executed.
            </summary>
            <returns>The command for database.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
            <summary>
            Metadata Interface for all CLR types types
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
            <summary>
            Value to pass to GetInformation to get the StoreSchemaDefinition
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
            <summary>
            Value to pass to GetInformation to get the StoreSchemaMapping
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
            <summary>
            Value to pass to GetInformation to get the ConceptualSchemaDefinition
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
            <summary>
            Value to pass to GetInformation to get the StoreSchemaDefinitionVersion3
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
            <summary>
            Value to pass to GetInformation to get the StoreSchemaMappingVersion3
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
            <summary>
            Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion3
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
            <summary>
            Name of the MaxLength Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
            <summary>
            Name of the Unicode Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
            <summary>
            Name of the FixedLength Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
            <summary>
            Name of the Precision Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
            <summary>
            Name of the Scale Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
            <summary>
            Name of the Nullable Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
            <summary>
            Name of the DefaultValue Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
            <summary>
            Name of the Collation Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
            <summary>
            Name of the SRID Facet
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
            <summary>
            Name of the IsStrict Facet
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
            <summary>When overridden in a derived class, returns the set of primitive types supported by the data source.</summary>
            <returns>The set of types supported by the data source.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
            <summary>When overridden in a derived class, returns a collection of EDM functions supported by the provider manifest.</summary>
            <returns>A collection of EDM functions.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>Returns the FacetDescription objects for a particular type.</summary>
            <returns>The FacetDescription objects for the specified EDM type.</returns>
            <param name="edmType">The EDM type to return the facet description for.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>When overridden in a derived class, this method maps the specified storage type and a set of facets for that type to an EDM type.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> instance that describes an EDM type and a set of facets for that type.
            </returns>
            <param name="storeType">The TypeUsage instance that describes a storage type and a set of facets for that type to be mapped to the EDM type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>When overridden in a derived class, this method maps the specified EDM type and a set of facets for that type to a storage type.</summary>
            <returns>The TypeUsage instance that describes a storage type and a set of facets for that type.</returns>
            <param name="edmType">The TypeUsage instance that describes the EDM type and a set of facets for that type to be mapped to a storage type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
            <summary>When overridden in a derived class, this method returns provider-specific information.</summary>
            <returns>The XmlReader object that represents the mapping to the underlying data store catalog.</returns>
            <param name="informationType">The type of the information to return.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
            <summary>Gets the provider-specific information.</summary>
            <returns>The provider-specific information.</returns>
            <param name="informationType">The type of the information to return.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
            <summary>Indicates if the provider supports escaping strings to be used as patterns in a Like expression.</summary>
            <returns>True if this provider supports escaping strings to be used as patterns in a Like expression; otherwise, false.</returns>
            <param name="escapeCharacter">If the provider supports escaping, the character that would be used as the escape character.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
            <summary>Provider writers should override this method to return the argument with the wildcards and the escape character escaped. This method is only used if SupportsEscapingLikeArgument returns true.</summary>
            <returns>The argument with the wildcards and the escape character escaped.</returns>
            <param name="argument">The argument to be escaped.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
            <summary>
            Returns a boolean that specifies whether the provider can handle expression trees
            containing instances of DbInExpression.
            The default implementation returns <c>false</c> for backwards compatibility. Derived classes can override this method.
            </summary>
            <returns>
            <c>false</c>
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
            <summary>Gets the namespace used by this provider manifest.</summary>
            <returns>The namespace used by this provider manifest.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
            <summary>
            The factory for building command definitions; use the type of this object
            as the argument to the IServiceProvider.GetService method on the provider
            factory;
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
            <summary>
            Constructs an EF provider that will use the <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> obtained from
            the app domain <see cref="T:System.Data.Entity.DbConfiguration"/> Singleton for resolving EF dependencies such
            as the <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> instance to use.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
            <summary>
            Registers a handler to process non-error messages coming from the database provider.
            </summary>
            <param name="connection">The connection to receive information for.</param>
            <param name="handler">The handler to process messages.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
            <summary>
            Create a Command Definition object given a command tree.
            </summary>
            <param name="commandTree"> command tree for the statement </param>
            <returns> an executable command definition object </returns>
            <remarks>
            This method simply delegates to the provider's implementation of CreateDbCommandDefinition.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
            <summary>Creates command definition from specified manifest and command tree.</summary>
            <returns>The created command definition.</returns>
            <param name="providerManifest">The manifest.</param>
            <param name="commandTree">The command tree.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
            <summary>Creates a command definition object for the specified provider manifest and command tree.</summary>
            <returns>An executable command definition object.</returns>
            <param name="providerManifest">Provider manifest previously retrieved from the store provider.</param>
            <param name="commandTree">Command tree for the statement.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
            <summary>
            Create the default DbCommandDefinition object based on the prototype command
            This method is intended for provider writers to build a default command definition
            from a command.
            Note: This will clone the prototype
            </summary>
            <param name="prototype"> the prototype command </param>
            <returns> an executable command definition object </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
            <summary>
            See issue 2390 - cloning the DesignTimeVisible property on the
            DbCommand can cause deadlocks. So here allow sub-classes to override.
            </summary>
            <param name="fromDbCommand"> the <see cref="T:System.Data.Common.DbCommand" /> object to clone </param>
            <returns >a clone of the <see cref="T:System.Data.Common.DbCommand" /> </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
            <summary>Returns provider manifest token given a connection.</summary>
            <returns>The provider manifest token.</returns>
            <param name="connection">Connection to provider.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
            <summary>
            Returns provider manifest token for a given connection.
            </summary>
            <param name="connection"> Connection to find manifest token from. </param>
            <returns> The provider manifest token for the specified connection. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
            <summary>Returns the provider manifest by using the specified version information.</summary>
            <returns>The provider manifest by using the specified version information.</returns>
            <param name="manifestToken">The token information associated with the provider manifest.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
            <summary>When overridden in a derived class, returns an instance of a class that derives from the DbProviderManifest.</summary>
            <returns>A DbProviderManifest object that represents the provider manifest.</returns>
            <param name="manifestToken">The token information associated with the provider manifest.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> that will be used to execute methods that use the specified connection.
            </summary>
            <param name="connection">The database connection</param>
            <returns>
            A new instance of <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy"/>
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> that will be used to execute methods that use the specified connection.
            This overload should be used by the derived classes for compatability with wrapping providers.
            </summary>
            <param name="connection">The database connection</param>
            <param name="providerInvariantName">The provider invariant name</param>
            <returns>
            A new instance of <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy"/>
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the spatial data reader for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
            <returns>The spatial data reader.</returns>
            <param name="fromReader">The reader where the spatial data came from.</param>
            <param name="manifestToken">The manifest token associated with the provider manifest.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
            <summary>
            Gets the spatial services for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
            <returns>The spatial services.</returns>
            <param name="manifestToken">The token information associated with the provider manifest.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>Gets the spatial services for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
            <returns>The spatial services.</returns>
            <param name="key">Information about the database that the spatial services will be used for.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets the spatial data reader for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
            <returns>The spatial data reader.</returns>
            <param name="fromReader">The reader where the spatial data came from.</param>
            <param name="manifestToken">The token information associated with the provider manifest.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
            <summary>
            Gets the spatial services for the <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.
            </summary>
            <returns>The spatial services.</returns>
            <param name="manifestToken">The token information associated with the provider manifest.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
            <summary>
            Sets the parameter value and appropriate facets for the given <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/>.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterType">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
            <summary>
            Sets the parameter value and appropriate facets for the given <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/>.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterType">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
            <summary>Returns providers given a connection.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> instanced based on the specified connection.
            </returns>
            <param name="connection">Connection to provider.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
            <summary>Retrieves the DbProviderFactory based on the specified DbConnection.</summary>
            <returns>The retrieved DbProviderFactory.</returns>
            <param name="connection">The connection to use.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
            <summary>
            Return an XML reader which represents the CSDL description
            </summary>
            <param name="csdlName">The name of the CSDL description.</param>
            <returns> An XmlReader that represents the CSDL description </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>Generates a data definition language (DDL script that creates schema objects (tables, primary keys, foreign keys) based on the contents of the StoreItemCollection parameter and targeted for the version of the database corresponding to the provider manifest token.</summary>
            <remarks>
            Individual statements should be separated using database-specific DDL command separator.
            It is expected that the generated script would be executed in the context of existing database with
            sufficient permissions, and it should not include commands to create the database, but it may include
            commands to create schemas and other auxiliary objects such as sequences, etc.
            </remarks>
            <returns>A DDL script that creates schema objects based on the contents of the StoreItemCollection parameter and targeted for the version of the database corresponding to the provider manifest token.</returns>
            <param name="providerManifestToken">The provider manifest token identifying the target version.</param>
            <param name="storeItemCollection">The structure of the database.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>
            Generates a data definition language (DDL) script that creates schema objects 
            (tables, primary keys, foreign keys) based on the contents of the StoreItemCollection 
            parameter and targeted for the version of the database corresponding to the provider manifest token.
            </summary>
            <remarks>
            Individual statements should be separated using database-specific DDL command separator.
            It is expected that the generated script would be executed in the context of existing database with
            sufficient permissions, and it should not include commands to create the database, but it may include
            commands to create schemas and other auxiliary objects such as sequences, etc.
            </remarks>
            <param name="providerManifestToken"> The provider manifest token identifying the target version. </param>
            <param name="storeItemCollection"> The structure of the database. </param>
            <returns>
            A DDL script that creates schema objects based on the contents of the StoreItemCollection parameter 
            and targeted for the version of the database corresponding to the provider manifest token.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>
            Creates a database indicated by connection and creates schema objects
            (tables, primary keys, foreign keys) based on the contents of storeItemCollection.
            </summary>
            <param name="connection">Connection to a non-existent database that needs to be created and populated with the store objects indicated with the storeItemCollection parameter.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
            <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>Creates a database indicated by connection and creates schema objects (tables, primary keys, foreign keys) based on the contents of a StoreItemCollection.</summary>
            <param name="connection">Connection to a non-existent database that needs to be created and populated with the store objects indicated with the storeItemCollection parameter.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
            <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>Returns a value indicating whether a given database exists on the server.</summary>
            <returns>True if the provider can deduce the database only based on the connection.</returns>
            <param name="connection">Connection to a database whose existence is checked by this method.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
            <summary>Returns a value indicating whether a given database exists on the server.</summary>
            <returns>True if the provider can deduce the database only based on the connection.</returns>
            <param name="connection">Connection to a database whose existence is checked by this method.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>Returns a value indicating whether a given database exists on the server.</summary>
            <returns>True if the provider can deduce the database only based on the connection.</returns>
            <param name="connection">Connection to a database whose existence is checked by this method.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
            <summary>Returns a value indicating whether a given database exists on the server.</summary>
            <returns>True if the provider can deduce the database only based on the connection.</returns>
            <param name="connection">Connection to a database whose existence is checked by this method.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
            <remarks>Override this method to avoid creating the store item collection if it is not needed. The default implementation evaluates the Lazy and calls the other overload of this method.</remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>Deletes the specified database.</summary>
            <param name="connection">Connection to an existing database that needs to be deleted.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to delete the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for database deletion.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>Deletes the specified database.</summary>
            <param name="connection">Connection to an existing database that needs to be deleted.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to delete the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for database deletion.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
            <summary>
            Expands |DataDirectory| in the given path if it begins with |DataDirectory| and returns the expanded path,
            or returns the given string if it does not start with |DataDirectory|.
            </summary>
            <param name="path"> The path to expand. </param>
            <returns> The expanded path. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Adds an <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> that will be used to resolve additional default provider
            services when a derived type is registered as an EF provider either using an entry in the application's
            config file or through code-based registration in <see cref="T:System.Data.Entity.DbConfiguration"/>.
            </summary>
            <param name="resolver">The resolver to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
            <summary>
            Called to resolve additional default provider services when a derived type is registered as an
            EF provider either using an entry in the application's config file or through code-based
            registration in <see cref="T:System.Data.Entity.DbConfiguration"/>. The implementation of this method in this
            class uses the resolvers added with the AddDependencyResolver method to resolve
            dependencies.
            </summary>
            <remarks>
            Use this method to set, add, or change other provider-related services. Note that this method
            will only be called for such services if they are not already explicitly configured in some
            other way by the application. This allows providers to set default services while the
            application is still able to override and explicitly configure each service if required.
            See <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> and <see cref="T:System.Data.Entity.DbConfiguration"/> for more details.
            </remarks>
            <param name="type">The type of the service to be resolved.</param>
            <param name="key">An optional key providing additional information for resolving the service.</param>
            <returns>An instance of the given type, or null if the service could not be resolved.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
            <summary>
            Called to resolve additional default provider services when a derived type is registered as an
            EF provider either using an entry in the application's config file or through code-based
            registration in <see cref="T:System.Data.Entity.DbConfiguration"/>. The implementation of this method in this
            class uses the resolvers added with the AddDependencyResolver method to resolve
            dependencies.
            </summary>
            <param name="type">The type of the service to be resolved.</param>
            <param name="key">An optional key providing additional information for resolving the service.</param>
            <returns>All registered services that satisfy the given type and key, or an empty enumeration if there are none.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
            <summary>
            A specialization of the ProviderManifest that accepts an XmlReader
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" /> class.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader" /> object that provides access to the XML data in the provider manifest file.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for the specified EDM type.
            </returns>
            <param name="edmType">
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> for which the facet descriptions are to be retrieved.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
            <summary>Returns the list of primitive types supported by the storage provider.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types supported by the storage provider.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
            <summary>Returns the list of provider-supported functions.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of provider-supported functions.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
            <summary>Gets the namespace name supported by this provider manifest.</summary>
            <returns>The namespace name supported by this provider manifest.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
            <summary>Gets the best mapped equivalent Entity Data Model (EDM) type for a specified storage type name.</summary>
            <returns>The best mapped equivalent EDM type for a specified storage type name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
            <summary>Gets the best mapped equivalent storage primitive type for a specified storage type name.</summary>
            <returns>The best mapped equivalent storage primitive type for a specified storage type name.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
            <summary>
            Class for representing a collection of items.
            Most of the implementation for actual maintenance of the collection is
            done by MetadataCollection
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
            <summary>
            Class representing a read-only wrapper around MetadataCollection
            </summary>
            <typeparam name="T"> The type of items in this collection </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
            <summary>Retrieves an item from this collection by using the specified identity.</summary>
            <returns>An item from this collection.</returns>
            <param name="identity">The identity of the item to be searched for.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
            <summary>Determines whether the collection contains an item with the specified identity.</summary>
            <returns>true if the collection contains the item to be searched for; otherwise, false. The default is false.</returns>
            <param name="identity">The identity of the item.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
            <summary>Retrieves an item from this collection by using the specified identity.</summary>
            <returns>true if there is an item that matches the search criteria; otherwise, false. </returns>
            <param name="identity">The identity of the item to be searched for.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false. </param>
            <param name="item">When this method returns, this output parameter contains an item from the collection. If there is no matched item, this output parameter contains null.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
            <summary>Returns an enumerator that can iterate through this collection.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> that can be used to iterate through this
            <see
                cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
            <summary>Returns the index of the specified value in this collection.</summary>
            <returns>The index of the specified value in this collection.</returns>
            <param name="value">A value to seek.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
            <summary>Gets a value indicating whether this collection is read-only.</summary>
            <returns>true if this collection is read-only; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
            <summary>Gets an item from this collection by using the specified identity.</summary>
            <returns>An item from this collection.</returns>
            <param name="identity">The identity of the item to be searched for.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
            <summary>
            The enumerator for MetadataCollection
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
            <summary>Disposes of this enumerator.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
            <summary>
            Moves to the next member in the collection of type
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />
            .
            </summary>
            <returns>
            true if the enumerator is moved in the collection of type
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />
            ; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
            <summary>
            Positions the enumerator before the first position in the collection of type
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />
            .
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
            <summary>Gets the member at the current position. </summary>
            <returns>The member at the current position.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the member at the current position
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> object by using the specified identity.
            </summary>
            <returns>The item that is specified by the identity.</returns>
            <param name="identity">The identity of the item.</param>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> object by using the specified identity from this item collection.
            </summary>
            <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
            <param name="identity">The identity of the item.</param>
            <param name="item">
            When this method returns, the output parameter contains a
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />
            object. If there is no global item with the specified identity in the item collection, this output parameter contains null.
            </param>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> object by using the specified identity from this item collection.
            </summary>
            <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
            <param name="identity">The identity of the item.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="item">
            When this method returns, the output parameter contains a
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />
            object. If there is no global item with the specified identity in the item collection, this output parameter contains null.
            </param>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> object by using the specified identity with either case-sensitive or case-insensitive search.
            </summary>
            <returns>The item that is specified by the identity.</returns>
            <param name="identity">The identity of the item.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
            <summary>Returns all the items of the specified type from this item collection.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the items of the specified type.
            </returns>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name in this item collection.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that represents the type that matches the specified type name and the namespace name in this item collection. If there is no matched type, this method returns null.
            </returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name from this item collection.
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="type">
            When this method returns, this output parameter contains an
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            object. If there is no type with the specified name and namespace name in this item collection, this output parameter contains null.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name from this item collection.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that represents the type that matches the specified type name and the namespace name in this item collection. If there is no matched type, this method returns null.
            </returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object by using the specified type name and the namespace name from this item collection.
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false. </returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="type">
            When this method returns, this output parameter contains an
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            object. If there is no type with the specified name and namespace name in this item collection, this output parameter contains null.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
            <summary>Returns all the overloads of the functions by using the specified name from this item collection.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that have the specified name.
            </returns>
            <param name="functionName">The full name of the function.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
            <summary>Returns all the overloads of the functions by using the specified name from this item collection.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that have the specified name.
            </returns>
            <param name="functionName">The full name of the function.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
            <summary>Returns all the overloads of the functions by using the specified name from this item collection.</summary>
            <returns>A collection of type ReadOnlyCollection that contains all the functions that have the specified name.</returns>
            <param name="functionCollection">A dictionary of functions.</param>
            <param name="functionName">The full name of the function.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object by using the specified entity container name.
            </summary>
            <returns>If there is no entity container, this method returns null; otherwise, it returns the first one.</returns>
            <param name="name">The name of the entity container.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object by using the specified entity container name. If there is no entity container, the output parameter contains null; otherwise, it contains the first entity container.
            </summary>
            <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="entityContainer">
            When this method returns, it contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it contains the first entity container.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object by using the specified entity container name.
            </summary>
            <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object by using the specified entity container name. If there is no entity container, this output parameter contains null; otherwise, it contains the first entity container.
            </summary>
            <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="entityContainer">
            When this method returns, it contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it contains the first entity container.
            </param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
            <summary>Gets the data model associated with this item collection. </summary>
            <returns>The data model associated with this item collection. </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
            <summary>
            EntityRecordInfo class providing a simple way to access both the type information and the column information.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> class of a specific entity type with an enumerable collection of data fields and with specific key and entity set information.
            </summary>
            <param name="metadata">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> of the entity represented by the
            <see
                cref="T:System.Data.Common.DbDataRecord" />
            described by this
            <see
                cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" />
            object.
            </param>
            <param name="memberInfo">
            An enumerable collection of <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> objects that represent column information.
            </param>
            <param name="entityKey">The key for the entity.</param>
            <param name="entitySet">The entity set to which the entity belongs.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.EntityKey" /> for the entity.
            </summary>
            <returns>The key for the entity.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
            <summary>
            Public Entity SQL Parser class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
            <summary>Parse the specified query with the specified parameters.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> containing
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
            and information describing inline function definitions if any.
            </returns>
            <param name="query">The EntitySQL query to be parsed.</param>
            <param name="parameters">The optional query parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
            <summary>
            Parse a specific query with a specific set variables and produce a
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />
            .
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> containing
            <see
                cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />
            and information describing inline function definitions if any.
            </returns>
            <param name="query">The query to be parsed.</param>
            <param name="variables">The optional query variables.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
            <summary>
            Entity SQL query inline function definition, returned as a part of <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
            <summary> Function name. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
            <summary> Function body and parameters. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
            <summary> Start position of the function definition in the eSQL query text. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
            <summary> End position of the function definition in the eSQL query text. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
            <summary>
            Entity SQL Parser result information.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
            <summary> A command tree produced during parsing. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
            <summary>
            List of <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> objects describing query inline function definitions.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
            <summary>
            Compares objects using reference equality.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
            <summary>
            Gets the default instance.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute">
            <summary>
            Specifies the maximum length of array/string data allowed in a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"/> class.
            </summary>
            <param name="length"> The maximum allowable length of array/string data. Value must be greater than zero. </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"/> class.
            The maximum allowable length supported by the database will be used.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.IsValid(System.Object)">
            <summary>
            Determines whether a specified object is valid. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>)
            </summary>
            <remarks>
            This method returns <c>true</c> if the <paramref name="value"/> is null.  
            It is assumed the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is used if the value may not be null.
            </remarks>
            <param name="value"> The object to validate. </param>
            <returns> <c>true</c> if the value is null or less than or equal to the specified maximum length, otherwise <c>false</c> </returns>
            <exception cref="T:System.InvalidOperationException">Length is zero or less than negative one.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to a specified error message. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>)
            </summary>
            <param name="name"> The name to include in the formatted string. </param>
            <returns> A localized string to describe the maximum acceptable length. </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.EnsureLegalLengths">
            <summary>
            Checks that Length has a legal value.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MaxLengthAttribute.Length">
            <summary>
            Gets the maximum allowable length of the array/string data.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MinLengthAttribute">
            <summary>
            Specifies the minimum length of array/string data allowed in a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MinLengthAttribute"/> class.
            </summary>
            <param name="length"> The minimum allowable length of array/string data. Value must be greater than or equal to zero. </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.IsValid(System.Object)">
            <summary>
            Determines whether a specified object is valid. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>)
            </summary>
            <remarks>
            This method returns <c>true</c> if the <paramref name="value"/> is null.  
            It is assumed the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is used if the value may not be null.
            </remarks>
            <param name="value"> The object to validate. </param>
            <returns> <c>true</c> if the value is null or greater than or equal to the specified minimum length, otherwise <c>false</c> </returns>
            <exception cref="T:System.InvalidOperationException">Length is less than zero.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to a specified error message. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>)
            </summary>
            <param name="name"> The name to include in the formatted string. </param>
            <returns> A localized string to describe the minimum acceptable length. </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.EnsureLegalLengths">
            <summary>
            Checks that Length has a legal value.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MinLengthAttribute.Length">
            <summary>
            Gets the minimum allowable length of the array/string data.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute">
            <summary>
            Specifies the database column that a property is mapped to.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> class.
            </summary>
            <param name="name"> The name of the column the property is mapped to. </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Name">
            <summary>
            The name of the column the property is mapped to.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Order">
            <summary>
            The zero-based order of the column the property is mapped to.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.TypeName">
            <summary>
            The database provider specific data type of the column the property is mapped to.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute">
            <summary>
            Denotes that the class is a complex type.
            Complex types are non-scalar properties of entity types that enable scalar properties to be organized within entities. 
            Complex types do not have keys and cannot be managed by the Entity Framework apart from the parent object.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute">
            <summary>
            Specifies how the database generates values for a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.#ctor(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute"/> class.
            </summary>
            <param name="databaseGeneratedOption"> The pattern used to generate values for the property in the database. </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.DatabaseGeneratedOption">
            <summary>
            The pattern used to generate values for the property in the database.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption">
            <summary>
            The pattern used to generate values for a property in the database.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None">
            <summary>
            The database does not generate values.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity">
            <summary>
            The database generates a value when a row is inserted.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed">
            <summary>
            The database generates a value when a row is inserted or updated.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute">
            <summary>
            Denotes a property used as a foreign key in a relationship.
            The annotation may be placed on the foreign key property and specify the associated navigation property name, 
            or placed on a navigation property and specify the associated foreign key name.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/> class.
            </summary>
            <param name="name"> If placed on a foreign key property, the name of the associated navigation property. If placed on a navigation property, the name of the associated foreign key(s). If a navigation property has multiple foreign keys, a comma separated list should be supplied. </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.Name">
            <summary>
            If placed on a foreign key property, the name of the associated navigation property.
            If placed on a navigation property, the name of the associated foreign key(s).
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute">
            <summary>
            Specifies the inverse of a navigation property that represents the other end of the same relationship.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute"/> class.
            </summary>
            <param name="property"> The navigation property representing the other end of the same relationship. </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.Property">
            <summary>
            The navigation property representing the other end of the same relationship.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute">
            <summary>
            Denotes that a property or class should be excluded from database mapping.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute">
            <summary>
            Specifies the database table that a class is mapped to.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/> class.
            </summary>
            <param name="name"> The name of the table the class is mapped to. </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Name">
            <summary>
            The name of the table the class is mapped to.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Schema">
            <summary>
            The schema of the table the class is mapped to.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbContextTransaction">
            <summary>
            Wraps access to the transaction object on the underlying store connection and ensures that the
            Entity Framework executes commands on the database within the context of that transaction.
            An instance of this class is retrieved by calling BeginTransaction() on the <see cref="T:System.Data.Entity.DbContext"/>
            <see cref="T:System.Data.Entity.Database"/>
            object.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.Commit">
            <summary>
            Commits the underlying store transaction
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
            <summary>
            Rolls back the underlying store transaction
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
            <summary>
            Cleans up this transaction object and ensures the Entity Framework
            is no longer using that transaction.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this transaction object
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbContextTransaction.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
            <summary>
            Gets the database (store) transaction that is underlying this context transaction.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
            <summary>
            A service for obtaining the correct <see cref="T:System.Data.Common.DbProviderFactory"/> from a given
            <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <remarks>
            On .NET 4.5 the provider is publicly accessible from the connection. On .NET 4 the
            default implementation of this service uses some heuristics to find the matching
            provider. If these fail then a new implementation of this service can be registered
            on <see cref="T:System.Data.Entity.DbConfiguration"/> to provide an appropriate resolution.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
            <summary>
            Returns the <see cref="T:System.Data.Common.DbProviderFactory"/> for the given connection.
            </summary>
            <param name="connection"> The connection. </param>
            <returns> The provider factory for the connection. </returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
            <summary>
            Explicitly implemented by <see cref="T:System.Data.Entity.Migrations.DbMigration"/> to prevent certain members from showing up
            in the IntelliSense of scaffolded migrations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
            <summary>
            Adds a custom <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation"/> to the migration.
            Custom operation implementors are encouraged to create extension methods on
            <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration"/> that provide a fluent-style API for adding new operations.
            </summary>
            <param name="migrationOperation"> The operation to add. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
            <summary>
            A default implementation of <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver"/> that uses the
            underlying provider to get the manifest token.
            Note that to avoid multiple queries, this implementation using caching based on the actual type of
            <see cref="T:System.Data.Common.DbConnection"/> instance, the <see cref="P:System.Data.Common.DbConnection.DataSource"/> property,
            and the <see cref="P:System.Data.Common.DbConnection.Database"/> property.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
            <summary>
            A service for getting a provider manifest token given a connection.
            The <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver"/> class is used by default and makes use of the
            underlying provider to get the token which often involves opening the connection.
            A different implementation can be used instead by adding an <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/>
            to <see cref="T:System.Data.Entity.DbConfiguration"/> that may use any information in the connection to return
            the token. For example, if the connection is known to point to a SQL Server 2008 database then
            "2008" can be returned without opening the connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
            <summary>
            Returns the manifest token to use for the given connection.
            </summary>
            <param name="connection"> The connection for which a manifest token is required. </param>
            <returns> The manifest token to use. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
            <summary>
            A strategy that is used to execute a command or query against the database, possibly with logic to retry when a failure occurs.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
            <summary>
            Executes the specified operation.
            </summary>
            <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified operation and returns the result.
            </summary>
            <typeparam name="TResult">
            The return type of <paramref name="operation" />.
            </typeparam>
            <param name="operation">
            A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <returns>The result from the operation.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
            <summary>
            Indicates whether this <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> might retry the execution after a failure.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
            <summary>
            Provides the base implementation of the retry mechanism for unreliable operations and transient conditions that uses
            exponentially increasing delays between retries.
            </summary>
            <remarks>
            A new instance will be created each time an operation is executed.
            The following formula is used to calculate the delay after <c>retryCount</c> number of attempts:
            <code>min(random(1, 1.1) * (2 ^ retryCount - 1), maxDelay)</code>
            The <c>retryCount</c> starts at 0.
            The random factor distributes uniformly the retry attempts from multiple simultaneous operations failing simultaneously.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy"/>.
            </summary>
            <remarks>
            The default retry limit is 5, which means that the total amount of time spent between retries is 26 seconds plus the random factor.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy"/> with the specified limits for number of retries and the delay between retries.
            </summary>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxDelay"> The maximum delay in milliseconds between retries. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
            <summary>
            Repetitively executes the specified operation while it satisfies the current retry policy.
            </summary>
            <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
            <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">if the retry delay strategy determines the operation shouldn't be retried anymore</exception>
            <exception cref="T:System.InvalidOperationException">if an existing transaction is detected and the execution strategy doesn't support it</exception>
            <exception cref="T:System.InvalidOperationException">if this instance was already used to execute an operation</exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
            <summary>
            Repetitively executes the specified operation while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable operation.</typeparam>
            <param name="operation">
            A delegate representing an executable operation that returns the result of type <typeparamref name="TResult"/>.
            </param>
            <returns>The result from the operation.</returns>
            <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">if the retry delay strategy determines the operation shouldn't be retried anymore</exception>
            <exception cref="T:System.InvalidOperationException">if an existing transaction is detected and the execution strategy doesn't support it</exception>
            <exception cref="T:System.InvalidOperationException">if this instance was already used to execute an operation</exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
            <summary>
            Determines whether the operation should be retried and the delay before the next attempt.
            </summary>
            <param name="lastException">The exception thrown during the last execution attempt.</param>
            <returns>
            Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried;
            <c>null</c> otherwise
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
            <summary>
            Recursively gets InnerException from <paramref name="exception"/> as long as it's an
            <see cref="T:System.Data.Entity.Core.EntityException"/>, <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> or <see cref="T:System.Data.Entity.Core.UpdateException"/>
            and passes it to <paramref name="exceptionHandler"/>
            </summary>
            <typeparam name="T">The type of the unwrapped exception.</typeparam>
            <param name="exception"> The exception to be unwrapped. </param>
            <param name="exceptionHandler"> A delegate that will be called with the unwrapped exception. </param>
            <returns>
            The result from <paramref name="exceptionHandler"/>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="exception">The exception object to be verified.</param>
            <returns>
            <c>true</c> if the specified exception is considered as transient, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
            <summary>
            Returns <c>true</c> to indicate that <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy"/> might retry the execution after a failure.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
            <summary>
            A key used for resolving <see cref="T:System.Func`1"/>. It consists of the ADO.NET provider invariant name
            and the database server name as specified in the connection string.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey"/>
            </summary>
            <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </param>
            <param name="serverName"> A string that will be matched against the server name in the connection string. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
            <summary>
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
            <summary>
            A string that will be matched against the server name in the connection string.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
            <summary>
            Implement this interface on your context to use custom logic to calculate the key used to lookup an already created model in the cache.
            This interface allows you to have a single context type that can be used with different models in the same AppDomain, 
            or multiple context types that use the same model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
            <summary>Gets the cached key associated with the provider.</summary>
            <returns>The cached key associated with the provider.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
            <summary>
            Used by <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> and <see cref="T:System.Data.Entity.DbConfiguration"/> when resolving
            a provider invariant name from a <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
            <summary>Gets the name of the provider.</summary>
            <returns>The name of the provider.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
            <summary>
            Represents a custom pluralization term to be used by the <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
            <summary>
            Create a new instance
            </summary>
            <param name="singular">A non null or empty string representing the singular.</param>
            <param name="plural">A non null or empty string representing the plural.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
            <summary>
            Get the singular.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
            <summary>
            Get the plural.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
            <summary>
            Default pluralization service implementation to be used by Entity Framework. This pluralization
            service is based on English locale.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
            <summary>
            Pluralization services to be used by the EF runtime implement this interface.
            By default the <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService"/> is used, but the pluralization service to use
            can be set in a class derived from <see cref="T:System.Data.Entity.DbConfiguration"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
            <summary>
            Pluralize a word using the service.
            </summary>
            <param name="word">The word to pluralize.</param>
            <returns>The pluralized word </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
            <summary>
            Singularize a word using the service.
            </summary>
            <param name="word">The word to singularize.</param>
            <returns>The singularized word.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
            <summary>
            Constructs a new  instance  of default pluralization service
            used in Entity Framework.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
            <summary>
            Constructs a new  instance  of default pluralization service
            used in Entity Framework.
            </summary>
            <param name="userDictionaryEntries">
                A collection of user dictionary entries to be used by this service.These inputs
                can  customize the service according the user needs.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
            <summary>Returns the plural form of the specified word.</summary>
            <returns>The plural form of the input parameter.</returns>
            <param name="word">The word to be made plural.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
            <summary>Returns the singular form of the specified word.</summary>
            <returns>The singular form of the input parameter.</returns>
            <param name="word">The word to be made singular.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
            <summary>
            The exception that is thrown when the action failed again after being retried the configured number of times.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.EntityException">
            <summary>
            Provider exception - Used by the entity client.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityException" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException"/> class with no error message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> that doesn't retry operations if they fail.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
            <summary>
            Executes the specified operation once.
            </summary>
            <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified operation once and returns the result.
            </summary>
            <typeparam name="TResult">
            The return type of <paramref name="operation" />.
            </typeparam>
            <param name="operation">
            A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <returns>The result from the operation.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
            <summary>
            Returns <c>false</c> to indicate that <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy"/> will not retry the execution after a failure.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
            <summary>
            Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext"/>
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet"/> instance for the
            entity type. The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using foreach.
            SQL queries for non-entities are created using <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])"/>.
            See <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> for a generic version of this class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
            <summary>
            Represents a SQL query for non-entities that is created from a <see cref="T:System.Data.Entity.DbContext"/>
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="P:System.Data.Entity.DbContext.Database"/> instance.
            The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using foreach.
            SQL queries for entities are created using <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])"/>.
            See <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1"/> for a generic version of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
            <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
            <returns> A new query with AsStreaming applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> which when enumerated will execute the SQL query against the database.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns> Never returns; always throws. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns>
            <c>false</c> .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
            <summary>
            Creates an instance of a <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> when called from the constructor of a derived
            type that will be used as a test double for <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])"/>. Methods and properties
            that will be used by the test double must be implemented by the test double except AsNoTracking
            and AsStreaming where the default implementation is a no-op.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
            <summary>
            Returns a new query where the results of the query will not be tracked by the associated
            <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
            <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
            <returns> A new query with AsStreaming applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
            <summary>
            Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext"/>
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet`1"/> instance for the
            entity type. The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using foreach.
            SQL queries for non-entities are created using <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])"/>.
            See <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> for a non-generic version of this class.
            </summary>
            <typeparam name="TEntity">The type of entities returned by the query.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
            <summary>
            Represents a SQL query for non-entities that is created from a <see cref="T:System.Data.Entity.DbContext"/>
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="P:System.Data.Entity.DbContext.Database"/> instance.
            The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using <c>foreach</c>.
            SQL queries for entities are created using <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])"/>.
            See <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery"/> for a non-generic version of this class.
            </summary>
            <typeparam name="TElement">The type of elements returned by the query.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
            <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
            <returns> A new query with AsStreaming applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> which when enumerated will execute the SQL query against the database.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> which when enumerated will execute the SQL query against the database.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns> Never returns; always throws. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns>
            <c>false</c> .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
            <summary>
            Creates an instance of a <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> when called from the constructor of a derived
            type that will be used as a test double for <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])"/>. Methods and properties
            that will be used by the test double must be implemented by the test double except AsNoTracking and
            AsStreaming where the default implementation is a no-op.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
            <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
            <returns> A new query with AsStreaming applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
            <summary>
            Represents a key value that uniquely identifies an Entity Framework model that has been loaded into memory.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
            <summary>Determines whether the current cached model key is equal to the specified cached model key.</summary>
            <returns>true if the current cached model key is equal to the specified cached model key; otherwise, false.</returns>
            <param name="other">The cached model key to compare to the current cached model key. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
            <summary>Returns the hash function for this cached model key.</summary>
            <returns>The hash function for this cached model key.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
            <summary>
            Thrown when an operation can't be performed because there are existing migrations that have not been applied to the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
            <summary>
            Represents errors that occur inside the Code First Migrations pipeline.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MigrationsException class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
            <summary>
            Initializes a new instance of the MigrationsPendingException class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MigrationsPendingException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MigrationsPendingException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
             <summary>
             A migration operation to add a new stored procedure to the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation"/> class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">The name of the stored procedure.</param>
             <param name="bodySql">The body of the stored procedure expressed in SQL.</param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
            <summary>
            Gets an operation to drop the stored procedure.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the properties in a model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Filters the properties that this convention applies to based on a predicate.
            </summary>
            <param name="predicate"> A function to test each property for a condition. </param>
            <returns>
            A <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
            <summary>
            Filters the properties that this convention applies to based on a predicate
            while capturing a value to use later during configuration.
            </summary>
            <typeparam name="T"> Type of the captured value. </typeparam>
            <param name="capturingPredicate">
            A function to capture a value for each property. If the value is null, the
            property will be filtered out.
            </param>
            <returns>
            A <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
            <summary>
            Allows configuration of the properties that this convention applies to.
            </summary>
            <param name="propertyConfigurationAction">
            An action that performs configuration against a
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/>
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
            <summary>
            Allows configuration to be performed for a lightweight convention based on
            the properties of entity types in a model and a captured value.
            </summary>
            <typeparam name="T">The type of the captured value.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
            <summary>
            Allows configuration of the properties that this convention applies to.
            </summary>
            <param name="propertyConfigurationAction">
            An action that performs configuration against a <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/>
            using a captured value.
            </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to modify a relationship.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the relationship is being configured from.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
            <summary>
            Creates a convention that configures stored procedures to be used to delete entities in the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
            <summary>
            Creates a convention that configures stored procedures to be used to modify entities in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
            <summary> Configures the name of the stored procedure. </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName"> The stored procedure name. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
            <summary>Configures the name of the stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName">The stored procedure name.</param>
            <param name="schemaName">The schema name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyName"> The name of the property to configure the parameter for. </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyInfo"> The property to configure the parameter for. </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
            <summary>Configures the output parameter that returns the rows affected by this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
            <summary>
            Creates a convention that configures stored procedures to be used to insert entities in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
            <summary> Configures the name of the stored procedure. </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName"> The stored procedure name. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
            <summary>Configures the name of the stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName">The stored procedure name.</param>
            <param name="schemaName">The schema name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyName"> The name of the property to configure the parameter for. </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyInfo"> The property to configure the parameter for. </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyName"> The name of the property to configure the result for. </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyInfo"> The property to configure the result for. </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
            <summary>
            Creates a convention that configures stored procedures to be used to modify entities in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
            <summary>Configures stored procedure used to insert entities.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
            <summary>Configures stored procedure used to update entities.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
            <summary>Configures stored procedure used to delete entities.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
            <summary>
            Creates a convention that configures stored procedures to be used to update entities in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
            <summary> Configures the name of the stored procedure. </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName"> The stored procedure name. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
            <summary>Configures the name of the stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName">The stored procedure name.</param>
            <param name="schemaName">The schema name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyName"> The name of the property to configure the parameter for. </param>
            <param name="parameterName"> The name of the parameter. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyInfo"> The property to configure the parameter for. </param>
            <param name="parameterName"> The name of the parameter. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyName"> The name of the property to configure the parameter for. </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyInfo"> The property to configure the parameter for. </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyName"> The name of the property to configure the result for. </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyInfo"> The property to configure the result for. </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
            <summary>Configures the output parameter that returns the rows affected by this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to modify a many to many relationship.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the relationship is being configured from.</typeparam>
            <typeparam name="TTargetEntityType">The type of the entity that the other end of the relationship targets.</typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
            <summary>
            Performs configuration of a stored procedure uses to modify an entity in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
            <summary>
            Sets the name of the stored procedure.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
            <summary>
            Sets the name of the stored procedure.
            </summary>
            <param name="procedureName">Name of the procedure.</param>
            <param name="schemaName">Name of the schema.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Configures the parameter for the left key value(s).
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>
            Configures the parameter for the left key value(s).
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>
            Configures the parameter for the left key value(s).
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>
            Configures the parameter for the left key value(s).
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
            <summary>
            Configures the parameter for the right key value(s).
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
            <summary>
            Configures the parameter for the right key value(s).
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
            <summary>
            Configures the parameter for the right key value(s).
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
            <summary>
            Configures the parameter for the right key value(s).
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
            <inheritdoc /> 
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to modify a many to many relationship.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the relationship is being configured from.</typeparam>
            <typeparam name="TTargetEntityType">The type of the entity that the other end of the relationship targets.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
            <summary>Configures stored procedure used to insert relationships.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
            <summary>Configures stored procedure used to delete relationships.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to delete entities.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the stored procedure can be used to delete.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
            <summary> Configures the name of the stored procedure. </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName"> The stored procedure name. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
            <summary>Configures the name of the stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName">The stored procedure name.</param>
            <param name="schemaName">The schema name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
            <summary>Configures the output parameter that returns the rows affected by this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
            <summary>Configures parameters for a relationship where the foreign key property is not included in the class.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="associationModificationStoredProcedureConfigurationAction">A lambda expression that performs the configuration.</param>
            <typeparam name="TPrincipalEntityType">The type of the principal entity in the relationship.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
            <summary>Configures parameters for a relationship where the foreign key property is not included in the class.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="associationModificationStoredProcedureConfigurationAction">A lambda expression that performs the configuration.</param>
            <typeparam name="TPrincipalEntityType">The type of the principal entity in the relationship.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to insert entities.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the stored procedure can be used to insert.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
            <summary> Configures the name of the stored procedure. </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName"> The stored procedure name. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
            <summary>Configures the name of the stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName">The stored procedure name.</param>
            <param name="schemaName">The schema name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
            <summary>Configures parameters for a relationship where the foreign key property is not included in the class.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="associationModificationStoredProcedureConfigurationAction">A lambda expression that performs the configuration.</param>
            <typeparam name="TPrincipalEntityType">The type of the principal entity in the relationship.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
            <summary>Configures parameters for a relationship where the foreign key property is not included in the class.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="associationModificationStoredProcedureConfigurationAction">A lambda expression that performs the configuration.</param>
            <typeparam name="TPrincipalEntityType">The type of the principal entity in the relationship.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to update entities.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the stored procedure can be used to update.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
            <summary> Configures the name of the stored procedure. </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName"> The stored procedure name. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
            <summary>Configures the name of the stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="procedureName">The stored procedure name.</param>
            <param name="schemaName">The schema name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
            <summary>Configures a parameter for this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the parameter for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="currentValueParameterName">The current value parameter name.</param>
            <param name="originalValueParameterName">The original value parameter name.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <typeparam name="TProperty">The type of the property to configure.</typeparam>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
            <summary>
            Configures a column of the result for this stored procedure to map to a property.
            This is used for database generated columns.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="propertyExpression"> A lambda expression representing the property to configure the result for. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="columnName">The name of the result column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
            <summary>Configures the output parameter that returns the rows affected by this stored procedure.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
            <summary>Configures parameters for a relationship where the foreign key property is not included in the class.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="associationModificationStoredProcedureConfigurationAction">A lambda expression that performs the configuration.</param>
            <typeparam name="TPrincipalEntityType">The type of the principal entity in the relationship.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
            <summary>Configures parameters for a relationship where the foreign key property is not included in the class.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <param name="associationModificationStoredProcedureConfigurationAction">A lambda expression that performs the configuration.</param>
            <typeparam name="TPrincipalEntityType">The type of the principal entity in the relationship.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
            <summary>
            Allows configuration to be performed for a stored procedure that is used to modify entities.
            </summary>
            <typeparam name="TEntityType">The type of the entity that the stored procedure can be used to modify.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
            <summary>Configures stored procedure used to insert entities.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
            <summary>Configures stored procedure used to update entities.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
            <summary>Configures stored procedure used to delete entities.</summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
            <param name="modificationStoredProcedureConfigurationAction">A lambda expression that performs configuration for the stored procedure.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
            <summary>
            Used to configure a primitive property of an entity type or complex type.
            This configuration functionality is available via lightweight conventions.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Calling this method will have no effect if the 
            annotation with the given name has already been configured.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
            <summary>
            Configures the name of the parameter used in stored procedures for this property.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
            <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column used to store the property.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
            <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
            <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
            <summary>
            Configures how values for the property are generated by the database.
            </summary>
            <param name="databaseGeneratedOption"> The pattern used to generate values for the property in the database. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
            <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
            <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
            <summary>
            Configures the property to support Unicode string content.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property is not a <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
            <summary>
            Configures whether or not the property supports Unicode string content.
            </summary>
            <param name="unicode"> Value indicating if the property supports Unicode string content or not. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property is not a <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
            <summary>
            Configures the property to be fixed length.
            Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
            <summary>
            Configures the property to be variable length.
            Properties are variable length by default.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
            <summary>
            Configures the property to have the specified maximum length.
            </summary>
            <param name="maxLength"> The maximum length for the property. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
            <summary>
            Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property does not have length facets.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
            <summary>
            Configures the precision of the <see cref="T:System.DateTime"/> property.
            If the database provider does not support precision for the data type of the column then the value is ignored.
            </summary>
            <param name="value"> Precision of the property. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method will throw if the property is not a <see cref="T:System.DateTime"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
            <summary>
            Configures the precision and scale of the <see cref="T:System.Decimal"/> property.
            </summary>
            <param name="precision"> The precision of the property. </param>
            <param name="scale"> The scale of the property. </param>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method will throw if the property is not a <see cref="T:System.Decimal"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
            <summary>
            Configures the property to be a row version in the database.
            The actual data type will vary depending on the database provider being used.
            Setting the property to be a row version will automatically configure it to be an
            optimistic concurrency token.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that multiple calls can be chained.
            </returns>
            <remarks>
            Calling this will have no effect once it has been configured.
            This method throws if the property is not a <see cref="T:Byte[]"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
            <summary>
            Configures this property to be part of the entity type's primary key.
            </summary>
            <returns>
            The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration"/> instance so that
            multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for this property.
            </summary>
        </member>
        <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> that does nothing. Using this
            initializer disables database initialization for the given context type. Passing an instance
            of this class to <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})"/> is equivalent to passing null.
            When <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/> is being used to resolve initializers an instance of
            this class must be used to disable initialization.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
            <summary>
            FieldMetadata class providing the correlation between the column ordinals and MemberMetadata.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
            <summary>
            Initializes a new <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> object with the specified ordinal value and field type.
            </summary>
            <param name="ordinal">An integer specified the location of the metadata.</param>
            <param name="fieldType">The field type.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
            <summary>
            Gets the type of field for this <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> object.
            </summary>
            <returns>
            The type of field for this <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> object.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
            <summary>
            Gets the ordinal for this <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> object.
            </summary>
            <returns>An integer representing the ordinal value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
            <summary>
            Class representing a parameter collection used in EntityCommand
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified object to the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.
            </summary>
            <returns>
            The index of the new <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </returns>
            <param name="value">
            An <see cref="T:System.Object" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of values to the end of the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <param name="values">
            The <see cref="T:System.Array" /> values to add.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
            <summary>
            Removes all the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> objects from the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is in this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> contains the value; otherwise false.
            </returns>
            <param name="value">
            The <see cref="T:System.Object" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> to the specified one-dimensional
            <see
                cref="T:System.Array" />
            starting at the specified destination <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </param>
            <param name="index">
            A 32-bit integer that represents the index in the <see cref="T:System.Array" /> at which copying starts.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetParameter(System.Int32)">
            <inhertidoc />
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetParameter(System.String)">
            <inhertidoc />
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> with the specified name.
            </summary>
            <returns>
            The zero-based location of the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> with the specified case-sensitive name. Returns -1 when the object does not exist in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </returns>
            <param name="parameterName">
            The case-sensitive name of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> to find.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of the specified <see cref="T:System.Object" /> in the collection.
            </summary>
            <returns>
            The zero-based location of the specified <see cref="T:System.Object" /> that is a
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />
            in the collection. Returns -1 when the object does not exist in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </returns>
            <param name="value">
            The <see cref="T:System.Object" /> to find.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an <see cref="T:System.Object" /> into the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">
            An <see cref="T:System.Object" /> to be inserted in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
            <summary>Removes the specified parameter from the collection.</summary>
            <param name="value">
            A <see cref="T:System.Object" /> object to remove from the collection.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> from the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object to remove.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> from the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            at the specified parameter name.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> to remove.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <inhertidoc />
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <inhertidoc />
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
            <summary>
            Adds the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object to the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </returns>
            <param name="value">
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> to add to the collection.
            </param>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> specified in the  value  parameter is already added to this or another
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </exception>
            <exception cref="T:System.InvalidCastException">
            The parameter passed was not a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">The  value  parameter is null. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a value to the end of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </returns>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
            <summary>
            Adds a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> to the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            given the parameter name and the data type.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </returns>
            <param name="parameterName">The name of the parameter. </param>
            <param name="dbType">
            One of the <see cref="T:System.Data.DbType" /> values.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> to the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            with the parameter name, the data type, and the column length.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </returns>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">
            One of the <see cref="T:System.Data.DbType" /> values.
            </param>
            <param name="size">The column length.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
            <summary>
            Adds an array of <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> values to the end of the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <param name="values">
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> values to add.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> is in this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> contains the value; otherwise false.
            </returns>
            <param name="parameterName">
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
            <summary>
            Copies all the elements of the current <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> to the specified
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            starting at the specified destination index.
            </summary>
            <param name="array">
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> that is the destination of the elements copied from the current
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </param>
            <param name="index">
            A 32-bit integer that represents the index in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            at which copying starts.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
            <summary>
            Gets the location of the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> in the collection.
            </summary>
            <returns>
            The zero-based location of the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> that is a
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />
            in the collection. Returns -1 when the object does not exist in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </returns>
            <param name="value">
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> to find.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
            <summary>
            Inserts a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object into the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">
            A <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object to be inserted in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
            <summary>
            Removes the specified <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> from the collection.
            </summary>
            <param name="value">
            A <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object to remove from the collection.
            </param>
            <exception cref="T:System.InvalidCastException">
            The parameter is not a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.
            </exception>
            <exception cref="T:System.SystemException">The parameter does not exist in the collection. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
            <summary>
            Gets an Integer that contains the number of elements in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <returns>
            The number of elements in the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> as an Integer.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
            <summary>
            Gets a value that indicates whether the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            has a fixed size.
            </summary>
            <returns>
            Returns true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> has a fixed size; otherwise false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            is read-only.
            </summary>
            <returns>
            Returns true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> is read only; otherwise false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            is synchronized.
            </summary>
            <returns>
            Returns true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> is synchronized; otherwise false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </summary>
            <returns>
            An object that can be used to synchronize access to the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> at the specified index.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> at the specified index.
            </returns>
            <param name="index">The zero-based index of the parameter to retrieve. </param>
            <exception cref="T:System.IndexOutOfRangeException">The specified index does not exist. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> with the specified name.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> with the specified name.
            </returns>
            <param name="parameterName">The name of the parameter to retrieve. </param>
            <exception cref="T:System.IndexOutOfRangeException">The specified name does not exist. </exception>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
            <summary>
            Class representing a command for the conceptual layer
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> class using the specified values.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> class with the specified statement.
            </summary>
            <param name="statement">The text of the command.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
            <summary>
            Constructs the EntityCommand object with the given eSQL statement and the connection object to use
            </summary>
            <param name="statement"> The eSQL command text to execute </param>
            <param name="connection"> The connection object </param>
            <param name="resolver"> Resolver used to resolve DbProviderServices </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> class with the specified statement and connection.
            </summary>
            <param name="statement">The text of the command.</param>
            <param name="connection">A connection to the data source.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> class with the specified statement, connection and transaction.
            </summary>
            <param name="statement">The text of the command.</param>
            <param name="connection">A connection to the data source.</param>
            <param name="transaction">The transaction in which the command executes.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
            <summary>
            Cancels the execution of an <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </summary>
            <returns>
            A new instance of an <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> object.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
            <summary>
            Create and return a new parameter object representing a parameter in the eSQL statement
            </summary>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
            <summary>Executes the command and returns a data reader.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> that contains the results.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Compiles the <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> into a command tree and passes it to the underlying store provider for execution, then builds an
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />
            out of the produced result set using the specified
            <see
                cref="T:System.Data.CommandBehavior" />
            .
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> that contains the results.
            </returns>
            <param name="behavior">
            One of the <see cref="T:System.Data.CommandBehavior" /> values.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Executes the command and returns a data reader for reading the results
            </summary>
            <param name="behavior"> The behavior to use when executing the command </param>
            <returns> A DbDataReader object </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
            <summary>Executes the current command.</summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
            <summary>Executes the command, and returns the first column of the first row in the result set. Additional columns or rows are ignored.</summary>
            <returns>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
            <summary>Compiles the entity-level command and creates a prepared version of the command.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
            <summary>Compiles the entity-level command and returns the store command text.</summary>
            <returns>The store command text.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> used by the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />
            .
            </summary>
            <returns>The connection used by the entity command.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
            <summary>
            The connection object used for executing the command
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
            <summary>Gets or sets an Entity SQL statement that specifies a command or stored procedure to execute.</summary>
            <returns>The Entity SQL statement that specifies a command or stored procedure to execute.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
            <summary>Gets or sets the command tree to execute; only one of the command tree or the command text can be set, not both.</summary>
            <returns>The command tree to execute.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
            <summary>Gets or sets the amount of time to wait before timing out.</summary>
            <returns>The time in seconds to wait for the command to execute.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
            <summary>
            Gets or sets a value that indicates how the
            <see
                cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" />
            property is to be interpreted.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.CommandType" /> enumeration values.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
            <summary>Gets the parameters of the Entity SQL statement or stored procedure.</summary>
            <returns>The parameters of the Entity SQL statement or stored procedure.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
            <summary>
            The collection of parameters for this command
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
            <summary>
            Gets or sets the transaction within which the <see cref="T:System.Data.SqlClient.SqlCommand" /> executes.
            </summary>
            <returns>
            The transaction within which the <see cref="T:System.Data.SqlClient.SqlCommand" /> executes.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
            <summary>
            The transaction that this command executes in
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
            <summary>Gets or sets how command results are applied to rows being updated.</summary>
            <returns>
            One of the <see cref="T:System.Data.UpdateRowSource" /> values.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
            <summary>Gets or sets a value that indicates whether the command object should be visible in a Windows Form Designer control.</summary>
            <returns>true if the command object should be visible in a Windows Form Designer control; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
            <summary>Gets or sets a value that indicates whether the query plan caching is enabled.</summary>
            <returns>true if the query plan caching is enabled; otherwise, false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
            <summary>
            Class representing a connection for the conceptual layer. An entity connection may only
            be initialized once (by opening the connection). It is subsequently not possible to change
            the connection string, attach a new store connection, or change the store connection string.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> class, based on the connection string.
            </summary>
            <param name="connectionString">The provider-specific connection string.</param>
            <exception cref="T:System.ArgumentException">An invalid connection string keyword has been provided, or a required connection string keyword has not been provided.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> class with a specified
            <see  cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> and 
            <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
            <param name="workspace">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> to be associated with this
            <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.
            </param>
            <param name="connection">
            The underlying data source connection for this <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> object.
            </param>
            <exception cref="T:System.ArgumentNullException">The  workspace  or  connection  parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The conceptual model is missing from the workspace.-or-The mapping file is missing from the workspace.-or-The storage model is missing from the workspace.-or-The  connection  is not in a closed state.</exception>
            <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">The  connection  is not from an ADO.NET Entity Framework-compatible provider.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Constructs the EntityConnection from Metadata loaded in memory
            </summary>
            <param name="workspace"> Workspace containing metadata information. </param>
            <param name="connection"> Store connection. </param>
            <param name="entityConnectionOwnsStoreConnection"> If set to true the store connection is disposed when the entity connection is disposed, otherwise the caller must dispose the store connection. </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
            <summary>
            Returns the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associated with this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            .
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associated with this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            .
            </returns>
            <exception cref="T:System.Data.Entity.Core.MetadataException">The inline connection string contains an invalid Metadata keyword value.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
            <summary>Establishes a connection to the data source by calling the underlying data provider's Open method.</summary>
            <exception cref="T:System.InvalidOperationException">An error occurs when you open the connection, or the name of the underlying data provider is not known.</exception>
            <exception cref="T:System.Data.Entity.Core.MetadataException">The inline connection string contains an invalid Metadata keyword value.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />, with the
            <see
                cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" />
            set to this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> object.
            </returns>
            <exception cref="T:System.InvalidOperationException">The name of the underlying data provider is not known.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
            <summary>
            Create a new command object that uses this connection object
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
            <summary>Closes the connection to the database.</summary>
            <exception cref="T:System.InvalidOperationException">An error occurred when closing the connection.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
            <summary>Not supported.</summary>
            <param name="databaseName">Not supported. </param>
            <exception cref="T:System.NotSupportedException">When the method is called. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
            <summary>Begins a transaction by using the underlying provider. </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />. The returned
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />
            instance can later be associated with the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />
            to execute the command under that transaction.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The underlying provider is not known.-or-The call to
            <see
                cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" />
            was made on an
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            that already has a current transaction.-or-The state of the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            is not
            <see
                cref="F:System.Data.ConnectionState.Open" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>Begins a transaction with the specified isolation level by using the underlying provider. </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />. The returned
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />
            instance can later be associated with the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />
            to execute the command under that transaction.
            </returns>
            <param name="isolationLevel">The isolation level of the transaction.</param>
            <exception cref="T:System.InvalidOperationException">
            The underlying provider is not known.-or-The call to
            <see
                cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" />
            was made on an
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            that already has a current transaction.-or-The state of the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            is not
            <see
                cref="F:System.Data.ConnectionState.Open" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction
            </summary>
            <param name="isolationLevel"> The isolation level of the transaction </param>
            <returns> An object representing the new transaction </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlists this <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> in the specified transaction.
            </summary>
            <param name="transaction">The transaction object to enlist into.</param>
            <exception cref="T:System.InvalidOperationException">
            The state of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> is not
            <see
                cref="F:System.Data.ConnectionState.Open" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
            <summary>
            Cleans up this connection object
            </summary>
            <param name="disposing"> true to release both managed and unmanaged resources; false to release only unmanaged resources </param>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
            <summary>
            Gets or sets the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/> connection string.
            </summary>
            <returns>The connection string required to establish the initial connection to a data source. The default value is an empty string. On a closed connection, the currently set value is returned. If no value has been set, an empty string is returned.</returns>
            <exception cref="T:System.InvalidOperationException">
            An attempt was made to set the <see cref="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString"/> property after the
            <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/>
            ’s <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace"/> was initialized. The
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace"/>
            is initialized either when the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/> instance is constructed through the overload that takes a
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace"/>
            as a parameter, or when the
            <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection"/>
            instance has been opened.
            </exception>
            <exception cref="T:System.ArgumentException">An invalid connection string keyword has been provided or a required connection string keyword has not been provided.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
            <summary>Gets the number of seconds to wait when attempting to establish a connection before ending the attempt and generating an error.</summary>
            <returns>The time (in seconds) to wait for a connection to open. The default value is the underlying data provider's default time-out. </returns>
            <exception cref="T:System.ArgumentException">The value set is less than 0. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
            <summary>Gets the name of the current database, or the database that will be used after a connection is opened.</summary>
            <returns>The value of the Database property of the underlying data provider.</returns>
            <exception cref="T:System.InvalidOperationException">The underlying data provider is not known. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
            <summary>
            Gets the state of the EntityConnection, which is set up to track the state of the underlying
            database connection that is wrapped by this EntityConnection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
            <summary>Gets the name or network address of the data source to connect to.</summary>
            <returns>The name of the data source. The default value is an empty string.</returns>
            <exception cref="T:System.InvalidOperationException">The underlying data provider is not known. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
            <summary>Gets a string that contains the version of the data source to which the client is connected.</summary>
            <returns>The version of the data source that is contained in the provider connection string.</returns>
            <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
            <summary>
            Gets the provider factory associated with EntityConnection
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
            <summary>
            Provides access to the underlying data source connection that is used by the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            object.
            </summary>
            <returns>
            The <see cref="T:System.Data.Common.DbConnection" /> for the data source connection.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
            <summary>
            Gets the current transaction that this connection is enlisted in. May be null.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
            <summary>
            Class representing a connection string builder for the entity client provider
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> class using the supplied connection string.
            </summary>
            <param name="connectionString">A provider-specific connection string to the underlying data source.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> instance.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> contains a specific key.
            </summary>
            <returns>
            Returns true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="keyword">
            The key to locate in the <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding to the supplied key from this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            .
            </summary>
            <returns>Returns true if  keyword  was found in the connection string; otherwise, false.</returns>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to  keyword. </param>
            <exception cref="T:System.ArgumentNullException"> keyword  contains a null value (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            instance.
            </summary>
            <returns>Returns true if the key existed in the connection string and was removed; false if the key did not exist.</returns>
            <param name="keyword">
            The key of the keyword/value pair to be removed from the connection string in this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            .
            </param>
            <exception cref="T:System.ArgumentNullException"> keyword  is null (Nothing in Visual Basic)</exception>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
            <summary>Gets or sets the name of a section as defined in a configuration file.</summary>
            <returns>The name of a section in a configuration file.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
            <summary>Gets or sets the name of the underlying .NET Framework data provider in the connection string.</summary>
            <returns>The invariant name of the underlying .NET Framework data provider.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
            <summary>Gets or sets the metadata locations in the connection string.</summary>
            <returns>Gets or sets the metadata locations in the connection string.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
            <summary>Gets or sets the inner, provider-specific connection string.</summary>
            <returns>The inner, provider-specific connection string.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
            <summary>
            Gets a value that indicates whether the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            has a fixed size.
            </summary>
            <returns>
            Returns true in every case, because the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            supplies a fixed-size collection of keyword/value pairs.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> that contains the keys in the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
            <summary>Gets or sets the value associated with the specified key. In C#, this property is the indexer.</summary>
            <returns>The value associated with the specified key. </returns>
            <param name="keyword">The key of the item to get or set.</param>
            <exception cref="T:System.ArgumentNullException"> keyword  is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Tried to add a key that does not exist in the available keys.</exception>
            <exception cref="T:System.FormatException">Invalid value in the connection string (specifically, a Boolean or numeric value was expected but not supplied).</exception>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
            <summary>
            A data reader class for the entity client provider
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> object.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the resources consumed by this <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> and calls
            <see
                cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" />
            .
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
            <summary>Gets the value of the specified column as a Boolean.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
            <summary>Gets the value of the specified column as a byte.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a stream of bytes from the specified column, starting at location indicated by  dataIndex , into the buffer, starting at the location indicated by  bufferIndex .</summary>
            <returns>The actual number of bytes read.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
            <summary>Gets the value of the specified column as a single character.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>Reads a stream of characters from the specified column, starting at location indicated by  dataIndex , into the buffer, starting at the location indicated by  bufferIndex .</summary>
            <returns>The actual number of characters read.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
            <summary>Gets the name of the data type of the specified column.</summary>
            <returns>The name of the data type.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Data.Common.DbDataReader" /> object for the requested column ordinal that can be overridden with a provider-specific implementation.
            </summary>
            <returns>A data reader.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
            <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
            <summary>Gets the data type of the specified column.</summary>
            <returns>The data type of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
            <summary>Gets the value of the specified column as a single-precision floating point number.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
            <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
            <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
            <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
            <summary>Gets the name of the column, given the zero-based column ordinal.</summary>
            <returns>The name of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
            <summary>Gets the column ordinal given the name of the column.</summary>
            <returns>The zero-based column ordinal.</returns>
            <param name="name">The name of the column.</param>
            <exception cref="T:System.IndexOutOfRangeException">The name specified is not a valid column name.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
            <summary>Returns the provider-specific field type of the specified column.</summary>
            <returns>
            The <see cref="T:System.Type" /> object that describes the data type of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
            <summary>Gets all provider-specific attribute columns in the collection for the current row.</summary>
            <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
            <param name="values">
            An array of <see cref="T:System.Object" /> into which to copy the attribute columns.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the
            <see
                cref="T:System.Data.Common.DbDataReader" />
            .
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable" /> that describes the column metadata.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String" />.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
            <summary>Populates an array of objects with the column values of the current row.</summary>
            <returns>
            The number of instances of <see cref="T:System.Object" /> in the array.
            </returns>
            <param name="values">
            An array of <see cref="T:System.Object" /> into which to copy the attribute columns.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
            <summary>Gets a value that indicates whether the column contains nonexistent or missing values.</summary>
            <returns>
            true if the specified column is equivalent to <see cref="T:System.DBNull" />; otherwise, false.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
            <summary>Advances the reader to the next result when reading the results of a batch of statements.</summary>
            <returns>true if there are more result sets; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
            <summary>Advances the reader to the next record in a result set.</summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
            <summary>
            Returns a nested <see cref="T:System.Data.Common.DbDataRecord" />.
            </summary>
            <returns>The nested data record.</returns>
            <param name="i">The number of the DbDataRecord to return.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
            <summary>
            Returns nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.
            </summary>
            <returns>
            The nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.
            </returns>
            <param name="i">The ordinal of the column.</param>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
            <summary>Gets a value indicating the depth of nesting for the current row.</summary>
            <returns>The depth of nesting for the current row.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
            <summary>Gets the number of columns in the current row.</summary>
            <returns>The number of columns in the current row.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
            <summary>
            Gets a value that indicates whether this <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> contains one or more rows.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> contains one or more rows; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> is closed.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> is closed; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
            <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
            <returns>The number of rows changed, inserted, or deleted. Returns -1 for SELECT statements; 0 if no rows were affected or the statement failed.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal</param>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="name">The name of the column.</param>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
            <summary>
            Gets the number of fields in the <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> that are not hidden.
            </summary>
            <returns>The number of fields that are not hidden.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
            <summary>
            Gets <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> for this
            <see
                cref="T:System.Data.Entity.Core.IExtendedDataRecord" />
            .
            </summary>
            <returns>The information of a data record.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
            <summary>
            Class representing a parameter used in EntityCommand
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> class using the default values.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> class using the specified parameter name and data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">
            One of the <see cref="T:System.Data.DbType" /> values.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> class using the specified parameter name, data type and size.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">
            One of the <see cref="T:System.Data.DbType" /> values.
            </param>
            <param name="size">The size of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> class using the specified properties.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">
            One of the <see cref="T:System.Data.DbType" /> values.
            </param>
            <param name="size">The size of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> class using the specified properties.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">
            One of the <see cref="T:System.Data.DbType" /> values.
            </param>
            <param name="size">The size of the parameter.</param>
            <param name="direction">
            One of the <see cref="T:System.Data.ParameterDirection" /> values.
            </param>
            <param name="isNullable">true to indicate that the parameter accepts null values; otherwise, false.</param>
            <param name="precision">The number of digits used to represent the value.</param>
            <param name="scale">The number of decimal places to which value is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">
            One of the <see cref="T:System.Data.DataRowVersion" /> values.
            </param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
            <summary>
            Resets the type associated with the <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
            <summary>Returns a string representation of the parameter.</summary>
            <returns>A string representation of the parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
            <summary>Gets or sets the name of the entity parameter.</summary>
            <returns>The name of the entity parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.DbType" /> values.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
            <summary>Gets or sets the type of the parameter, expressed as an EdmType.</summary>
            <returns>The type of the parameter, expressed as an EdmType.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
            <summary>
            Gets or sets the number of digits used to represent the
            <see
                cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />
            property.
            </summary>
            <returns>The number of digits used to represent the value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which
            <see
                cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />
            is resolved.
            </summary>
            <returns>The number of decimal places to which value is resolved.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
            <summary>Gets or sets the value of the parameter.</summary>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
            <summary>Gets or sets the direction of the parameter.</summary>
            <returns>
            One of the <see cref="T:System.Data.ParameterDirection" /> values.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
            <summary>Gets or sets a value that indicates whether the parameter accepts null values.</summary>
            <returns>true if null values are accepted; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
            <summary>Gets or sets the maximum size of the data within the column.</summary>
            <returns>The maximum size of the data within the column.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column mapped to the <see cref="T:System.Data.DataSet" /> and used for loading or returning the
            <see
                cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />
            .
            </summary>
            <returns>The name of the source column mapped to the dataset and used for loading or returning the value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
            <summary>Gets or sets a value that indicates whether source column is nullable.</summary>
            <returns>true if source column is nullable; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion" /> to use when loading the value.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.DataRowVersion" /> values.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
            <summary>
            Class representing a provider factory for the entity client provider
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
            <summary>
            A singleton object for the entity client provider factory object.
            This remains a public field (not property) because DbProviderFactory expects a field.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
            <summary>
            Returns a new instance of the provider's class that implements the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />
            class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
            <summary>
            Throws a <see cref="T:System.NotSupportedException" />. This method is currently not supported.
            </summary>
            <returns>This method is currently not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
            <summary>
            Returns a new instance of the provider's class that implements the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
            <summary>
            Returns a new instance of the provider's class that implements the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />
            class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
            <summary>
            Throws a <see cref="T:System.NotSupportedException" />. This method is currently not supported.
            </summary>
            <returns>This method is currently not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
            <summary>
            Returns a new instance of the provider's class that implements the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />
            class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            Throws a <see cref="T:System.NotSupportedException" />. This method is currently not supported.
            </summary>
            <param name="state">This method is currently not supported.</param>
            <returns>This method is currently not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the requested <see cref="T:System.IServiceProvider" /> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.IServiceProvider" />. The supported types are
            <see
                cref="T:System.Data.Entity.Core.Common.DbProviderServices" />
            ,
            <see
                cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" />
            , and
            <see
                cref="T:System.Data.IEntityAdapter" />
            . Returns null (or Nothing in Visual Basic) for every other type.
            </returns>
            <param name="serviceType">
            The <see cref="T:System.Type" /> to return.
            </param>
        </member>
        <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
            <summary>
            Class representing a transaction for the conceptual layer
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
            <summary>Commits the underlying transaction.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
            <summary>Rolls back the underlying transaction.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
            <summary>
            Cleans up this transaction object
            </summary>
            <param name="disposing"> true to release both managed and unmanaged resources; false to release only unmanaged resources </param>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
            <summary>
            Gets <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> for this
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> to the underlying data source.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
            <summary>
            The connection object owning this transaction object
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
            <summary>
            Gets the isolation level of this <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.
            </summary>
            <returns>
            An <see cref="T:System.Data.IsolationLevel" /> enumeration value that represents the isolation level of the underlying transaction.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
            <summary>
            Gets the DbTransaction for the underlying provider transaction.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
            <summary>
            Represents a failure while trying to prepare or execute a CommandCompilation
            This exception is intended to provide a common exception that people can catch to
            hold provider exceptions (SqlException, OracleException) when using the EntityCommand
            to execute statements.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
            <summary>
            Represents a failure while trying to prepare or execute a CommandExecution
            This exception is intended to provide a common exception that people can catch to
            hold provider exceptions (SqlException, OracleException) when using the EntityCommand
            to execute statements.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntityCommandExecutionException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntityCommandExecutionException" />.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntityCommandExecutionException" />.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:System.Data.Entity.Core.EntityKey">
            <summary>
            An identifier for an entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityKey" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityKey" /> class with an entity set name and a generic
            <see
                cref="T:System.Collections.Generic.KeyValuePair" />
            collection.
            </summary>
            <param name="qualifiedEntitySetName">
            A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.
            </param>
            <param name="entityKeyValues">
            A generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            . The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityKey" /> class with an entity set name and an
            <see
                cref="T:System.Collections.Generic.IEnumerable`1" />
            collection of
            <see
                cref="T:System.Data.Entity.Core.EntityKeyMember" />
            objects.
            </summary>
            <param name="qualifiedEntitySetName">
            A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.
            </param>
            <param name="entityKeyValues">
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of
            <see
                cref="T:System.Data.Entity.Core.EntityKeyMember" />
            objects with which to initialize the key.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityKey" /> class with an entity set name and specific entity key pair.
            </summary>
            <param name="qualifiedEntitySetName">
            A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.
            </param>
            <param name="keyName">
            A <see cref="T:System.String" /> that is the name of the key.
            </param>
            <param name="keyValue">
            An <see cref="T:System.Object" /> that is the key value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
            <summary>Gets the entity set for this entity key from the given metadata workspace.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> for the entity key.
            </returns>
            <param name="metadataWorkspace">The metadata workspace that contains the entity.</param>
            <exception cref="T:System.ArgumentException">The entity set could not be located in the specified metadata workspace.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object. </summary>
            <returns>true if this instance and  obj  have equal values; otherwise, false. </returns>
            <param name="obj">
            An <see cref="T:System.Object" /> to compare with this instance.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            .
            </summary>
            <returns>true if this instance and  other  have equal values; otherwise, false. </returns>
            <param name="other">
            An <see cref="T:System.Data.Entity.Core.EntityKey" /> object to compare with this instance.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
            <summary>
            Serves as a hash function for the current <see cref="T:System.Data.Entity.Core.EntityKey" /> object.
            <see
                cref="M:System.Data.Entity.Core.EntityKey.GetHashCode" />
            is suitable for hashing algorithms and data structures such as a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
            <summary>
            Compares two <see cref="T:System.Data.Entity.Core.EntityKey" /> objects.
            </summary>
            <returns>true if the  key1  and  key2  values are equal; otherwise, false.</returns>
            <param name="key1">
            A <see cref="T:System.Data.Entity.Core.EntityKey" /> to compare.
            </param>
            <param name="key2">
            A <see cref="T:System.Data.Entity.Core.EntityKey" /> to compare.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
            <summary>
            Compares two <see cref="T:System.Data.Entity.Core.EntityKey" /> objects.
            </summary>
            <returns>true if the  key1  and  key2  values are not equal; otherwise, false.</returns>
            <param name="key1">
            A <see cref="T:System.Data.Entity.Core.EntityKey" /> to compare.
            </param>
            <param name="key2">
            A <see cref="T:System.Data.Entity.Core.EntityKey" /> to compare.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Helper method that is used to deserialize an <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Helper method that is used to deserialize an <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream and provides an additional caller-defined context.</param>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
            <summary>
            Gets a singleton EntityKey by which a read-only entity is identified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
            <summary>
            Gets a singleton EntityKey identifying an entity resulted from a failed TREAT.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
            <summary>Gets or sets the name of the entity set.</summary>
            <returns>
            A <see cref="T:System.String" /> value that is the name of the entity set for the entity to which the
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            belongs.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
            <summary>Gets or sets the name of the entity container.</summary>
            <returns>
            A <see cref="T:System.String" /> value that is the name of the entity container for the entity to which the
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            belongs.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
            <summary>
            Gets or sets the key values associated with this <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of key values for this
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Data.Entity.Core.EntityKey" /> is temporary.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Entity.Core.EntityKey" /> is temporary; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.EntityKeyMember">
            <summary>
            Information about a key that is part of an EntityKey.
            A key member contains the key name and value.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityKeyMember" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityKeyMember" /> class with the specified entity key pair.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="keyValue">The key value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
            <summary>Returns a string representation of the entity key.</summary>
            <returns>A string representation of the entity key.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
            <summary>Gets or sets the name of the entity key.</summary>
            <returns>The key name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
            <summary>Gets or sets the value of the entity key.</summary>
            <returns>The key value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
            <summary>
            Kind of collection (applied to Properties)
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
            <summary>
            Property is not a Collection
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
            <summary>
            Collection has Bag semantics( unordered and duplicates ok)
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
            <summary>
            Collection has List semantics
            (Order is deterministic and duplicates ok)
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
            <summary>
            The concurrency mode for properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
            <summary>
            Default concurrency mode: the property is never validated
            at write time
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
            <summary>
            Fixed concurrency mode: the property is always validated at
            write time
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
            <summary>
            The pattern for Server Generated Properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
            <summary>
            Not a Server Generated Property. This is the default.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
            <summary>
            A value is generated on INSERT, and remains unchanged on update.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
            <summary>
            A value is generated on both INSERT and UPDATE.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.EntitySqlException">
            <summary>
            Represents an eSQL Query compilation exception;
            The class of exceptional conditions that may cause this exception to be raised are mainly:
            1) Syntax Errors: raised during query text parsing and when a given query does not conform to eSQL formal grammar;
            2) Semantic Errors: raised when semantic rules of eSQL language are not met such as metadata or schema information
            not accurate or not present, type validation errors, scoping rule violations, user of undefined variables, etc.
            For more information, see eSQL Language Spec.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntitySqlException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.EntitySqlException" /> with a specialized error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntitySqlException" /> class that uses a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
            <summary>Gets a description of the error.</summary>
            <returns>A string that describes the error.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
            <summary>Gets the approximate context where the error occurred, if available.</summary>
            <returns>A string that describes the approximate context where the error occurred, if available.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
            <summary>Gets the approximate line number where the error occurred.</summary>
            <returns>An integer that describes the line number where the error occurred.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
            <summary>Gets the approximate column number where the error occurred.</summary>
            <returns>An integer that describes the column number where the error occurred.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
            <summary>
            Thrown to indicate that a command tree is invalid.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.InvalidCommandTreeException" /> class  with a default message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.InvalidCommandTreeException" /> class with the specified message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.InvalidCommandTreeException" /> class  with the specified message and inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">
            The exception that is the cause of this <see cref="T:System.Data.Entity.Core.InvalidCommandTreeException" />.
            </param>
        </member>
        <member name="T:System.Data.Entity.Core.MappingException">
            <summary>
            Mapping exception class. Note that this class has state - so if you change even
            its internals, it can be a breaking change
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.MappingException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.MappingException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.MappingException" /> with a specialized error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.MappingException" /> that uses a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
            <summary>
            Class for representing a collection of mapping items in Edm space.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
            <summary>
            Base class for the type created at design time to store the generated views.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
            <summary>Returns the key/value pair at the specified index, which contains the view and its key.</summary>
            <returns>The key/value pair at  index , which contains the view and its key.</returns>
            <param name="index">The index of the view.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
            <summary>
            Gets or sets the name of <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.
            </summary>
            <returns>The container name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
            <summary>
            Gets or sets <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> in storage schema.
            </summary>
            <returns>Container name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
            <summary>Hash value.</summary>
            <returns>Hash value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
            <summary>Hash value of views.</summary>
            <returns>Hash value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
            <summary>Gets or sets view count.</summary>
            <returns>View count.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
            <summary>
            Attribute to mark the assemblies that contain the generated views type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" /> class.
            </summary>
            <param name="viewGenerationType">The view type.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
            <summary>Gets the T:System.Type of the view.</summary>
            <returns>The T:System.Type of the view.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
            <summary>
            Represents a complex type mapping for a function import result.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
            <summary>
            Specifies a function import structural type mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
            <summary>
            Gets the property mappings for the result type of a function import.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
            <summary>
            Initializes a new FunctionImportComplexTypeMapping instance.
            </summary>
            <param name="returnType">The return type.</param>
            <param name="properties">The property mappings for the result type of a function import.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
            <summary>
            Ges the return type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
            <summary>
            Represents a function import entity type mapping.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
            <summary>
            Initializes a new FunctionImportEntityTypeMapping instance.
            </summary>
            <param name="isOfTypeEntityTypes">The entity types at the base of 
            the type hierarchies to be mapped.</param>
            <param name="entityTypes">The entity types to be mapped.</param>
            <param name="properties">The property mappings for the result types of a function import.</param>
            <param name="conditions">The mapping conditions.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
            <summary>
            Gets the entity types being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
            <summary>
            Gets the entity types at the base of the hierarchies being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
            <summary>
            Gets the mapping conditions.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
            <summary>
            Represents a mapping condition for a function import result.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
            <summary>
            Gets the name of the column used to evaluate the condition.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
            <summary>
            Represents a mapping condition for the result of a function import
            evaluated by checking null or not null.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new FunctionImportEntityTypeMappingConditionIsNull instance.
            </summary>
            <param name="columnName">The name of the column used to evaluate the condition.</param>
            <param name="isNull">Flag that indicates whether a null or not null check is performed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
            <summary>
            Gets a flag that indicates whether a null or not null check is performed.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
            <summary>
            Represents a mapping condition for the result of a function import,
            evaluated by comparison with a specified value.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new FunctionImportEntityTypeMappingConditionValue instance.
            </summary>
            <param name="columnName">The name of the column used to evaluate the condition.</param>
            <param name="value">The value to compare with.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
            <summary>
            Gets the value used for comparison.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
            <summary>
            Represents a mapping from a model function import to a store composable or non-composable function.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
            <summary>
            Gets model function (or source of the mapping)
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
            <summary>
            Gets store function (or target of the mapping)
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
            <summary>
            Represents a mapping from a model function import to a store composable function.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
            <summary>
            Initializes a new FunctionImportMappingComposable instance.
            </summary>
            <param name="functionImport">The model function import.</param>
            <param name="targetFunction">The store composable function.</param>
            <param name="resultMapping">The result mapping for the function import.</param>
            <param name="containerMapping">The parent container mapping.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
            <summary>
            Gets the result mapping for the function import.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
            <summary>
            Represents a mapping from a model function import to a store non-composable function.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
            <summary>
            Initializes a new FunctionImportMappingNonComposable instance.
            </summary>
            <param name="functionImport">The model function import.</param>
            <param name="targetFunction">The store non-composable function.</param>
            <param name="resultMappings">The function import result mappings.</param>
            <param name="containerMapping">The parent container mapping.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
            <summary>
            Gets the function import result mappings.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
            <summary>
            Base class for mapping a property of a function import return type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
            <summary>
            Maps a function import return type property to a table column.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new FunctionImportReturnTypeScalarPropertyMapping instance.
            </summary>
            <param name="propertyName">The mapped property name.</param>
            <param name="columnName">The mapped column name.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
            <summary>
            Gets the mapped property name.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
            <summary>
            Gets the mapped column name.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
            <summary>
            Represents the base item class for all the mapping metadata
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
            <summary>
            Represents the base item class for all the metadata
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
            <summary>
            Describes modification function mappings for an association set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
            <summary>
            Initalizes a new AssociationSetModificationFunctionMapping instance.
            </summary>
            <param name="associationSet">An association set.</param>
            <param name="deleteFunctionMapping">A delete function mapping.</param>
            <param name="insertFunctionMapping">An insert function mapping.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
            <summary>
            Gets the association set.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
            <summary>
            Gets the delete function mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
            <summary>
            Gets the insert function mapping.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
            <summary>
            Describes modification function mappings for an entity type within an entity set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
            <summary>
            Initializes a new EntityTypeModificationFunctionMapping instance.
            </summary>
            <param name="entityType">An entity type.</param>
            <param name="deleteFunctionMapping">A delete function mapping.</param>
            <param name="insertFunctionMapping">An insert function mapping.</param>
            <param name="updateFunctionMapping">An updated function mapping.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
            <summary>
            Gets the delete function mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
            <summary>
            Gets the insert function mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
            <summary>
            Gets hte update function mapping.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
            <summary>
            Describes the location of a member within an entity or association type structure.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
            <summary>
            Initializes a new ModificationFunctionMemberPath instance.
            </summary>
            <param name="members">Gets the members in the path from the leaf (the member being bound)
            to the root of the structure.</param>
            <param name="associationSet">Gets the association set to which we are navigating 
            via this member. If the value is null, this is not a navigation member path.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
            <summary>
            Gets the members in the path from the leaf (the member being bound)
            to the Root of the structure.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
            <summary>
            Gets the association set to which we are navigating via this member. If the value
            is null, this is not a navigation member path.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
            <summary>
            Binds a modification function parameter to a member of the entity or association being modified.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
            <summary>
            Initializes a new ModificationFunctionParameterBinding instance.
            </summary>
            <param name="parameter">The parameter taking the value.</param>
            <param name="memberPath">The path to the entity or association member defining the value.</param>
            <param name="isCurrent">A flag indicating whether the current or original member value is being bound.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
            <summary>
            Gets the parameter taking the value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
            <summary>
            Gets the path to the entity or association member defining the value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
            <summary>
            Gets a flag indicating whether the current or original
            member value is being bound.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
            <summary>
            Defines a binding from a named result set column to a member taking the value.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <summary>
            Initializes a new ModificationFunctionResultBinding instance.
            </summary>
            <param name="columnName">The name of the column to bind from the function result set.</param>
            <param name="property">The property to be set on the entity.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
            <summary>
            Gets the name of the column to bind from the function result set. 
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
            <summary>
            Gets the property to be set on the entity.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
            <summary>
            Represents the Mapping metadata for an AssociationSet in CS space.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityTypeMapping
            --MappingFragment
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            This class represents the metadata for the AssociationSetMapping elements in the
            above example. And it is possible to access the AssociationTypeMap underneath it.
            There will be only one TypeMap under AssociationSetMap.
            </example>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
            <summary>
            Represents the Mapping metadata for an Extent in CS space.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityTypeMapping
            --MappingFragment
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            This class represents the metadata for all the extent map elements in the
            above example namely EntitySetMapping, AssociationSetMapping and CompositionSetMapping.
            The EntitySetBaseMapping elements that are children of the EntityContainerMapping element
            can be accessed through the properties on this type.
            </example>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
            <summary>
            Gets the parent container mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
            <summary>
            Gets or sets the query view associated with this mapping.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
            <summary>
            Initializes a new AssociationSetMapping instance.
            </summary>
            <param name="associationSet">The association set to be mapped.</param>
            <param name="storeEntitySet">The store entity set to be mapped.</param>
            <param name="containerMapping">The parent container mapping.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Adds a property mapping condition.
            </summary>
            <param name="condition">The condition to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Removes a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
            <summary>
            Gets the association set that is mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
            <summary>
            Gets the contained association type mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
            <summary>
            Gets or sets the corresponding function mapping. Can be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
            <summary>
            Gets the store entity set that is mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
            <summary>
            Gets or sets the source end property mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
            <summary>
            Gets or sets the target end property mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
            <summary>
            Gets the property mapping conditions.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
            <summary>
            Represents the Mapping metadata for an association type map in CS space.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ComplexPropertyMap
            --ComplexTypeMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --ScalarPropertyMap
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --EndPropertyMap
            --ScalarPropertyMap
            This class represents the metadata for all association Type map elements in the
            above example. Users can access the table mapping fragments under the
            association type mapping through this class.
            </example>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
            <summary>
            Represents the Mapping metadata for a type map in CS space.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ComplexPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --ScalarPropertyMap
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --EndPropertyMap
            --ScalarPropertyMap
            This class represents the metadata for all the Type map elements in the
            above example namely EntityTypeMapping, AssociationTypeMapping and CompositionTypeMapping.
            The TypeMapping elements contain TableMappingFragments which in turn contain the property maps.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
            <summary>
            Creates an AssociationTypeMapping instance.
            </summary>
            <param name="associationSetMapping">The AssociationSetMapping that 
            the contains this AssociationTypeMapping.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
            <summary>
            Gets the AssociationSetMapping that contains this AssociationTypeMapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
            <summary>
            Gets the association type being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
            <summary>
            Gets the single mapping fragment.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
            <summary>
            Mapping metadata for Complex properties.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --DiscriminatorProperyMap ( constant value-->SMemberMetadata )
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --DiscriminatorProperyMap ( constant value-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            This class represents the metadata for all the complex property map elements in the
            above example. ComplexPropertyMaps contain ComplexTypeMaps which define mapping based
            on the type of the ComplexProperty in case of inheritance.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <summary>
            Construct a new Complex Property mapping object
            </summary>
            <param name="property"> The MemberMetadata object that represents this Complex member </param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
            <summary>
            Adds a type mapping corresponding to a nested complex type.
            </summary>
            <param name="typeMapping">The complex type mapping to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
            <summary>
            Removes a type mapping corresponding to a nested complex type.
            </summary>
            <param name="typeMapping">The complex type mapping to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
            <summary>
            Gets a read only collections of type mappings corresponding to the 
            nested complex types.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
            <summary>
            Mapping metadata for Complex Types.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
            <summary>
            Creates a ComplexTypeMapping instance.
            </summary>
            <param name="complexType">The ComplexType being mapped.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
            <summary>
            Adds a property mapping.
            </summary>
            <param name="propertyMapping">The property mapping to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
            <summary>
            Removes a property mapping.
            </summary>
            <param name="propertyMapping">The property mapping to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Adds a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Removes a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
            <summary>
            Gets the ComplexType being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
            <summary>
            Gets a read-only collection of property mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
            <summary>
            Gets a read-only collection of property mapping conditions.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
            <summary>
            Mapping metadata for End property of an association.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --DiscriminatorProperyMap ( constant value-->SMemberMetadata )
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --DiscriminatorProperyMap ( constant value-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            This class represents the metadata for all the end property map elements in the
            above example. EndPropertyMaps provide mapping for each end of the association.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
            <summary>
            Creates an association end property mapping.
            </summary>
            <param name="associationEnd">An AssociationEndMember that specifies 
            the association end to be mapped.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
            <summary>
            Adds a child property-column mapping.
            </summary>
            <param name="propertyMapping">A ScalarPropertyMapping that specifies
            the property-column mapping to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
            <summary>
            Removes a child property-column mapping.
            </summary>
            <param name="propertyMapping">A ScalarPropertyMapping that specifies
            the property-column mapping to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
            <summary>
            Gets an AssociationEndMember that specifies the mapped association end.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
            <summary>
            Gets a ReadOnlyCollection of ScalarPropertyMapping that specifies the children 
            of this association end property mapping.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
            <summary>
            Represents the Mapping metadata for the EntityContainer map in CS space.
            Only one EntityContainerMapping element is allowed in the MSL file for CS mapping.
            </summary>
            <example>
                For Example if conceptually you could represent the CS MSL file as following
                ---Mapping
                --EntityContainerMapping ( CNorthwind-->SNorthwind )
                --EntitySetMapping
                --AssociationSetMapping
                The type represents the metadata for EntityContainerMapping element in the above example.
                The EntitySetBaseMapping elements that are children of the EntityContainerMapping element
                can be accessed through the properties on this type.
            </example>
            <remarks>
                We currently assume that an Entity Container on the C side
                is mapped to a single Entity Container in the S - space.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
            <summary>
            Initializes a new EntityContainerMapping instance.
            </summary>
            <param name="conceptualEntityContainer">The conceptual entity container to be mapped.</param>
            <param name="storeEntityContainer">The store entity container to be mapped.</param>
            <param name="mappingItemCollection">The parent mapping item collection.</param>
            <param name="generateUpdateViews">Flag indicating whether to generate update views.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
            <summary>
            Adds an entity set mapping.
            </summary>
            <param name="setMapping">The entity set mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
            <summary>
            Removes an association set mapping.
            </summary>
            <param name="setMapping">The association set mapping to remove.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
            <summary>
            Adds an association set mapping.
            </summary>
            <param name="setMapping">The association set mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
            <summary>
            Removes an association set mapping.
            </summary>
            <param name="setMapping">The association set mapping to remove.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
            <summary>
            Adds a function import mapping.
            </summary>
            <param name="functionImportMapping">The function import mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
            <summary>
            Removes a function import mapping.
            </summary>
            <param name="functionImportMapping">The function import mapping to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
            <summary>
            Gets the parent mapping item collection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
            <summary>
            Gets the type kind for this item
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
            <summary>
            Gets the conceptual entity container.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
            <summary>
            Gets the store entity container.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
            <summary>
            Gets the entity set mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
            <summary>
            Gets the association set mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
            <summary>
            Gets the function import mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
            <summary>
            Gets a flag that indicates whether to generate the update views or not.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
            <summary>
            Represents the Mapping metadata for an EnitytSet in CS space.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityTypeMapping
            --MappingFragment
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            This class represents the metadata for the EntitySetMapping elements in the
            above example. And it is possible to access the EntityTypeMaps underneath it.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
            <summary>
            Initialiazes a new EntitySetMapping instance.
            </summary>
            <param name="entitySet">The entity set to be mapped.</param>
            <param name="containerMapping">The parent container mapping.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
            <summary>
            Adds a type mapping.
            </summary>
            <param name="typeMapping">The type mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
            <summary>
            Removes a type mapping.
            </summary>
            <param name="typeMapping">The type mapping to remove.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
            <summary>
            Adds a function mapping.
            </summary>
            <param name="modificationFunctionMapping">The function mapping to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
            <summary>
            Removes a function mapping.
            </summary>
            <param name="modificationFunctionMapping">The function mapping to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
            <summary>
            Gets the entity set that is mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
            <summary>
            Gets the contained entity type mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
            <summary>
            Gets the corresponding function mappings.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
            <summary>
            Mapping metadata for Entity type.
            If an EntitySet represents entities of more than one type, than we will have
            more than one EntityTypeMapping for an EntitySet( For ex : if
            PersonSet Entity extent represents entities of types Person and Customer,
            than we will have two EntityType Mappings under mapping for PersonSet).
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ScalarPropertyMap
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap
            --ComplexPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --ScalarPropertyMap
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap
            --ScalarProperyMap
            --EndPropertyMap
            --ScalarPropertyMap
            This class represents the metadata for all entity Type map elements in the
            above example. Users can access the table mapping fragments under the
            entity type mapping through this class.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
            <summary>
            Creates an EntityTypeMapping instance.
            </summary>
            <param name="entitySetMapping">The EntitySetMapping that contains this EntityTypeMapping.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Adds an entity type to the mapping.
            </summary>
            <param name="type">The EntityType to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Removes an entity type from the mapping.
            </summary>
            <param name="type">The EntityType to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Adds an entity type hierarchy to the mapping.
            The hierarchy is represented by the specified root entity type.
            </summary>
            <param name="type">The root EntityType of the hierarchy to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Removes an entity type hierarchy from the mapping.
            The hierarchy is represented by the specified root entity type.
            </summary>
            <param name="type">The root EntityType of the hierarchy to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
            <summary>
            Adds a mapping fragment.
            </summary>
            <param name="fragment">The mapping fragment to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
            <summary>
            Removes a mapping fragment.
            </summary>
            <param name="fragment">The mapping fragment to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
            <summary>
            Gets the EntitySetMapping that contains this EntityTypeMapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
            <summary>
            Gets the single EntityType being mapped. Throws exception in case of hierarchy type mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
            <summary>
            Gets a flag that indicates whether this is a type hierarchy mapping.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
            <summary>
            Gets a read-only collection of mapping fragments.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
            <summary>
            Gets the mapped entity types.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
            <summary>
            Gets the mapped base types for a hierarchy mapping.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
            <summary>
            Represents the metadata for mapping fragment.
            A set of mapping fragments makes up the Set mappings( EntitySet, AssociationSet or CompositionSet )
            Each MappingFragment provides mapping for those properties of a type that map to a single table.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ComplexPropertyMap
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --DiscriminatorProperyMap ( constant value-->SMemberMetadata )
            --ComplexTypeMapping
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --DiscriminatorProperyMap ( constant value-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            This class represents the metadata for all the mapping fragment elements in the
            above example. Users can access all the top level constructs of
            MappingFragment element like EntityKey map, Property Maps, Discriminator
            property through this mapping fragment class.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
            <summary>
            Creates a MappingFragment instance.
            </summary>
            <param name="storeEntitySet">The EntitySet corresponding to the table of view being mapped.</param>
            <param name="typeMapping">The TypeMapping that contains this MappingFragment.</param>
            <param name="makeColumnsDistinct">Flag that indicates whether to include 'DISTINCT' when generating queries.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
            <summary>
            Adds a property mapping.
            </summary>
            <param name="propertyMapping">The property mapping to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
            <summary>
            Removes a property mapping.
            </summary>
            <param name="propertyMapping">The property mapping to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Adds a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
            <summary>
            Removes a property mapping condition.
            </summary>
            <param name="condition">The property mapping condition to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
            <summary>
            Gets the EntitySet corresponding to the table or view being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
            <summary>
            Gets the TypeMapping that contains this MappingFragment.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
            <summary>
            Gets a flag that indicates whether to include 'DISTINCT' when generating queries.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
            <summary>
            Gets a read-only collection of property mappings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
            <summary>
            Gets a read-only collection of property mapping conditions.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
            <summary>
            Represents a collection of items in Storage Mapping (CS Mapping) space.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> class using the specified <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> and a collection of string indicating the metadata file paths.</summary>
            <param name="edmCollection">The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> that this mapping is to use.</param>
            <param name="storeCollection">The <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> that this mapping is to use.</param>
            <param name="filePaths">The file paths that this mapping is to use.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> class using the specified <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> and XML readers.</summary>
            <param name="edmCollection">The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> that this mapping is to use.</param>
            <param name="storeCollection">The <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> that this mapping is to use.</param>
            <param name="xmlReaders">The XML readers that this mapping is to use.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
            <summary>
            Computes a hash value for the container mapping specified by the names of the mapped containers.
            </summary>
            <param name="conceptualModelContainerName">The name of a container in the conceptual model.</param>
            <param name="storeModelContainerName">The name of a container in the store model.</param>
            <returns>A string that specifies the computed hash value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
            <summary>
            Computes a hash value for the single container mapping in the collection.
            </summary>
            <returns>A string that specifies the computed hash value.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
            <summary>
            Creates a dictionary of (extent, generated view) for a container mapping specified by
            the names of the mapped containers.
            </summary>
            <param name="conceptualModelContainerName">The name of a container in the conceptual model.</param>
            <param name="storeModelContainerName">The name of a container in the store model.</param>
            <param name="errors">A list that accumulates potential errors.</param>
            <returns>
            A dictionary of (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase"/>, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView"/>) that specifies the generated views.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
            <summary>
            Creates a dictionary of (extent, generated view) for the single container mapping
            in the collection.
            </summary>
            <param name="errors">A list that accumulates potential errors.</param>
            <returns>
            A dictionary of (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase"/>, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView"/>) that specifies the generated views.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
            <summary>
            Factory method that creates a <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection"/>.
            </summary>
            <param name="edmItemCollection">
            The edm metadata collection to map. Must not be <c>null</c>.
            </param>
            <param name="storeItemCollection">
            The store metadata collection to map. Must not be <c>null</c>.
            </param>
            <param name="xmlReaders">
            MSL artifacts to load. Must not be <c>null</c>.
            </param>
            <param name="filePaths">
            Paths to MSL artifacts. Used in error messages. Can be <c>null</c> in which case
            the base Uri of the XmlReader will be used as a path.
            </param>
            <param name="errors">
            The collection of errors encountered while loading.
            </param>
            <returns>
            <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection"/> instance if no errors encountered. Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
            <summary>
            Gets or sets a <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory"/> for creating <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache"/> instances
            that are used to retrieve pre-generated mapping views.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
            <summary>Gets the version of this <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> represents.</summary>
            <returns>The version of this <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> represents.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
            <summary>
            Describes modification function binding for change processing of entities or associations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
            <summary>
            Initializes a new ModificationFunctionMapping instance.
            </summary>
            <param name="entitySet">The entity or association set.</param>
            <param name="entityType">The entity or association type.</param>
            <param name="function">The metadata of function to which we should bind.</param>
            <param name="parameterBindings">Bindings for function parameters.</param>
            <param name="rowsAffectedParameter">The output parameter producing number of rows affected.</param>
            <param name="resultBindings">Bindings for the results of function evaluation</param>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
            <summary>
            Gets output parameter producing number of rows affected. May be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
            <summary>
            Gets Metadata of function to which we should bind.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
            <summary>
            Gets bindings for function parameters.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
            <summary>
            Gets bindings for the results of function evaluation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
            <summary>
            Mapping metadata for scalar properties.
            </summary>
            <example>
            For Example if conceptually you could represent the CS MSL file as following
            --Mapping
            --EntityContainerMapping ( CNorthwind-->SNorthwind )
            --EntitySetMapping
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --EntityTypeMapping
            --MappingFragment
            --EntityKey
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ComplexPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --AssociationSetMapping
            --AssociationTypeMapping
            --MappingFragment
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            --ScalarProperyMap ( CMemberMetadata-->SMemberMetadata )
            --EndPropertyMap
            --ScalarPropertyMap ( CMemberMetadata-->SMemberMetadata )
            This class represents the metadata for all the scalar property map elements in the
            above example.
            </example>
        </member>
        <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <summary>
            Creates a mapping between a simple property and a column.
            </summary>
            <param name="property">The property to be mapped.</param>
            <param name="column">The column to be mapped.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
            <summary>
            Gets an EdmProperty that specifies the mapped column.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.MetadataException">
            <summary>
            metadata exception class
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.MetadataException" /> class with a default message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.MetadataException" /> class with the specified message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.MetadataException" /> class with the specified message and inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">
            The exception that is the cause of this <see cref="T:System.Data.Entity.Core.MetadataException" />.
            </param>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
            <summary>
            DataSpace
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
            <summary>
            OSpace indicates the item in the clr space
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
            <summary>
            CSpace indicates the item in the CSpace - edm primitive types +
            types defined in csdl
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
            <summary>
            SSpace indicates the item in the SSpace
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
            <summary>
            Mapping between OSpace and CSpace
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
            <summary>
            Mapping between CSpace and SSpace
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
            <summary>
            This class encapsulates the error information for a generic EDM error.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
            <summary>Gets the error message.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
            <summary>
            Class for representing a collection of items in Edm space.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> class by using the collection of the XMLReader objects where the conceptual schema definition language (CSDL) files exist.
            </summary>
            <param name="xmlReaders">The collection of the XMLReader objects where the conceptual schema definition language (CSDL) files exist.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> class.</summary>
            <param name="model">The entity data model.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> class by using the paths where the conceptual schema definition language (CSDL) files exist.
            </summary>
            <param name="filePaths">The paths where the conceptual schema definition language (CSDL) files exist.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
            <summary>
            Returns a collection of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> objects.
            </summary>
            <returns>
            A ReadOnlyCollection object that represents a collection of the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            objects.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
            <summary>
            Returns a collection of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> objects with the specified conceptual model version.
            </summary>
            <returns>
            A ReadOnlyCollection object that represents a collection of the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            objects.
            </returns>
            <param name="edmVersion">The conceptual model version.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
            <summary>
            Factory method that creates an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection"/>.
            </summary>
            <param name="xmlReaders">
            CSDL artifacts to load. Must not be <c>null</c>.
            </param>
            <param name="filePaths">
            Paths to CSDL artifacts. Used in error messages. Can be <c>null</c> in which case
            the base Uri of the XmlReader will be used as a path.
            </param>
            <param name="errors">
            The collection of errors encountered while loading.
            </param>
            <returns>
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection"/> instance if no errors encountered. Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
            <summary>Gets the conceptual model version for this collection.</summary>
            <returns>The conceptual model version for this collection.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
            <summary>
            This class encapsulates the error information for a schema error that was encountered.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
            <summary>
            Constructs a EdmSchemaError object.
            </summary>
            <param name="message"> The explanation of the error. </param>
            <param name="errorCode"> The code associated with this error. </param>
            <param name="severity"> The severity of the error. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
            <summary>Returns the error message.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
            <summary>Gets the error code.</summary>
            <returns>The error code.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
            <summary>Gets the severity level of the error.</summary>
            <returns>
            One of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" /> values. The default is
            <see
                cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
            <summary>Gets the line number where the error occurred.</summary>
            <returns>The line number where the error occurred.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
            <summary>Gets the column where the error occurred.</summary>
            <returns>The column where the error occurred.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
            <summary>Gets the location of the schema that contains the error. This string also includes the name of the schema at the end.</summary>
            <returns>The location of the schema that contains the error.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
            <summary>Gets the name of the schema that contains the error.</summary>
            <returns>The name of the schema that contains the error.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
            <summary>Gets a string representation of the stack trace at the time the error occurred.</summary>
            <returns>A string representation of the stack trace at the time the error occurred.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
            <summary>
            Defines the different severities of errors that can occur when validating an Entity Framework model.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
            <summary>
            A warning that does not prevent the model from being used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
            <summary>
            An error that prevents the model from being used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
            <summary>
            Represents a end of a Association Type
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
            <summary>
            Initializes a new instance of the RelationshipEndMember class
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
            <summary>
            Represents the edm member class
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
            <summary>Returns the name of this member.</summary>
            <returns>The name of this member.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
            <summary>
            Gets or sets the name of the property. Setting this from a store-space model-convention will change the name of the database 
            column for this property. In the conceptual model, this should align with the corresponding property from the entity class 
            and should not be changed.
            </summary>
            <returns>The name of this member.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
            <summary>Gets the type on which this member is declared.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the type on which this member is declared.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
            <summary>
            Gets the instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> class that contains both the type of the member and facets for the type.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object that contains both the type of the member and facets for the type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
            <summary>
            Tells whether this member is marked as a Computed member in the EDM definition
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
            <summary>
            Tells whether this member's Store generated pattern is marked as Identity in the EDM definition
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
            <summary>Access the EntityType of the EndMember in an association.</summary>
            <returns>The EntityType of the EndMember in an association.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
            <summary>Gets the operational behavior of this relationship end member.</summary>
            <returns>
            One of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" /> values. The default is
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
            <summary>Gets the multiplicity of this relationship end member.</summary>
            <returns>
            One of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> values.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only AssociationEndMember instance.
            </summary>
            <param name="name">The name of the association end member.</param>
            <param name="endRefType">The reference type for the end.</param>
            <param name="multiplicity">The multiplicity of the end.</param>
            <param name="deleteAction">Flag that indicates the delete behavior of the end.</param>
            <param name="metadataProperties">Metadata properties to be associated with the instance.</param>
            <returns>The newly created AssociationEndMember instance.</returns>
            <exception cref="T:System.ArgumentException">The specified name is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">The specified reference type is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
            <summary>
            Class for representing an Association set
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
            <summary>
            Class for representing a relationship set
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
            <summary>
            Class for representing a entity set
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
            <summary>Returns the name of the current entity or relationship set.</summary>
            <returns>The name of the current entity or relationship set.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
            <summary>
            Gets escaped provider specific SQL describing this entity set.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
            <summary>
            Gets or sets the name of the current entity or relationship set. 
            If this property is changed from store-space, the mapping layer must also be updated to reflect the new name. 
            To change the table name of a store space <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet"/> use the Table property. 
            </summary>
            <returns>The name of the current entity or relationship set.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when EntitySetBase instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
            <summary>Gets the entity container of the current entity or relationship set.</summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer"/> object that represents the entity container of the current entity or relationship set.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when the EntitySetBase instance or the EntityContainer passed into the setter is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
            <summary>
            Gets the entity type of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase"/>.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase"/> object that represents the entity type of this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase"/>
            .
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when EntitySetBase instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
            <summary>
            Gets or sets the database table name for this entity set.
            </summary>
            <exception cref="T:System.ArgumentNullException">if value passed into setter is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when EntitySetBase instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
            <summary>
            Gets or sets the database schema for this entity set.
            </summary>
            <exception cref="T:System.ArgumentNullException">if value passed into setter is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when EntitySetBase instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
            <summary>
            Gets the relationship type of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> object that represents the relationship type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only AssociationSet instance from the specified parameters.
            </summary>
            <param name="name">The name of the association set.</param>
            <param name="type">The association type of the elements in the association set.</param>
            <param name="sourceSet">The entity set for the source association set end.</param>
            <param name="targetSet">The entity set for the target association set end.</param>
            <param name="metadataProperties">Metadata properties to be associated with the instance.</param>
            <returns>The newly created AssociationSet instance.</returns>
            <exception cref="T:System.ArgumentException">The specified name is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">The specified association type is null.</exception>
            <exception cref="T:System.ArgumentException">
            The entity type of one of the ends of the specified
            association type does not match the entity type of the corresponding entity set end.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
            <summary>
            Gets the association related to this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> object that represents the association related to this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
            <summary>
            Gets the ends of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the ends of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
            <summary>
            Class representing a AssociationSet End
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
            <summary>
            Returns the name of the End role for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.
            </summary>
            <returns>
            The name of the End role for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
            <summary>
            Gets the parent association set of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd"/>.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet"/> object that represents the parent association set of this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd"/>
            .
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Setter is called when the AssociationSetEnd instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
            <summary>
            Gets the End member that this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd"/> object corresponds to.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember"/> object that represents the End member that this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd"/>
            object corresponds to.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Setter is called when the AssociationSetEnd instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
            <summary>
            Gets the name of the End for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.
            </summary>
            <returns>
            The name of the End for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
            <summary>
            Gets the name of the End role for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd"/>.
            </summary>
            <returns>
            The name of the End role for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Setter is called when the AssociationSetEnd instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
            <summary>Gets the entity set referenced by this End role. </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> object that represents the entity set referred by this End role.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
            <summary>
            Describes an association/relationship between two entities in the conceptual model or a foreign key relationship 
            between two tables in the store model. In the conceptual model the dependant class may or may not define a foreign key property.
            If a foreign key is defined the <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey"/> property will be true and the <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint"/> property will contain details of the foreign keys
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
            <summary>
            Represents the Relationship type
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
            <summary>
            Represents the Entity Type
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
            <summary>
            Represents the Structural Type
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
            <summary>
            Base EdmType class for all the model types
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
            <summary>Returns the full name of this type.</summary>
            <returns>The full name of this type. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
            <summary>
            Returns an instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> whose element type is this type.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> object whose element type is this type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
            <summary>Gets the name of this type.</summary>
            <returns>The name of this type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
            <summary>Gets the namespace of this type.</summary>
            <returns>The namespace of this type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
            <summary>Gets a value indicating whether this type is abstract or not. </summary>
            <returns>true if this type is abstract; otherwise, false. </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called on instance that is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
            <summary>Gets the base type of this type.</summary>
            <returns>The base type of this type.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called on instance that is in ReadOnly state</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value passed in for setter will create a loop in the inheritance chain</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
            <summary>Gets the full name of this type.</summary>
            <returns>The full name of this type. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
            <summary>
            Adds a member to this type
            </summary>
            <param name="member"> The member to add </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
            <summary>Removes a member from this type.</summary>
            <param name="member">The member to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
            <summary>Gets the list of members on this type.</summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains a set of members on this type.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
            <summary>
            Adds the specified property to the list of keys for the current entity.  
            </summary>
            <param name="member">The property to add.</param>
            <exception cref="T:System.ArgumentNullException">if member argument is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the EntityType has a base type of another EntityTypeBase. In this case KeyMembers should be added to the base type</exception>
            <exception cref="T:System.InvalidOperationException">If the EntityType instance is in ReadOnly state</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
            <summary>Removes the specified key member from the collection.</summary>
            <param name="member">The key member to remove.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
            <summary>Gets the list of all the key members for the current entity or relationship type.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> object that represents the list of key members for the current entity or relationship type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
            <summary>Gets the list of all the key properties for this entity type.</summary>
            <returns>The list of all the key properties for this entity type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
            <summary>Gets the list of ends for this relationship type. </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of Ends for this relationship type.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only AssociationType instance from the specified parameters.
            </summary>
            <param name="name">The name of the association type.</param>
            <param name="namespaceName">The namespace of the association type.</param>
            <param name="foreignKey">Flag that indicates a foreign key (FK) relationship.</param>
            <param name="dataSpace">The data space for the association type.</param>
            <param name="sourceEnd">The source association end member.</param>
            <param name="targetEnd">The target association end member.</param>
            <param name="constraint">A referential constraint.</param>
            <param name="metadataProperties">Metadata properties to be associated with the instance.</param>
            <returns>The newly created AssociationType instance.</returns>
            <exception cref="T:System.ArgumentException">The specified name is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The specified namespace is null or empty.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
            <summary>
            Gets the list of ends for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of ends for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
            <summary>Gets or sets the referential constraint.</summary>
            <returns>The referential constraint.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
            <summary>
            Gets the list of constraints for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of constraints for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
            <summary>Gets the Boolean property value that specifies whether the column is a foreign key.</summary>
            <returns>A Boolean value that specifies whether the column is a foreign key. If true, the column is a foreign key. If false (default), the column is not a foreign key.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
            <summary>
            Represents the structure of an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet"/>. In the conceptual-model this represents the shape and structure 
            of an entity. In the store model this represents the structure of a table. To change the Schema and Table name use EntitySet.  
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> object that references this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />
            .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> object that references this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            The factory method for constructing the EntityType object.
            </summary>
            <param name="name">The name of the entity type.</param>
            <param name="namespaceName">The namespace of the entity type.</param>
            <param name="dataSpace">The dataspace in which the EntityType belongs to.</param>
            <param name="keyMemberNames">Name of key members for the type.</param>
            <param name="members">Members of the entity type (primitive and navigation properties).</param>
            <param name="metadataProperties">Metadata properties to be associated with the instance.</param>
            <returns>The EntityType object.</returns>
            <exception cref="T:System.ArgumentException">Thrown if either name, namespace arguments are null.</exception>
            <remarks>The newly created EntityType will be read only.</remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
            <summary>
            Adds the specified navigation property to the members of this type.
            The navigation property is added regardless of the read-only flag.
            </summary>
            <param name="property">The navigation property to be added.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
            <summary>Gets the declared navigation properties associated with the entity type.</summary>
            <returns>The declared navigation properties associated with the entity type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
            <summary>
            Gets the navigation properties of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of navigation properties on this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
            <summary>Gets the list of declared properties for the entity type.</summary>
            <returns>The declared properties for the entity type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
            <summary>Gets the collection of declared members for the entity type.</summary>
            <returns>The collection of declared members for the entity type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
            <summary>
            Gets the list of properties for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
            <summary>
            Represents an enumeration type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
            <summary>
            Class representing a simple type
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only EnumType instance.
            </summary>
            <param name="name">The name of the enumeration type.</param>
            <param name="namespaceName">The namespace of the enumeration type.</param>
            <param name="underlyingType">The underlying type of the enumeration type.</param>
            <param name="isFlags">Indicates whether the enumeration type can be treated as a bit field; that is, a set of flags.</param>
            <param name="members">The members of the enumeration type.</param>
            <param name="metadataProperties">Metadata properties to be associated with the enumeration type.</param>
            <returns>The newly created EnumType instance.</returns>
            <exception cref="T:System.ArgumentNullException">underlyingType is null.</exception>
            <exception cref="T:System.ArgumentException">
            name is null or empty.
            -or-
            namespaceName is null or empty.
            -or-
            underlyingType is not a supported underlying type.
            -or-
            The specified members do not have unique names.
            -or-
            The value of a specified member is not in the range of the underlying type.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
            <summary> Returns the kind of the type </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
            <summary> Gets a collection of enumeration members for this enumeration type. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
            <summary> Gets a value indicating whether the enum type is defined as flags (i.e. can be treated as a bit field) </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
            <summary> Gets the underlying type for this enumeration type. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
            <summary>
            Specifies the kinds of item attributes in the conceptual model. 
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
            <summary>
            An enumeration member indicating that an item attribute is System
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
            <summary>
            An enumeration member indicating that an item attribute is Extended.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
            <summary>
            List of all the built in types
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
            <summary>
            Association Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
            <summary>
            AssociationSetEnd Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
            <summary>
            AssociationSet Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
            <summary>
            Association Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
            <summary>
            EntitySetBase Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
            <summary>
            Entity Type Base Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
            <summary>
            Collection Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
            <summary>
            Collection Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
            <summary>
            Complex Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
            <summary>
            Documentation Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
            <summary>
            DeleteAction Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
            <summary>
            Edm Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
            <summary>
            Entity Container Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
            <summary>
            Entity Set Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
            <summary>
            Entity Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
            <summary>
            Enumeration Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
            <summary>
            Enum Member Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
            <summary>
            Facet Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
            <summary>
            EdmFunction Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
            <summary>
            Function Parameter Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
            <summary>
            Global Item Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
            <summary>
            Metadata Property Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
            <summary>
            Navigation Property Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
            <summary>
            Metadata Item Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
            <summary>
            EdmMember Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
            <summary>
            Parameter Mode Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
            <summary>
            Primitive Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
            <summary>
            Primitive Type Kind Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
            <summary>
            EdmProperty Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
            <summary>
            ProviderManifest Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
            <summary>
            Referential Constraint Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
            <summary>
            Ref Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
            <summary>
            RelationshipEnd Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
            <summary>
            Relationship Multiplicity Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
            <summary>
            Relationship Set Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
            <summary>
            Relationship Type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
            <summary>
            Row Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
            <summary>
            Simple Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
            <summary>
            Structural Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
            <summary>
            Type Information Kind
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
            <summary>
            Represents the Edm Collection Type
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
            <summary>
            Gets the instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> class that contains the type of the element that this current
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />
            object includes and facets for that type.
            </summary>
            <returns>
            The instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> class that contains the type of the element that this current
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />
            object includes and facets for that type.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
            <summary>
            Represents the Edm Complex Type.  This can be used to configure complex types
            from a conceptual-space model-based convention. Complex types are not supported in the store model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType"/> type.
            </summary>
            <param name="name">The name of the complex type.</param>
            <param name="namespaceName">The namespace of the complex type.</param>
            <param name="dataSpace">The dataspace to which the complex type belongs to.</param>
            <param name="members">Members of the complex type.</param>
            <param name="metadataProperties">Metadata properties to be associated with the instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either name, namespace or members argument is null.</exception>
            <returns>
            A new instance a the <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType"/> type.
            </returns>
            <notes>
            The newly created <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType"/> will be read only.
            </notes>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
            <summary>
            Gets the list of properties for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
            <summary>
            Class representing the Documentation associated with an item
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new Documentation instance.
            </summary>
            <param name="summary">A summary string.</param>
            <param name="longDescription">A long description string.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
            <summary>
            Returns the summary for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </summary>
            <returns>
            The summary for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
            <summary>
            Gets the summary for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </summary>
            <returns>
            The summary for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
            <summary>
            Gets the long description for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </summary>
            <returns>
            The long description for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> object contains only a null or an empty
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" />
            and a
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" />
            .
            </summary>
            <returns>
            true if this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> object contains only a null or an empty
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" />
            and a
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" />
            ; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
            <summary>
            Class for representing a function
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
            <summary>
            Adds a parameter to this function.
            </summary>
            <param name="functionParameter">The parameter to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            The factory method for constructing the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> object.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="namespaceName">The namespace of the function.</param>
            <param name="dataSpace">The namespace the function belongs to.</param>
            <param name="payload">Additional function attributes and properties.</param>
            <param name="metadataProperties">Metadata properties that will be added to the function. Can be null.</param>
            <returns>
            A new, read-only instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.
            </summary>
            <returns>
            One of the enumeration values of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> enumeration.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
            <summary>Returns the full name (namespace plus name) of this type. </summary>
            <returns>The full name of the type.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
            <summary>
            Gets the parameters of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the parameters of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
            <summary>
            Gets the return parameter of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> object that represents the return parameter of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
            <summary>
            Gets the return parameters of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that represents the return parameters of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
            <summary>Gets the store function name attribute of this function.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
            <summary>Gets the parameter type semantics attribute of this function.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
            <summary>Gets the aggregate attribute of this function.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
            <summary>
            Gets a value indicating whether built in attribute is present on this function.
            </summary>
            <value>
              <c>true</c> if the attribute is present; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
            <summary>
            Gets a value indicating whether this instance is from the provider manifest.
            </summary>
            <value>
            <c>true</c> if this instance is from the provider manifest; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
            <summary>
            Gets a value indicating whether the is a niladic function (a function that accepts no arguments).
            </summary>
            <value>
            <c>true</c> if the function is niladic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
            <summary>Gets whether this instance is mapped to a function or to a stored procedure.</summary>
            <returns>true if this instance is mapped to a function; false if this instance is mapped to a stored procedure.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
            <summary>Gets a query in the language that is used by the database management system or storage model. </summary>
            <returns>
            A string value in the syntax used by the database management system or storage model that contains the query or update statement of the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
            <summary>Gets or sets the schema associated with the function.</summary>
            <returns>The schema associated with the function.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
            <summary>
            In conceptual-space, EdmProperty represents a property on an Entity.
            In store-space, EdmProperty represents a column in a table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
            <summary> Creates a new primitive property. </summary>
            <returns> The newly created property. </returns>
            <param name="name"> The name of the property. </param>
            <param name="primitiveType"> The type of the property. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
            <summary> Creates a new enum property. </summary>
            <returns> The newly created property. </returns>
            <param name="name"> The name of the property. </param>
            <param name="enumType"> The type of the property. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
            <summary> Creates a new complex property. </summary>
            <returns> The newly created property. </returns>
            <param name="name"> The name of the property. </param>
            <param name="complexType"> The type of the property. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Creates a new instance of EdmProperty type.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="typeUsage">
            Property <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/>
            </param>
            <returns>A new instance of EdmProperty type</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>Sets the metadata properties.</summary>
            <param name="metadataProperties">The metadata properties to be set.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty"/> can have a null value.
            </summary>
            <remarks>
            Nullability in the conceptual model and store model is a simple indication of whether or not
            the property is considered nullable. Nullability in the object model is more complex.
            When using convention based mapping (as usually happens with POCO entities), a property in the
            object model is considered nullable if and only if the underlying CLR type is nullable and
            the property is not part of the primary key.
            When using attribute based mapping (usually used with entities that derive from the EntityObject
            base class), a property is considered nullable if the IsNullable flag is set to true in the
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute"/> attribute. This flag can
            be set to true even if the underlying type is not nullable, and can be set to false even if the
            underlying type is nullable. The latter case happens as part of default code generation when
            a non-nullable property in the conceptual model is mapped to a nullable CLR type such as a string.
            In such a case, the Entity Framework treats the property as non-nullable even though the CLR would
            allow null to be set.
            There is no good reason to set a non-nullable CLR type as nullable in the object model and this
            should not be done even though the attribute allows it.
            </remarks>
            <returns>
            true if this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty"/> can have a null value; otherwise, false.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when the EdmProperty instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
            <summary>Gets the type name of the property.</summary>
            <returns>The type name of the property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
            <summary>
            Gets the default value for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty"/>.
            </summary>
            <returns>
            The default value for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the setter is called when the EdmProperty instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
            <summary>Gets whether the property is a collection type property.</summary>
            <returns>true if the property is a collection type property; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
            <summary>Gets whether this property is a complex type property.</summary>
            <returns>true if this property is a complex type property; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
            <summary>Gets whether this property is a primitive type.</summary>
            <returns>true if this property is a primitive type; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
            <summary>Gets whether this property is an enumeration type property.</summary>
            <returns>true if this property is an enumeration type property; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
            <summary>Gets whether this property is an underlying primitive type.</summary>
            <returns>true if this property is an underlying primitive type; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
            <summary>Gets the complex type information for this property.</summary>
            <returns>The complex type information for this property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
            <summary>Gets the primitive type information for this property.</summary>
            <returns>The primitive type information for this property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
            <summary>Gets the enumeration type information for this property.</summary>
            <returns>The enumeration type information for this property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
            <summary>Gets the underlying primitive type information for this property.</summary>
            <returns>The underlying primitive type information for this property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
            <summary>Gets or sets the concurrency mode for the property.</summary>
            <returns>The concurrency mode for the property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
            <summary>Gets or sets the database generation method for the database column associated with this property</summary>
            <returns>The store generated pattern for the property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
            <summary>Gets or sets the kind of collection for this model.</summary>
            <returns>The kind of collection for this model.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
            <summary>Gets whether the maximum length facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
            <summary>Gets or sets the maximum length of the property.</summary>
            <returns>The maximum length of the property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
            <summary>Gets or sets whether this property uses the maximum length supported by the provider.</summary>
            <returns>true if this property uses the maximum length supported by the provider; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
            <summary>Gets whether the fixed length facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
            <summary>Gets or sets whether the length of this property is fixed.</summary>
            <returns>true if the length of this property is fixed; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
            <summary>Gets whether the Unicode facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
            <summary>Gets or sets whether this property is a Unicode property.</summary>
            <returns>true if this property is a Unicode property; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
            <summary>Gets whether the precision facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
            <summary>Gets or sets the precision of this property.</summary>
            <returns>The precision of this property.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
            <summary>Gets whether the scale facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
            <summary>Gets or sets the scale of this property.</summary>
            <returns>The scale of this property.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
            <summary>
            Class for representing an entity container
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> object by using the specified name for the entity set.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> object that represents the entity set that has the specified name.
            </returns>
            <param name="name">The name of the entity set that is searched for.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> object by using the specified name for the entity set.
            </summary>
            <returns>true if there is an entity set that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the entity set that is searched for.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="entitySet">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> object. If there is no entity set, this output parameter contains null.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> object by using the specified name for the relationship set.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> object that represents the relationship set that has the specified name.
            </returns>
            <param name="name">The name of the relationship set that is searched for.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> object by using the specified name for the relationship set.
            </summary>
            <returns>true if there is a relationship set that matches the search criteria; otherwise, false. </returns>
            <param name="name">The name of the relationship set that is searched for.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="relationshipSet">
            When this method returns, contains a <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> object.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
            <summary>
            Returns the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
            <summary>Removes a specific entity set from the container.</summary>
            <param name="entitySetBase">The entity set to remove.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>
            Adds a function import to the container.
            </summary>
            <param name="function">The function import to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            The factory method for constructing the EntityContainer object.
            </summary>
            <param name="name">The name of the entity container to be created.</param>
            <param name="dataSpace">DataSpace in which this entity container belongs to.</param>
            <param name="entitySets">Entity sets that will be included in the new container. Can be null.</param>
            <param name="functionImports">Functions that will be included in the new container. Can be null.</param>
            <param name="metadataProperties">Metadata properties to be associated with the instance.</param>
            <returns>The EntityContainer object.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the name argument is null or empty string.</exception>
            <remarks>The newly created EntityContainer will be read only.</remarks>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
            <summary>
            Gets the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
            <summary>
            Gets a list of entity sets and association sets that this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />
            includes.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> object that contains a list of entity sets and association sets that this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />
            includes.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
            <summary> Gets the association sets for this entity container. </summary>
            <returns> The association sets for this entity container .</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
            <summary> Gets the entity sets for this entity container. </summary>
            <returns> The entity sets for this entity container .</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
            <summary>
            Specifies a collection of <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> elements. Each function contains the details of a stored procedure that exists in the database or equivalent CommandText that is mapped to an entity and its properties.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />
            elements.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
            <summary>
            Represents a particular usage of a structure defined in EntityType. In the conceptual-model, this represents a set that can 
            query and persist entities. In the store-model it represents a table. 
            From a store-space model-convention it can be used to configure
            table name with <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table"/> property and table schema with <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema"/> property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            The factory method for constructing the EntitySet object.
            </summary>
            <param name="name">The name of the EntitySet.</param>
            <param name="schema">The db schema. Can be null.</param>
            <param name="table">The db table. Can be null.</param>
            <param name="definingQuery">
            The provider specific query that should be used to retrieve data for this EntitySet. Can be null.
            </param>
            <param name="entityType">The entity type of the entities that this entity set type contains.</param>
            <param name="metadataProperties">
            Metadata properties that will be added to the newly created EntitySet. Can be null.
            </param>
            <returns>The EntitySet object.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the name argument is null or empty string.</exception>
            <remarks>The newly created EntitySet will be read only.</remarks>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
            <summary>
            Gets the entity type of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> object that represents the entity type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
            <summary>
            Represents an enumeration member.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
            <summary> Overriding System.Object.ToString to provide better String representation for this type. </summary>
            <returns>The name of this enumeration member.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only EnumMember instance.
            </summary>
            <param name="name">The name of the enumeration member.</param>
            <param name="value">The value of the enumeration member.</param>
            <param name="metadataProperties">Metadata properties to be associated with the enumeration member.</param>
            <returns>The newly created EnumMember instance.</returns>
            <exception cref="T:System.ArgumentException">name is null or empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only EnumMember instance.
            </summary>
            <param name="name">The name of the enumeration member.</param>
            <param name="value">The value of the enumeration member.</param>
            <param name="metadataProperties">Metadata properties to be associated with the enumeration member.</param>
            <returns>The newly created EnumMember instance.</returns>
            <exception cref="T:System.ArgumentException">name is null or empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only EnumMember instance.
            </summary>
            <param name="name">The name of the enumeration member.</param>
            <param name="value">The value of the enumeration member.</param>
            <param name="metadataProperties">Metadata properties to be associated with the enumeration member.</param>
            <returns>The newly created EnumMember instance.</returns>
            <exception cref="T:System.ArgumentException">name is null or empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only EnumMember instance.
            </summary>
            <param name="name">The name of the enumeration member.</param>
            <param name="value">The value of the enumeration member.</param>
            <param name="metadataProperties">Metadata properties to be associated with the enumeration member.</param>
            <returns>The newly created EnumMember instance.</returns>
            <exception cref="T:System.ArgumentException">name is null or empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a read-only EnumMember instance.
            </summary>
            <param name="name">The name of the enumeration member.</param>
            <param name="value">The value of the enumeration member.</param>
            <param name="metadataProperties">Metadata properties to be associated with the enumeration member.</param>
            <returns>The newly created EnumMember instance.</returns>
            <exception cref="T:System.ArgumentException">name is null or empty.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
            <summary> Gets the kind of this type. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
            <summary> Gets the name of this enumeration member. </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
            <summary> Gets the value of this enumeration member. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
            <summary>
            Class for representing a Facet object
            This object is Immutable (not just set to readonly) and
            some parts of the system are depending on that behavior
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
            <summary>
            Returns the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
            <summary>
            Gets the description of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> object that represents the description of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
            <summary>
            Gets the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
            <summary>
            Gets the type of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that represents the type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
            <summary>
            Gets the value of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet"/>.
            </summary>
            <returns>
            The value of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Facet instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
            <summary>Gets a value indicating whether the value of the facet is unbounded.</summary>
            <returns>true if the value of the facet is unbounded; otherwise, false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
            <summary>
            Class for representing a FacetDescription object
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
            <summary>Returns the name of this facet. </summary>
            <returns>The name of this facet.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
            <summary>Gets the name of this facet.</summary>
            <returns>The name of this facet.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
            <summary>Gets the type of this facet.</summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that represents the type of this facet.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
            <summary>Gets the minimum value for this facet.</summary>
            <returns>The minimum value for this facet.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
            <summary>Gets the maximum value for this facet.</summary>
            <returns>The maximum value for this facet.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
            <summary>Gets the default value of a facet with this facet description.</summary>
            <returns>The default value of a facet with this facet description.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
            <summary>Gets a value indicating whether the value of this facet is a constant.</summary>
            <returns>true if this facet is a constant; otherwise, false. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
            <summary>Gets a value indicating whether this facet is a required facet.</summary>
            <returns>true if this facet is a required facet; otherwise, false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
            <summary>
            Class representing a function parameter
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
            <summary>
            Returns the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
            <summary>
            The factory method for constructing the <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter"/> object.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="edmType">The EdmType of the parameter.</param>
            <param name="parameterMode">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode"/> of the parameter.
            </param>
            <returns>
            A new, read-only instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction"/> type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
            <summary>
            Gets the mode of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter"/>.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode"/> values.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the FunctionParameter instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
            <summary>
            Gets the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
            <summary>
            Gets the instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> class that contains both the type of the parameter and facets for the type.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object that contains both the type of the parameter and facets for the type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
            <summary>Gets the type name of this parameter.</summary>
            <returns>The type name of this parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
            <summary>Gets whether the max length facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
            <summary>Gets the maximum length of the parameter.</summary>
            <returns>The maximum length of the parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
            <summary>Gets whether the parameter uses the maximum length supported by the database provider.</summary>
            <returns>true if parameter uses the maximum length supported by the database provider; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
            <summary>Gets whether the precision facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
            <summary>Gets the precision value of the parameter.</summary>
            <returns>The precision value of the parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
            <summary>Gets whether the scale facet is constant for the database provider.</summary>
            <returns>true if the facet is constant; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
            <summary>Gets the scale value of the parameter.</summary>
            <returns>The scale value of the parameter.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> on which this parameter is declared.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> object that represents the function on which this parameter is declared.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
            <summary>
            Class representing a metadata attribute for an item
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
            <summary>
            The factory method for constructing the MetadataProperty object.
            </summary>
            <param name="name">The name of the metadata property.</param>
            <param name="typeUsage">The type usage of the metadata property.</param>
            <param name="value">The value of the metadata property.</param>
            <returns>The MetadataProperty object.</returns>
            <exception cref="T:System.NullReferenceException">
            Thrown <paramref name="typeUsage"/> is <c>null</c>.
            </exception>
            <remarks>The newly created MetadataProperty will be read only.</remarks>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
            <summary>
            Gets the name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.
            </summary>
            <returns>
            The name of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
            <summary>
            Gets the value of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/>.
            </summary>
            <returns>
            The value of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the MetadataProperty instance is in readonly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
            <summary>
            Gets the instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> class that contains both the type of this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/>
            and facets for the type.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/> object that contains both the type of this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty"/>
            and facets for the type.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the MetadataProperty instance is in readonly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
            <summary>
            Gets the value of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.
            </summary>
            <returns>
            The value of this <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
            <summary>
            Gets a boolean that indicates whether the metadata property is an annotation.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
            <summary>
            Represent the edm navigation property class
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
            <summary>
            Where the given navigation property is on the dependent end of a referential constraint,
            returns the foreign key properties. Otherwise, returns an empty set. We will return the members in the order
            of the principal end key properties.
            </summary>
            <returns>A collection of the foreign key properties.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            Creates a NavigationProperty instance from the specified parameters.
            </summary>
            <param name="name">The name of the navigation property.</param>
            <param name="typeUsage">Specifies the navigation property type and its facets.</param>
            <param name="relationshipType">The relationship type for the navigation.</param>
            <param name="from">The source end member in the navigation.</param>
            <param name="to">The target end member in the navigation.</param>
            <param name="metadataProperties">The metadata properties of the navigation property.</param>
            <returns>The newly created NavigationProperty instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
            <summary>Gets the relationship type that this navigation property operates on.</summary>
            <returns>The relationship type that this navigation property operates on.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the NavigationProperty instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
            <summary>Gets the "to" relationship end member of this navigation.</summary>
            <returns>The "to" relationship end member of this navigation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the NavigationProperty instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
            <summary>Gets the "from" relationship end member in this navigation.</summary>
            <returns>The "from" relationship end member in this navigation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the NavigationProperty instance is in ReadOnly state</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
            <summary>
            Represents the list of possible actions for delete operation
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
            <summary>
            no action
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
            <summary>
            Cascade to other ends
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
            <summary>
            The enumeration defining the mode of a parameter
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
            <summary>
            In parameter
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
            <summary>
            Out parameter
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
            <summary>
            Both in and out parameter
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
            <summary>
            Return Parameter
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
            <summary>
            Class representing a primitive type
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
            <summary>
            Returns the equivalent <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </summary>
            <remarks>
            For example if this instance is nvarchar and it's
            base type is Edm String then the return type is Edm String.
            If the type is actually already a model type then the
            return type is "this".
            </remarks>        
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that is an equivalent of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
            <summary>Returns the list of primitive types.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
            Returns the equivalent <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> of a
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that is an equivalent of a specified
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </returns>
            <param name="primitiveTypeKind">
            A value of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.
            </param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> enumeration value that indicates a primitive type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> enumeration value that indicates a primitive type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
            <summary>
            Gets the list of facet descriptions for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
            <summary>
            Returns an equivalent common language runtime (CLR) type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            . Note that the
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" />
            property always returns a non-nullable type value.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> object that represents an equivalent common language runtime (CLR) type of this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
            <summary>
            Primitive Types as defined by EDM
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
            <summary>
            Binary Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
            <summary>
            Boolean Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
            <summary>
            Byte Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
            <summary>
            DateTime Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
            <summary>
            Decimal Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
            <summary>
            Double Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
            <summary>
            Guid Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
            <summary>
            Single Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
            <summary>
            SByte Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
            <summary>
            Int16 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
            <summary>
            Int32 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
            <summary>
            Int64 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
            <summary>
            String Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
            <summary>
            Time Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
            <summary>
            DateTimeOffset Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
            <summary>
            Geometry Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
            <summary>
            Geography Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
            <summary>
            Geometric point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
            <summary>
            Geometric linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
            <summary>
            Geometric polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
            <summary>
            Geometric multi-point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
            <summary>
            Geometric multi-linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
            <summary>
            Geometric multi-polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
            <summary>
            Geometric collection type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
            <summary>
            Geographic point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
            <summary>
            Geographic linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
            <summary>
            Geographic polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
            <summary>
            Geographic multi-point type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
            <summary>
            Geographic multi-linestring type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
            <summary>
            Geographic multi-polygon type kind
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
            <summary>
            Geographic collection type kind
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
            <summary>
            This class represents a referential constraint between two entities specifying the "to" and "from" ends of the relationship.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
            <summary>
            Constructs a new constraint on the relationship
            </summary>
            <param name="fromRole"> role from which the relationship originates </param>
            <param name="toRole"> role to which the relationship is linked/targeted to </param>
            <param name="fromProperties"> properties on entity type of to role which take part in the constraint </param>
            <param name="toProperties"> properties on entity type of from role which take part in the constraint </param>
            <exception cref="T:System.ArgumentNullException">Argument Null exception if any of the arguments is null</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
            <summary>
            Returns the combination of the names of the
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" />
            and the
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />
            .
            </summary>
            <returns>
            The combination of the names of the
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" />
            and the
            <see
                cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
            <summary>
            Gets the "from role" that takes part in this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint"/>
            .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember"/> object that represents the "from role" that takes part in this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint"/>
            .
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if value passed into setter is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the ReferentialConstraint instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
            <summary>
            Gets the "to role" that takes part in this <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint"/>.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember"/> object that represents the "to role" that takes part in this
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint"/>
            .
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if value passed into setter is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the ReferentialConstraint instance is in ReadOnly state</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
            <summary>
            Gets the list of properties for the "from role" on which this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />
            is defined.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for "from role" on which this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />
            is defined.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
            <summary>
            Gets the list of properties for the "to role" on which this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />
            is defined.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for the "to role" on which this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />
            is defined.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
            <summary>
            Class representing a ref type
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
            <summary>
            Gets the entity type referenced by this <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> object that represents the entity type referenced by this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />
            .
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
            <summary>
            Represents the multiplicity information about the end of a relationship type
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
            <summary>
            Lower Bound is Zero and Upper Bound is One
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
            <summary>
            Both lower bound and upper bound is one
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
            <summary>
            Lower bound is zero and upper bound is null
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
            <summary>
            Represents the Edm Row Type
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
            <summary>
            The factory method for constructing the <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType"/> object.
            </summary>
            <param name="properties">Properties of the row type object.</param>
            <param name="metadataProperties">Metadata properties that will be added to the function. Can be null.</param>
            <returns>
            A new, read-only instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType"/> object.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
            <summary>
            Gets the list of properties on this <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties on this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
            <summary>Gets a collection of the properties defined by the current type.</summary>
            <returns>A collection of the properties defined by the current type.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
            <summary>
            Class representing a type information for an item
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
            <summary>
            Factory method for creating a TypeUsage with specified EdmType and facets
            </summary>
            <param name="edmType"> EdmType for which to create a type usage </param>
            <param name="facets"> facets to be copied into the new TypeUsage </param>
            <returns> new TypeUsage instance </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object with the specified conceptual model type.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object with the default facet values for the specified
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            .
            </returns>
            <param name="edmType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to describe a string type by using the specified facet values.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object describing a string type by using the specified facet values.
            </returns>
            <param name="primitiveType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
            <param name="isUnicode">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
            <param name="isFixedLength">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
            <param name="maxLength">true to set the length of the string type to fixed; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to describe a string type by using the specified facet values and unbounded MaxLength.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object describing a string type by using the specified facet values and unbounded MaxLength.
            </returns>
            <param name="primitiveType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
            <param name="isUnicode">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
            <param name="isFixedLength">true to set the length of the string type to fixed; otherwise, false</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to describe a binary type by using the specified facet values.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object describing a binary type by using the specified facet values.
            </returns>
            <param name="primitiveType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
            <param name="isFixedLength">true to set the length of the binary type to fixed; otherwise, false.</param>
            <param name="maxLength">The maximum length of the binary type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to describe a binary type by using the specified facet values.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object describing a binary type by using the specified facet values.
            </returns>
            <param name="primitiveType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
            <param name="isFixedLength">true to set the length of the binary type to fixed; otherwise, false. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
            <summary>
            Creates a <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> object of the type that the parameters describe.
            </summary>
            <returns>
            A <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> object.
            </returns>
            <param name="primitiveType">
            The simple type that defines the units of measurement of the <see cref="T:System." />DateTime object.
            </param>
            <param name="precision">
            The degree of granularity of the <see cref="T:System." />DateTimeOffset in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
            <summary>
            Creates a <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> object of the type that the parameters describe.
            </summary>
            <returns>
            A <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> object.
            </returns>
            <param name="primitiveType">The simple type that defines the units of measurement of the offset.</param>
            <param name="precision">
            The degree of granularity of the <see cref="T:System." />DateTimeOffset in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
            <summary>
            Creates a <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> object of the type that the parameters describe.
            </summary>
            <returns>
            A <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> object.
            </returns>
            <param name="primitiveType">
            The simple type that defines the units of measurement of the <see cref="T:System." />DateTime object.
            </param>
            <param name="precision">
            The degree of granularity of the <see cref="T:System." />DateTimeOffset in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to describe a decimal type by using the specified facet values.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object describing a decimal type by using the specified facet values.
            </returns>
            <param name="primitiveType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
            <param name="precision">
            The precision of the decimal type as type <see cref="T:System.Byte" />.
            </param>
            <param name="scale">
            The scale of the decimal type as type <see cref="T:System.Byte" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to describe a decimal type with unbounded precision and scale facet values.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object describing a decimal type with unbounded precision and scale facet values.
            </returns>
            <param name="primitiveType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> for which the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            object is created.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
            <summary>
            Checks whether this <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> is a subtype of the specified
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            .
            </summary>
            <returns>
            true if this <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> is a subtype of the specified
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            ; otherwise, false.
            </returns>
            <param name="typeUsage">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> object to be checked.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
            <summary>
            Returns the full name of the type described by this <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.
            </summary>
            <returns>
            The full name of the type described by this <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> as string.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
            <summary>
            Gets the built-in type kind for this <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
            <summary>
            Gets the type information described by this <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object that represents the type information described by this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
            <summary>
            Gets the list of facets for the type that is described by this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            .
            </summary>
            <returns>
            A collection of type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of facets for the type that is described by this
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
            <summary>
            Returns a Model type usage for a provider type
            </summary>
            <value> Model (CSpace) type usage </value>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoader.ExtensionCheck.None">
            <summary>
            Do not perform any extension check
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoader.ExtensionCheck.Specific">
            <summary>
            Check the extension against a specific value
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.MetadataArtifactLoader.ExtensionCheck.All">
            <summary>
            Check the extension against the set of acceptable extensions
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
            <summary>
            Runtime Metadata Workspace
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
            <summary>
            Constructs a <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace"/> with loaders for all item collections (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection"/>)
            needed by EF except the o/c mapping which will be created automatically based on the given o-space and c-space
            loaders. The item collection delegates are executed lazily when a given collection is used for the first
            time. It is acceptable to pass a delegate that returns null if the collection will never be used, but this
            is rarely done, and any attempt by EF to use the collection in such cases will result in an exception.
            </summary>
            <param name="cSpaceLoader">Delegate to return the c-space (CSDL) item collection.</param>
            <param name="sSpaceLoader">Delegate to return the s-space (SSDL) item collection.</param>
            <param name="csMappingLoader">Delegate to return the c/s mapping (MSL) item collection.</param>
            <param name="oSpaceLoader">Delegate to return the o-space item collection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
            <summary>
            Constructs a <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace"/> with loaders for all item collections (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection"/>)
            that come from traditional EDMX mapping. Default o-space and o/c mapping collections will be used.
            The item collection delegates are executed lazily when a given collection is used for the first
            time. It is acceptable to pass a delegate that returns null if the collection will never be used, but this
            is rarely done, and any attempt by EF to use the collection in such cases will result in an exception.
            </summary>
            <param name="cSpaceLoader">Delegate to return the c-space (CSDL) item collection.</param>
            <param name="sSpaceLoader">Delegate to return the s-space (SSDL) item collection.</param>
            <param name="csMappingLoader">Delegate to return the c/s mapping (MSL) item collection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> class using the specified paths and assemblies.
            </summary>
            <param name="paths">The paths to workspace metadata.</param>
            <param name="assembliesToConsider">The names of assemblies used to construct workspace.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
            <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" /> configured to use the
            <see
                cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" />
            data space.
            </summary>
            <returns>The created parser object.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree"/> bound to this metadata workspace based on the specified query expression.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree"/> with the specified expression as it's
            <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query"/>
            property.
            </returns>
            <param name="query">
            A <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression"/> that defines the query.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If
            <paramref name="query"/>
            is null
            </exception>
            <exception cref="T:System.ArgumentException">
            If
            <paramref name="query"/>
            contains metadata that cannot be resolved in this metadata workspace
            </exception>
            <exception cref="T:System.ArgumentException">
            If
            <paramref name="query"/>
            is not structurally valid because it contains unresolvable variable references
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>
            Gets <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> items.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> items.
            </returns>
            <param name="dataSpace">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" /> from which to retrieve items.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
            <summary>Registers the item collection with each associated data model.</summary>
            <param name="collection">The output parameter collection that needs to be filled up.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
            <summary>Loads metadata from the given assembly.</summary>
            <param name="assembly">The assembly from which the metadata will be loaded.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
            <summary>Loads metadata from the given assembly.</summary>
            <param name="assembly">The assembly from which the metadata will be loaded.</param>
            <param name="logLoadMessage">The delegate for logging the load messages.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>Returns an item by using the specified identity and the data model.</summary>
            <returns>The item that matches the given identity in the specified data model.</returns>
            <param name="identity">The identity of the item.</param>
            <param name="dataSpace">The conceptual model in which the item is searched.</param>
            <typeparam name="T">The type returned by the method.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
            <summary>Returns an item by using the specified identity and the data model.</summary>
            <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
            <param name="identity">The conceptual model on which the item is searched.</param>
            <param name="space">The conceptual model on which the item is searched.</param>
            <param name="item">
            When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> object. This parameter is passed uninitialized.
            </param>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>Returns an item by using the specified identity and the data model.</summary>
            <returns>The item that matches the given identity in the specified data model.</returns>
            <param name="identity">The identity of the item.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="dataSpace">The conceptual model on which the item is searched.</param>
            <typeparam name="T">The type returned by the method.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
            <summary>Returns an item by using the specified identity and the data model.</summary>
            <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
            <param name="identity">The conceptual model on which the item is searched.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="dataSpace">The conceptual model on which the item is searched.</param>
            <param name="item">
            When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> object. This parameter is passed uninitialized.
            </param>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>Gets all the items in the specified data model.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains all the items in the specified data model.
            </returns>
            <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
            <typeparam name="T">The type returned by the method.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType"/> object by using the specified type name, namespace name, and data model.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType"/> object that represents the type that matches the given type name and the namespace name in the specified data model. If there is no matched type, this method returns null.
            </returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="dataSpace">The conceptual model on which the type is searched.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="dataSpace">The conceptual model on which the type is searched.</param>
            <param name="type">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType"/> object by using the specified type name, namespace name, and data model.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType"/> object.
            </returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="dataSpace">The conceptual model on which the type is searched.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the type.</param>
            <param name="namespaceName">The namespace of the type.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="dataSpace">The conceptual model on which the type is searched.</param>
            <param name="type">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> object. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer"/> object by using the specified entity container name and the data model.
            </summary>
            <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.
            </summary>
            <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
            <param name="entityContainer">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer"/> object by using the specified entity container name and the data model.
            </summary>
            <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.
            </summary>
            <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
            <param name="name">The name of the entity container.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
            <param name="entityContainer">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>Returns all the overloads of the functions by using the specified name, namespace name, and data model.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains all the functions that match the specified name in a given namespace and a data model.
            </returns>
            <param name="name">The name of the function.</param>
            <param name="namespaceName">The namespace of the function.</param>
            <param name="dataSpace">The conceptual model in which the functions are searched.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
            <summary>Returns all the overloads of the functions by using the specified name, namespace name, and data model.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains all the functions that match the specified name in a given namespace and a data model.
            </returns>
            <param name="name">The name of the function.</param>
            <param name="namespaceName">The namespace of the function.</param>
            <param name="dataSpace">The conceptual model in which the functions are searched.</param>
            <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>Returns the list of primitive types in the specified data model.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains all the primitive types in the specified data model.
            </returns>
            <param name="dataSpace">The data model for which you need the list of primitive types.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
            <summary>Gets all the items in the specified data model.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains all the items in the specified data model.
            </returns>
            <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
            <exception cref="T:System.ArgumentException">Thrown if the space is not a valid space. Valid space is either C, O, CS or OCSpace</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
            <summary>
            Tests the retrieval of <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.
            </summary>
            <returns>true if the retrieval was successful; otherwise, false.</returns>
            <param name="dataSpace">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" /> from which to attempt retrieval of
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />
            .
            </param>
            <param name="collection">When this method returns, contains the item collection. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the object space type that matches the type supplied by the parameter  edmSpaceType .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the Object space type. If there is no matched type, this method returns null.
            </returns>
            <param name="edmSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object via the out parameter  objectSpaceType  that represents the type that matches the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            supplied by the parameter  edmSpaceType .
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="edmSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            .
            </param>
            <param name="objectSpaceType">
            When this method returns, contains a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the Object space type. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the object space type that matches the type supplied by the parameter  edmSpaceType .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the Object space type. If there is no matched type, this method returns null.
            </returns>
            <param name="edmSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object via the out parameter  objectSpaceType  that represents the type that matches the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            supplied by the parameter  edmSpaceType .
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="edmSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            .
            </param>
            <param name="objectSpaceType">
            When this method returns, contains a <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object that represents the Object space type. This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            that matches the type supplied by the parameter  objectSpaceType .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            . If there is no matched type, this method returns null.
            </returns>
            <param name="objectSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> that supplies the type in the object space.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object via the out parameter  edmSpaceType  that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            that matches the type supplied by the parameter  objectSpaceType .
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="objectSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the object space type.
            </param>
            <param name="edmSpaceType">
            When this method returns, contains a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            . This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            that matches the type supplied by the parameter  objectSpaceType .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            . If there is no matched type, this method returns null.
            </returns>
            <param name="objectSpaceType">
            A <see cref="T:System.Data.Metadata.Edm.EnumlType" /> that supplies the type in the object space.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object via the out parameter  edmSpaceType  that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            that matches the type supplied by the parameter  objectSpaceType .
            </summary>
            <returns>true on success, false on failure.</returns>
            <param name="objectSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object that represents the object space type.
            </param>
            <param name="edmSpaceType">
            When this method returns, contains a <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> object that represents the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />
            . This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
            <summary>Clears all the metadata cache entries.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
            <summary>Gets original value members from an entity set and entity type.</summary>
            <returns>The original value members from an entity set and entity type.</returns>
            <param name="entitySet">The entity set from which to retrieve original values.</param>
            <param name="entityType">The entity type of which to retrieve original values.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
            <summary>
            Returns members of a given <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />/
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />
            for which original values are needed when modifying an entity.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />s for which original value is required.
            </returns>
            <param name="entitySet">
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> belonging to the C-Space.
            </param>
            <param name="entityType">
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> that participates in the given
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            .
            </param>
            <param name="partialUpdateSupported">true if entities may be updated partially; otherwise, false.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
            <summary>
            The Max EDM version thats going to be supported by the runtime.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
            <summary>
            Class for representing a collection of items for the object layer.
            Most of the implementation for actual maintenance of the collection is
            done by ItemCollection
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
            <summary>Loads metadata from the given assembly.</summary>
            <param name="assembly">The assembly from which the metadata will be loaded.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
            <summary>Loads metadata from the given assembly.</summary>
            <param name="assembly">The assembly from which the metadata will be loaded.</param>
            <param name="edmItemCollection">The EDM metadata source for the O space metadata.</param>
            <param name="logLoadMessage">The delegate to which log messages are sent.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
            <summary>Loads metadata from the specified assembly.</summary>
            <param name="assembly">The assembly from which the metadata will be loaded.</param>
            <param name="edmItemCollection">The EDM metadata source for the O space metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
            <summary>Returns a collection of primitive type objects.</summary>
            <returns>A collection of primitive type objects.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
            <summary>
            Returns the CLR type that corresponds to the <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> supplied by the objectSpaceType parameter.
            </summary>
            <returns>The CLR type of the OSpace argument.</returns>
            <param name="objectSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> that represents the object space type.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
            <summary>
            Returns a CLR type corresponding to the <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> supplied by the objectSpaceType parameter.
            </summary>
            <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
            <param name="objectSpaceType">
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> that represents the object space type.
            </param>
            <param name="clrType">The CLR type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
            <summary> The method returns the underlying CLR type for the specified OSpace type argument. If the DataSpace of the parameter is not OSpace, an ArgumentException is thrown. </summary>
            <returns>The CLR type of the OSpace argument.</returns>
            <param name="objectSpaceType">The OSpace type to look up.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
            <summary>Returns the underlying CLR type for the specified OSpace enum type argument. If the DataSpace of the parameter is not OSpace, the method returns false and sets the out parameter to null. </summary>
            <returns>true on success, false on failure</returns>
            <param name="objectSpaceType">The OSpace enum type to look up</param>
            <param name="clrType">The CLR enum type of the OSpace argument</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
            <summary>Returns all the items of the specified type from this item collection.</summary>
            <returns>
            A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all items of the specified type.
            </returns>
            <typeparam name="T">The type returned by the method.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
            <summary>
            The enumeration defining the type semantics used to resolve function overloads.
            These flags are defined in the provider manifest per function definition.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
            <summary>
            Allow Implicit Conversion between given and formal argument types (default).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
            <summary>
            Allow Type Promotion between given and formal argument types.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
            <summary>
            Use strict Equivalence only.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
            <summary>
            Class for representing a collection of items in Store space.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> class using the specified XMLReader.
            </summary>
            <param name="xmlReaders">The XMLReader used to create metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
            <summary>Initializes a new instances of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> class.</summary>
            <param name="model">The model of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> class using the specified file paths.
            </summary>
            <param name="filePaths">The file paths used to create metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
            <summary>
            Returns a collection of the <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> objects.
            </summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> object that represents the collection of the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />
            objects.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
            <summary>
            Factory method that creates a <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection"/>.
            </summary>
            <param name="xmlReaders">
            SSDL artifacts to load. Must not be <c>null</c>.
            </param>
            <param name="filePaths">
            Paths to SSDL artifacts. Used in error messages. Can be <c>null</c> in which case
            the base Uri of the XmlReader will be used as a path.
            </param>
            <param name="resolver">
            Custom resolver. Currently used to resolve DbProviderServices implementation. If <c>null</c>
            the default resolver will be used.
            </param>
            <param name="errors">
            The collection of errors encountered while loading.
            </param>
            <returns>
            <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection"/> instance if no errors encountered. Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
            <summary>Gets the provider factory of the StoreItemCollection.</summary>
            <returns>The provider factory of the StoreItemCollection.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
            <summary>Gets the provider manifest of the StoreItemCollection.</summary>
            <returns>The provider manifest of the StoreItemCollection.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
            <summary>Gets the manifest token of the StoreItemCollection.</summary>
            <returns>The manifest token of the StoreItemCollection.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
            <summary>Gets the invariant name of the StoreItemCollection.</summary>
            <returns>The invariant name of the StoreItemCollection.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
            <summary>Gets the version of the store schema for this collection.</summary>
            <returns>The version of the store schema for this collection.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
            <summary>
            This exception is thrown when a requested object is not found in the store.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> with a specialized error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> class that uses a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
            <summary>
            Caches an ELinq query
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`17" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg10  must be a primitive type.</typeparam>
            <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg11  must be a primitive type.</typeparam>
            <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg12  must be a primitive type.</typeparam>
            <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg13  must be a primitive type.</typeparam>
            <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg14  must be a primitive type.</typeparam>
            <typeparam name="TArg15">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg15  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`16" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg10  must be a primitive type.</typeparam>
            <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg11  must be a primitive type.</typeparam>
            <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg12  must be a primitive type.</typeparam>
            <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg13  must be a primitive type.</typeparam>
            <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg14  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`15" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg10  must be a primitive type.</typeparam>
            <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg11  must be a primitive type.</typeparam>
            <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg12  must be a primitive type.</typeparam>
            <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg13  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`14" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg10  must be a primitive type.</typeparam>
            <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg11  must be a primitive type.</typeparam>
            <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg12  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`13" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg10  must be a primitive type.</typeparam>
            <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg11  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`12" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg10  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`11" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg9  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`10" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg8  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`9" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg7  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`8" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg6  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`7" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg5  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`6" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg4  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`5" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg3  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`4" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1  must be a primitive type.</typeparam>
            <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg2  must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`3" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method.  TArg1 must be a primitive type.</typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
            method.
            </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
            <returns>
            <see cref="T:System.Func`2" />, a generic delegate that represents the compiled LINQ to Entities query.
            </returns>
            <param name="query">The lambda expression to compile.</param>
            <typeparam name="TArg0">
            A type derived from <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </typeparam>
            <typeparam name="TResult">
            The type  T  of the query results returned by executing the delegate returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
            method.
            </typeparam>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
            <summary>
            The values currently assigned to the properties of an entity.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
            <summary>
            Provides access to the original values of object data. The DbUpdatableDataRecord implements methods that allow updates to the original values of an object.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
            <summary>Retrieves the field value as a Boolean.</summary>
            <returns>The field value as a Boolean.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
            <summary>Retrieves the field value as a byte.</summary>
            <returns>The field value as a byte.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>Retrieves the field value as a byte array.</summary>
            <returns>The number of bytes copied.</returns>
            <param name="i">The ordinal of the field.</param>
            <param name="dataIndex">The index at which to start copying data.</param>
            <param name="buffer">The destination buffer where data is copied.</param>
            <param name="bufferIndex">The index in the destination buffer where copying will begin.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
            <summary>Retrieves the field value as a char.</summary>
            <returns>The field value as a char.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>Retrieves the field value as a char array.</summary>
            <returns>The number of characters copied.</returns>
            <param name="i">The ordinal of the field.</param>
            <param name="dataIndex">The index at which to start copying data.</param>
            <param name="buffer">The destination buffer where data is copied.</param>
            <param name="bufferIndex">The index in the destination buffer where copying will begin.</param>
            <param name="length">The number of characters to copy.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Retrieves the field value as an <see cref="T:System.Data.IDataReader" />.
            </summary>
            <returns>
            The field value as an <see cref="T:System.Data.IDataReader" />.
            </returns>
            <param name="ordinal">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
            <summary>
            Retrieves the field value as a <see cref="T:System.Common.DbDataReader" />
            </summary>
            <returns>
            The field value as a <see cref="T:System.Data.Common.DbDataReader" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
            <summary>Retrieves the name of the field data type.</summary>
            <returns>The name of the field data type.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
            <summary>
            Retrieves the field value as a <see cref="T:System.DateTime" />.
            </summary>
            <returns>
            The field value as a <see cref="T:System.DateTime" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
            <summary>Retrieves the field value as a decimal.</summary>
            <returns>The field value as a decimal.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
            <summary>Retrieves the field value as a double.</summary>
            <returns>The field value as a double.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
            <summary>Retrieves the type of a field.</summary>
            <returns>The field type.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
            <summary>Retrieves the field value as a float.</summary>
            <returns>The field value as a float.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
            <summary>
            Retrieves the field value as a <see cref="T:System.Guid" />.
            </summary>
            <returns>
            The field value as a <see cref="T:System.Guid" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
            <summary>
            Retrieves the field value as an <see cref="T:System.Int16" />.
            </summary>
            <returns>
            The field value as an <see cref="T:System.Int16" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
            <summary>
            Retrieves the field value as an <see cref="T:System.Int32" />.
            </summary>
            <returns>
            The field value as an <see cref="T:System.Int32" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
            <summary>
            Retrieves the field value as an <see cref="T:System.Int64" />.
            </summary>
            <returns>
            The field value as an <see cref="T:System.Int64" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
            <summary>Retrieves the name of a field.</summary>
            <returns>The name of the field.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
            <summary>Retrieves the ordinal of a field by using the name of the field.</summary>
            <returns>The ordinal of the field.</returns>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
            <summary>Retrieves the field value as a string.</summary>
            <returns>The field value.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
            <summary>Retrieves the value of a field.</summary>
            <returns>The field value.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
            <summary>Retrieves the value of a field.</summary>
            <returns>The field value.</returns>
            <param name="ordinal">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
            <summary>Populates an array of objects with the field values of the current record.</summary>
            <returns>The number of field values returned.</returns>
            <param name="values">An array of objects to store the field values.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
            <summary>
            Returns whether the specified field is set to <see cref="T:System.DBNull" />.
            </summary>
            <returns>
            true if the field is set to <see cref="T:System.DBNull" />; otherwise false.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
            <summary>Sets field values in a record.</summary>
            <returns>The number of the fields that were set.</returns>
            <param name="values">The values of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
            <summary>
            Sets a field to the <see cref="T:System.DBNull" /> value.
            </summary>
            <param name="ordinal">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
            <summary>
            Retrieves a field value as a <see cref="T:System.Data.Common.DbDataRecord" />.
            </summary>
            <returns>
            A field value as a <see cref="T:System.Data.Common.DbDataRecord" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
            <summary>
            Retrieves the field value as a <see cref="T:System.Common.DbDataReader" />.
            </summary>
            <returns>
            The field value as a <see cref="T:System.Data.Common.DbDataReader" />.
            </returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
            <summary>Sets the value of a field in a record.</summary>
            <param name="ordinal">The ordinal of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
            <summary>Gets the number of fields in the record.</summary>
            <returns>An integer value that is the field count.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
            <summary>Returns a value that has the given field ordinal.</summary>
            <returns>The value that has the given field ordinal.</returns>
            <param name="i">The ordinal of the field.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
            <summary>Gets a value that has the given field name.</summary>
            <returns>The field value.</returns>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
            <summary>Gets data record information.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> object.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
            <summary>
            This is the interface that represent the minimum interface required
            to be an entity in ADO.NET.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
            <summary>
            This class contains the common methods need for an date object.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
            <summary>
            Public constant name used for change tracking
            Providing this definition allows users to use this constant instead of
            hard-coding the string. This helps to ensure the property name is correct
            and allows faster comparisons in places where we are looking for this specific string.
            Users can still use the case-sensitive string directly instead of the constant,
            it will just be slightly slower on comparison.
            Including the dash (-) character around the name ensures that this will not conflict with
            a real data property, because -EntityKey- is not a valid identifier name
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" /> event.
            </summary>
            <param name="property">The name of the changed property.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" /> event.
            </summary>
            <param name="property">The name of the property changing.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
            <summary>Returns the minimum date time value supported by the data source.</summary>
            <returns>
            A <see cref="T:System.DateTime" /> value that is the minimum date time that is supported by the data source.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
            <summary>Raises an event that is used to report that a property change is pending.</summary>
            <param name="property">The name of the changing property.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
            <summary>Raises an event that is used to report that a property change has occurred.</summary>
            <param name="property">The name for the changed property.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>Returns a complex type for the specified property.</summary>
            <remarks>
            Unlike most of the other helper methods in this class, this one is not static
            because it references the SetValidValue for complex objects, which is also not static
            because it needs a reference to this.
            </remarks>        
            <returns>A complex type object for the property.</returns>
            <param name="currentValue">A complex object that inherits from complex object.</param>
            <param name="property">The name of the complex property that is the complex object.</param>
            <param name="isNullable">Indicates whether the type supports null values.</param>
            <param name="isInitialized">Indicates whether the type is initialized.</param>
            <typeparam name="T">The type of the complex object being requested.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
            <summary>Determines whether the specified byte arrays contain identical values.</summary>
            <returns>true if both arrays are of the same length and contain the same byte values or if both arrays are null; otherwise, false.</returns>
            <param name="first">The first byte array value to compare.</param>
            <param name="second">The second byte array to compare.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
            <summary>Returns a copy of the current byte value.</summary>
            <returns>
            A copy of the current <see cref="T:System.Byte" /> value.
            </returns>
            <param name="currentValue">The current byte array value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Byte[]" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Byte" /> value being validated.
            </returns>
            <param name="value">The value passed into the property setter.</param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
            <exception cref="T:System.Data.ConstraintException">If value is null for a non nullable value.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
            <summary>
            Makes sure the <see cref="T:System.Byte[]" /> value being set for a property is valid.
            </summary>
            <returns>
            A <see cref="T:System.Byte" /> value being set.
            </returns>
            <param name="value">The value being set.</param>
            <param name="isNullable">Indicates whether the property is nullable.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Boolean" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Boolean" /> value being set.
            </returns>
            <param name="value">The Boolean value.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
            <summary>
            Makes sure the <see cref="T:System.Boolean" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Boolean" /> value being set.
            </returns>
            <param name="value">The Boolean value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Boolean" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Boolean" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Boolean" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
            <summary>
            Makes sure the <see cref="T:System.Boolean" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Boolean" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Boolean" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Byte" /> value being set for a property is valid.
            </summary>
            <returns>
            A <see cref="T:System.Byte" /> that is set.
            </returns>
            <param name="value">
            The <see cref="T:System.Byte" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
            <summary>
            Makes sure the <see cref="T:System.Byte" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Byte" /> value that is set.
            </returns>
            <param name="value">The value that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Byte" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Byte" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Byte" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
            <summary>
            Makes sure the <see cref="T:System.Byte" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Byte" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Byte" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
            <summary>
            Makes sure the <see cref="T:System.SByte" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.SByte" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.SByte" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
            <summary>
            Makes sure the <see cref="T:System.SByte" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.SByte" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.SByte" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
            <summary>
            Makes sure the <see cref="T:System.SByte" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.SByte" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.SByte" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
            <summary>
            Makes sure the <see cref="T:System.SByte" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.SByte" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.SByte" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
            <summary>
            Makes sure the <see cref="T:System.DateTime" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.DateTime" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.DateTime" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
            <summary>
            Makes sure the <see cref="T:System.DateTime" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.DateTime" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.DateTime" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
            <summary>
            Makes sure the <see cref="T:System.DateTime" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.DateTime" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.DateTime" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
            <summary>
            Makes sure the <see cref="T:System.DateTime" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.DateTime" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.DateTime" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
            <summary>
            Makes sure the <see cref="T:System.TimeSpan" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.TimeSpan" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.TimeSpan" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
            <summary>
            Makes sure the <see cref="T:System.TimeSpan" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.TimeSpan" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.TimeSpan" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Makes sure the <see cref="T:System.TimeSpan" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.TimeSpan" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.TimeSpan" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
            <summary>
            Makes sure the <see cref="T:System.TimeSpan" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.TimeSpan" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.TimeSpan" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
            <summary>
            Makes sure the <see cref="T:System.DateTimeOffset" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.DateTimeOffset" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.DateTimeOffset" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
            <summary>
            Makes sure the <see cref="T:System.DateTimeOffset" /> value being set for a property is valid.
            </summary>
            <returns>
            A <see cref="T:System.DateTimeOffset" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.DateTimeOffset" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Makes sure the <see cref="T:System.DateTimeOffset" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.DateTimeOffset" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.DateTimeOffset" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Makes sure the <see cref="T:System.DateTimeOffset" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.DateTimeOffset" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.DateTimeOffset" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Decimal" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Decimal" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Decimal" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
            <summary>
            Makes sure the <see cref="T:System.Decimal" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Decimal" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Decimal" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Decimal" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Decimal" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Decimal" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
            <summary>
            Makes sure the <see cref="T:System.Decimal" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Decimal" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Decimal" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Double" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Double" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Double" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
            <summary>
            Makes sure the <see cref="T:System.Double" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Double" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Double" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Double" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Double" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Double" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
            <summary>
            Makes sure the <see cref="T:System.Double" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Double" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Double" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
            <summary>Makes sure the Single value being set for a property is valid.</summary>
            <returns>
            The <see cref="T:System.Single" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Single" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
            <summary>Makes sure the Single value being set for a property is valid.</summary>
            <returns>
            The <see cref="T:System.Single" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Single" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Single" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Single" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Single" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
            <summary>
            Makes sure the <see cref="T:System.Single" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Single" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Single" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Guid" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Guid" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Guid" /> value.
            </param>
            <param name="propertyName">Name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
            <summary>
            Makes sure the <see cref="T:System.Guid" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Guid" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Guid" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Guid" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Guid" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Guid" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
            <summary>
            Makes sure the <see cref="T:System.Guid" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Guid" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Guid" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Int16" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Int16" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Int16" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
            <summary>
            Makes sure the <see cref="T:System.Int16" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Int16" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Int16" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Int16" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Int16" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Int16" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
            <summary>
            Makes sure the <see cref="T:System.Int16" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Int16" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Int16" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Int32" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Int32" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Int32" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
            <summary>
            Makes sure the <see cref="T:System.Int32" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Int32" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Int32" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Int32" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Int32" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Int32" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
            <summary>
            Makes sure the <see cref="T:System.Int32" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Int32" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Int32" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
            <summary>
            Makes sure the <see cref="T:System.Int64" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Int64" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Int64" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
            <summary>
            Makes sure the <see cref="T:System.Int64" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.Int64" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Int64" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
            <summary>
            Makes sure the <see cref="T:System.Int64" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Int64" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Int64" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
            <summary>
            Makes sure the <see cref="T:System.Int64" /> value being set for a property is valid.
            </summary>
            <returns>
            The nullable <see cref="T:System.Int64" /> value being set.
            </returns>
            <param name="value">
            The nullable <see cref="T:System.Int64" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
            <summary>
            Makes sure the <see cref="T:System.UInt16" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.UInt16" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.UInt16" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
            <summary>
            Makes sure the <see cref="T:System.UInt16" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.UInt16" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.UInt16" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
            <summary>Makes sure the UInt16 value being set for a property is valid.</summary>
            <returns>The nullable UInt16 value being set.</returns>
            <param name="value">The nullable UInt16 value.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
            <summary>Makes sure the UInt16 value being set for a property is valid.</summary>
            <returns>The nullable UInt16 value being set.</returns>
            <param name="value">The nullable UInt16 value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
            <summary>
            Makes sure the <see cref="T:System.UInt32" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.UInt32" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.UInt32" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
            <summary>
            Makes sure the <see cref="T:System.UInt32" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.UInt32" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.UInt32" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
            <summary>Makes sure the UInt32 value being set for a property is valid.</summary>
            <returns>The nullable UInt32 value being set.</returns>
            <param name="value">The nullable UInt32 value.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
            <summary>Makes sure the UInt32 value being set for a property is valid.</summary>
            <returns>The nullable UInt32 value being set.</returns>
            <param name="value">The nullable UInt32 value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
            <summary>
            Makes sure the <see cref="T:System.UInt64" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.UInt64" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.UInt64" /> value.
            </param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
            <summary>
            Makes sure the <see cref="T:System.UInt64" /> value being set for a property is valid.
            </summary>
            <returns>
            The <see cref="T:System.UInt64" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.UInt64" /> value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
            <summary>
            Makes sure the <see cref="T:System.UInt64" /> value being set for a property is valid.
            </summary>
            <returns>The nullable UInt64 value being set.</returns>
            <param name="value">The nullable UInt64 value.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
            <summary>
            Makes sure the <see cref="T:System.UInt64" /> value being set for a property is valid.
            </summary>
            <returns>The nullable UInt64 value being set.</returns>
            <param name="value">The nullable UInt64 value.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
            <summary>Validates that the property is not null, and throws if it is.</summary>
            <returns>The validated property.</returns>
            <param name="value">The string value to be checked.</param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
            <exception cref="T:System.Data.ConstraintException">The string value is null for a non-nullable string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
            <summary>Validates that the property is not null, and throws if it is.</summary>
            <returns>
            The validated <see cref="T:System.String" /> value.
            </returns>
            <param name="value">The string value to be checked.</param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
            <summary>Validates that the property is not null, and throws if it is.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value to be checked.
            </param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
            <param name="propertyName">Name of the property that is being validated.</param>
            <exception cref="T:System.Data.ConstraintException">The value is null for a non-nullable property.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
            <summary>Validates that the property is not null, and throws if it is.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value being set.
            </returns>
            <param name="value">
            <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value to be checked.
            </param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
            <exception cref="T:System.Data.ConstraintException">The value is null for a non-nullable property.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
            <summary>Validates that the property is not null, and throws if it is.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value being set.
            </returns>
            <param name="value">
            <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value to be checked.
            </param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
            <param name="propertyName">The name of the property that is being validated.</param>
            <exception cref="T:System.Data.ConstraintException">The value is null for a non-nullable property.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
            <summary>Validates that the property is not null, and throws if it is.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value being set.
            </returns>
            <param name="value">
            The <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value to be checked.
            </param>
            <param name="isNullable">Flag indicating if this property is allowed to be null.</param>
            <exception cref="T:System.Data.ConstraintException">The value is null for a non-nullable property.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
            <summary>Sets a complex object for the specified property.</summary>
            <returns>A complex type that derives from complex object.</returns>
            <param name="oldValue">The original complex object for the property, if any.</param>
            <param name="newValue">The complex object is being set.</param>
            <param name="property">The complex property that is being set to the complex object.</param>
            <typeparam name="T">The type of the object being replaced.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
            <summary>Verifies that a complex object is not null.</summary>
            <returns>The complex object being validated.</returns>
            <param name="complexObject">The complex object that is being validated.</param>
            <param name="propertyName">The complex property on the parent object that is associated with  complexObject .</param>
            <typeparam name="TComplex">The type of the complex object being verified.</typeparam>
        </member>
        <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
            <summary>
            Notification that a property has been changed.
            </summary>
            <remarks>
            The PropertyChanged event can indicate all properties on the
            object have changed by using either a null reference
            (Nothing in Visual Basic) or String.Empty as the property name
            in the PropertyChangedEventArgs.
            </remarks>
        </member>
        <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
            <summary>
            Notification that a property is about to be changed.
            </summary>
            <remarks>
            The PropertyChanging event can indicate all properties on the
            object are changing by using either a null reference
            (Nothing in Visual Basic) or String.Empty as the property name
            in the PropertyChangingEventArgs.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
            <summary>Notifies the change tracker that a property change is pending on a complex object.</summary>
            <param name="property">The name of the changing property.</param>
            <exception cref="T:System.ArgumentNullException"> property  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
            <summary>Notifies the change tracker that a property of a complex object has changed.</summary>
            <param name="property">The name of the changed property.</param>
            <exception cref="T:System.ArgumentNullException"> property  is null.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
            <summary>
            Attribute for complex properties
            Implied default AttributeUsage properties Inherited=True, AllowMultiple=False,
            The metadata system expects this and will only look at the first of each of these attributes, even if there are more.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
            <summary>
            Base attribute for properties mapped to store elements.
            Implied default AttributeUsage properties Inherited=True, AllowMultiple=False,
            The metadata system expects this and will only look at the first of each of these attributes, even if there are more.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
            <summary>
            attribute for complex types
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
            <summary>
            Base attribute for schematized types
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
            <summary>The name of the type in the conceptual schema that maps to the class to which this attribute is applied.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the name.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
            <summary>The namespace name of the entity object type or complex type in the conceptual schema that maps to this type.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the namespace name.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
            <summary>
            Attribute identifying the Edm base class
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
            <summary>
            Attribute indicating an enum type.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
            <summary>
            Attribute identifying the Ends defined for a RelationshipSet
            Implied default AttributeUsage properties Inherited=True, AllowMultiple=False,
            The metadata system expects this and will only look at the first of each of these attributes, even if there are more.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />
            class.
            </summary>
            <param name="relationshipNamespaceName">The namespace name of the relationship property.</param>
            <param name="relationshipName">The name of the relationship. The relationship name is not namespace qualified.</param>
            <param name="targetRoleName">The role name at the other end of the relationship.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
            <summary>The namespace name of the navigation property.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the namespace name.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
            <summary>Gets the unqualified relationship name. </summary>
            <returns>The relationship name.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
            <summary>Gets the role name at the other end of the relationship.</summary>
            <returns>The target role name is specified by the Role attribute of the other End element in the association that defines this relationship in the conceptual model. For more information, see Association (EDM).</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
            <summary>
            Defines a relationship between two entity types based on an association in the conceptual model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
            <summary>
            Creates an instance of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> class.
            </summary>
            <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
            <param name="relationshipName">The name of a relationship in which this entity participates. </param>
            <param name="role1Name">Name of the role for the type at one end of the association.</param>
            <param name="role1Multiplicity">
            A value of <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.
            </param>
            <param name="role1Type">The type of the entity at one end of the association.</param>
            <param name="role2Name">Name of the role for the type at the other end of the association.</param>
            <param name="role2Multiplicity">
            A value of <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.
            </param>
            <param name="role2Type">The type of the entity at the other end of the association.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />
            class.
            </summary>
            <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
            <param name="relationshipName">The name of a relationship in which this entity participates.</param>
            <param name="role1Name">Name of the role for the type at one end of the association.</param>
            <param name="role1Multiplicity">
            A value of <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.
            </param>
            <param name="role1Type">The type of the entity at one end of the association.</param>
            <param name="role2Name">Name of the role for the type at the other end of the association.</param>
            <param name="role2Multiplicity">
            A value of <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.
            </param>
            <param name="role2Type">The type of the entity at the other end of the association.</param>
            <param name="isForeignKey">A value that indicates whether the relationship is based on the foreign key value.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
            <summary>The namespace for the relationship.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the namespace for the relationship.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
            <summary>Name of the relationship. </summary>
            <returns>
            A <see cref="T:System.String" /> that is the name of a relationship that is defined by this
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
            <summary>Name of the role at one end of the relationship.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the name of the role.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
            <summary>Multiplicity at one end of the relationship.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
            <summary>Type of the entity at one end of the relationship.</summary>
            <returns>
            A <see cref="T:System.Type" /> that is the type of the object at this end of the association.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
            <summary>Name of the role at the other end of the relationship.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the name of the role.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
            <summary>Multiplicity at the other end of the relationship.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
            <summary>Type of the entity at the other end of the relationship.</summary>
            <returns>
            A <see cref="T:System.Type" /> that is the type of the object t the other end of the association.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
            <summary>Gets a Boolean value that indicates whether the relationship is based on the foreign key value.</summary>
            <returns>true if the relationship is based on the foreign key value; otherwise false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
            <summary>
            Attribute for scalar properties in an IEntity.
            Implied default AttributeUsage properties Inherited=True, AllowMultiple=False,
            The metadata system expects this and will only look at the first of each of these attributes, even if there are more.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
            <summary>Gets or sets the value that indicates whether the property can have a null value.</summary>
            <returns>The value that indicates whether the property can have a null value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
            <summary>Gets or sets the value that indicates whether the property is part of the entity key.</summary>
            <returns>The value that indicates whether the property is part of the entity key.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
            <summary>
            Attribute for static types
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> class with a unique value for each model referenced by the assembly.
            </summary>
            <remarks>
            Setting this parameter to a unique value for each model file in a Visual Basic
            assembly will prevent the following error:
            "'System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute' cannot be specified more than once in this project, even with identical parameter values."
            </remarks>
            <param name="assemblyGuid">A string that is a unique GUID value for the model in the assembly.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
            <summary>
            Collection of entities modeling a particular EDM construct
            which can either be all entities of a particular type or
            entities participating in a particular relationship.
            </summary>
            <typeparam name="TEntity">The type of entities in this collection.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
            <summary>
            Base class for EntityCollection and EntityReference
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
            <summary>
            Represents one end of a relationship.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
            <summary>Loads the related object or objects into this related end with the default merge option.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>Loads the related object or objects into the related end with the specified merge option.</summary>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when merging objects into an existing
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>Adds an object to the related end.</summary>
            <param name="entity">
            An object to add to the collection.  entity  must implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
            <summary>Adds an object to the related end.</summary>
            <param name="entity">An object to add to the collection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>Removes an object from the collection of objects at the related end.</summary>
            <returns>
            true if  entity  was successfully removed, false if  entity  was not part of the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />
            .
            </returns>
            <param name="entity">
            The object to remove from the collection.  entity  must implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
            <summary>Removes an object from the collection of objects at the related end.</summary>
            <returns>
            true if  entity  was successfully removed; false if  entity  was not part of the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />
            .
            </returns>
            <param name="entity">An object to remove from the collection.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>Defines a relationship between two attached objects.</summary>
            <param name="entity">
            The object being attached.  entity  must implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
            <summary>Defines a relationship between two attached objects.</summary>
            <param name="entity">The object being attached.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
            <summary>
            Gets or sets a value indicating whether the entity (for an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference"/> or all entities 
            in the collection (for an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1"/> have been loaded from the database.
            </summary>
            <remarks>
            Loading the related entities from the database either using lazy-loading, as part of a query, or explicitly
            with one of the Load methods will set the IsLoaded flag to true.
            IsLoaded can be explicitly set to true to prevent the related entities from being lazy-loaded.
            This can be useful if the application has caused a subset of related entities to be loaded
            and wants to prevent any other entities from being loaded automatically.
            Note that explicit loading using <see cref="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load"/> will load all related entities from the database
            regardless of whether or not IsLoaded is true.
            When any related entity is detached the IsLoaded flag is reset to false indicating that not all related entities
            are now loaded.
            </remarks>
            <value>
            True if all the related entities are loaded or the IsLoaded has been explicitly set to true; otherwise false.
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
            <summary>Gets the name of the relationship in which this related end participates.</summary>
            <returns>
            The name of the relationship in which this <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> is participating. The relationship name is not namespace qualified.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
            <summary>Gets the role name at the source end of the relationship.</summary>
            <returns>The role name at the source end of the relationship.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
            <summary>Gets the role name at the target end of the relationship.</summary>
            <returns>The role name at the target end of the relationship.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
            <summary>Returns a reference to the metadata for the related end.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
            <summary>
            Loads the related object or objects into the related end with the default merge option.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When the source object was retrieved by using a <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> query 
            and the <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> is not <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />
            or the related objects are already loaded
            or when the source object is not attached to the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            or when the source object is being tracked but is in the
            <see cref="F:System.Data.Entity.EntityState.Added" /> or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state
            or the <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />
            used for <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />
            is <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>
            Loads an object or objects from the related end with the specified merge option.
            </summary>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when merging objects into an existing
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.
            </param>
            <exception cref="T:System.InvalidOperationException">
            When the source object was retrieved by using a <see  cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />  query 
            and the <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />
            is not <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />
            or the related objects are already loaded
            or when the source object is not attached to the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            or when the source object is being tracked but is in the
            <see cref="F:System.Data.Entity.EntityState.Added" />  or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state 
            or the <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />
            used for <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />
            is <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>
            Attaches an entity to the related end.  This method works in exactly the same way as Attach(object).
            It is maintained for backward compatibility with previous versions of IRelatedEnd.
            </summary>
            <param name="entity"> The entity to attach to the related end </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when
            <paramref name="entity"/>
            is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity cannot be related via the current relationship end.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
            <summary>
            Attaches an entity to the related end. If the related end is already filled
            or partially filled, this merges the existing entities with the given entity. The given
            entity is not assumed to be the complete set of related entities.
            Owner and all entities passed in must be in Unchanged or Modified state.
            Deleted elements are allowed only when the state manager is already tracking the relationship
            instance.
            </summary>
            <param name="entity"> The entity to attach to the related end </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when
            <paramref name="entity"/>
            is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity cannot be related via the current relationship end.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>
            Adds an entity to the related end.  This method works in exactly the same way as Add(object).
            It is maintained for backward compatibility with previous versions of IRelatedEnd.
            </summary>
            <param name="entity"> Entity instance to add to the related end </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
            <summary>
            Adds an entity to the related end.  If the owner is
            attached to a cache then the all the connected ends are
            added to the object cache and their corresponding relationships
            are also added to the ObjectStateManager. The RelatedEnd of the
            relationship is also fixed.
            </summary>
            <param name="entity"> Entity instance to add to the related end </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>
            Removes an entity from the related end.  This method works in exactly the same way as Remove(object).
            It is maintained for backward compatibility with previous versions of IRelatedEnd.
            </summary>
            <param name="entity"> Entity instance to remove from the related end </param>
            <returns> Returns true if the entity was successfully removed, false if the entity was not part of the RelatedEnd. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
            <summary>
            Removes an entity from the related end.  If owner is
            attached to a cache, marks relationship for deletion and if
            the relationship is composition also marks the entity for deletion.
            </summary>
            <param name="entity"> Entity instance to remove from the related end </param>
            <returns> Returns true if the entity was successfully removed, false if the entity was not part of the RelatedEnd. </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used internally to deserialize entity objects along with the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />
            instances.
            </summary>
            <param name="context">The serialized stream.</param>
        </member>
        <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
            <summary>Occurs when a change is made to a related end.</summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
            <summary>Gets the name of the relationship in which this related end participates.</summary>
            <returns>
            The name of the relationship in which this <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" /> participates. The relationship name is not namespace qualified.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
            <summary>Gets the role name at the source end of the relationship.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the role name.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
            <summary>Gets the role name at the target end of the relationship.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the role name.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
            <summary>Gets a reference to the metadata for the related end.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IList" /> of entity objects.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>Loads related objects into the collection, using the specified merge option.</summary>
            <param name="mergeOption">
            Specifies how the objects in this collection should be merged with the objects that might have been returned from previous queries against the same
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
            <summary>Defines relationships between an object and a collection of related objects in an object context.</summary>
            <remarks>
            Loads related entities into the local collection. If the collection is already filled
            or partially filled, merges existing entities with the given entities. The given
            entities are not assumed to be the complete set of related entities.
            Owner and all entities passed in must be in Unchanged or Modified state. We allow
            deleted elements only when the state manager is already tracking the relationship
            instance.
            </remarks>
            <param name="entities">Collection of objects in the object context that are related to the source object.</param>
            <exception cref="T:System.ArgumentNullException"> entities  collection is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The source object or an object in the  entities  collection is null or is not in an
            <see
                cref="F:System.Data.Entity.EntityState.Unchanged" />
            or <see cref="F:System.Data.Entity.EntityState.Modified" /> state.-or-The relationship cannot be defined based on the EDM metadata. This can occur when the association in the conceptual schema does not support a relationship between the two types.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
            <summary>Defines a relationship between two attached objects in an object context.</summary>
            <param name="entity">The object being attached.</param>
            <exception cref="T:System.ArgumentNullException">When the  entity  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            When the  entity  cannot be related to the source object. This can occur when the association in the conceptual schema does not support a relationship between the two types.-or-When either object is null or is not in an
            <see
                cref="F:System.Data.Entity.EntityState.Unchanged" />
            or <see cref="F:System.Data.Entity.EntityState.Modified" /> state.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
            <summary>Adds an object to the collection.</summary>
            <param name="item">
            An object to add to the collection.  entity  must implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />
            .
            </param>
            <exception cref="T:System.ArgumentNullException"> entity  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
            <summary>Removes an object from the collection and marks the relationship for deletion.</summary>
            <returns>true if item was successfully removed; otherwise, false. </returns>
            <param name="item">The object to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException"> entity  object is null.</exception>
            <exception cref="T:System.InvalidOperationException">The  entity  object is not attached to the same object context.-or-The  entity  object does not have a valid relationship manager.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
            <summary>Returns an enumerator that is used to iterate through the objects in the collection.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that is used to iterate through the set of values cached by
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
            <summary>Removes all entities from the collection. </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
            <summary>Determines whether a specific object exists in the collection.</summary>
            <returns>
            true if the object is found in the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />; otherwise, false.
            </returns>
            <param name="item">
            The object to locate in the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies all the contents of the collection to an array, starting at the specified index of the target array.</summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>Used internally to serialize entity objects.</summary>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>Used internally to deserialize entity objects.</summary>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
            <summary>Returns an object query that, when it is executed, returns the same set of objects that exists in the current collection. </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> that represents the entity collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            When the object is in an <see cref="F:System.Data.Entity.EntityState.Added" /> state 
            or when the object is in a
            <see cref="F:System.Data.Entity.EntityState.Detached" /> state with a
            <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> other than
            <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
            <summary>Gets the number of objects that are contained in the collection.</summary>
            <returns>
            The number of elements that are contained in the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
            <summary>
            Gets a value that indicates whether the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            is read-only.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            IListSource.ContainsListCollection implementation. Always returns false.
            This means that the IList we return is the one which contains our actual data,
            it is not a list of collections.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
            <summary>
            This is the class is the basis for all perscribed EntityObject classes.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
            <summary>
            Interface that defines an entity containing a key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
            <summary>
            Gets or sets the <see cref="T:System.Data.Entity.Core.EntityKey" /> for instances of entity types that implement this interface.
            </summary>
            <remarks>
            If an object is being managed by a change tracker, it is expected that
            IEntityChangeTracker methods EntityMemberChanging and EntityMemberChanged will be
            used to report changes on EntityKey. This allows the change tracker to validate the
            EntityKey's new value and to verify if the change tracker is in a state where it can
            allow updates to the EntityKey.
            </remarks>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityKey" /> for instances of entity types that implement this interface.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
            <summary>
            Minimum interface that a data class must implement in order to be managed by a change tracker.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
            <summary>
            Gets or sets the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.
            </summary>
            <param name="changeTracker">
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.
            </param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
            <summary>
            Interface that a data class must implement if exposes relationships
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
            <summary>Returns the relationship manager that manages relationships for an instance of an entity type.</summary>
            <remarks>
            Classes that expose relationships must implement this property
            by constructing and setting RelationshipManager in their constructor.
            The implementation of this property should use the static method RelationshipManager.Create
            to create a new RelationshipManager when needed. Once created, it is expected that this
            object will be stored on the entity and will be provided through this property.
            </remarks>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> for this entity.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
            <summary>
            Used by the ObjectStateManager to attach or detach this EntityObject to the cache.
            </summary>
            <param name="changeTracker"> Reference to the ObjectStateEntry that contains this entity </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
            <summary>Notifies the change tracker that a property change is pending.</summary>
            <param name="property">The name of the changing property.</param>
            <exception cref="T:System.ArgumentNullException"> property  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
            <summary>Notifies the change tracker that a property has changed.</summary>
            <param name="property">The name of the changed property.</param>
            <exception cref="T:System.ArgumentNullException"> property  is null.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
            <summary>Gets the entity state of the object.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.EntityState" /> of this object.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
            <summary>Gets or sets the key for this object.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityKey" /> for this object.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
            <summary>
            Returns the container for the lazily created relationship
            navigation property objects, collections and refs.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
            <summary>
            This interface is implemented by a change tracker and is used by data classes to report changes
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
            <summary>Notifies the change tracker of a pending change to a property of an entity type.</summary>
            <param name="entityMemberName">The name of the property that is changing.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
            <summary>Notifies the change tracker that a property of an entity type has changed.</summary>
            <param name="entityMemberName">The name of the property that has changed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
            <summary>Notifies the change tracker of a pending change to a complex property.</summary>
            <param name="entityMemberName">The name of the top-level entity property that is changing.</param>
            <param name="complexObject">The complex type that contains the property that is changing.</param>
            <param name="complexObjectMemberName">The name of the property that is changing on complex type.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
            <summary>Notifies the change tracker that a property of a complex type has changed.</summary>
            <param name="entityMemberName">The name of the complex property of the entity type that has changed.</param>
            <param name="complexObject">The complex type that contains the property that changed.</param>
            <param name="complexObjectMemberName">The name of the property that changed on complex type.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
            <summary>Gets current state of a tracked object.</summary>
            <returns>
            An <see cref="T:System.Data.Entity.EntityState" /> that is the state of the tracked object.For more information, see Identity Resolution, State Managment, and Change Tracking and Tracking Changes in POCO Entities.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
            <summary>
            Models a relationship end with multiplicity 1.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
            <summary>Returns the key for the related object. </summary>
            <remarks>
            Returns the EntityKey of the target entity associated with this EntityReference.
            Is non-null in the following scenarios:
            (a) Entities are tracked by a context and an Unchanged or Added client-side relationships exists for this EntityReference's owner with the
            same RelationshipName and source role. This relationship could have been created explicitly by the user (e.g. by setting
            the EntityReference.Value, setting this property directly, or by calling EntityCollection.Add) or automatically through span queries.
            (b) If the EntityKey was non-null before detaching an entity from the context, it will still be non-null after detaching, until any operation
            occurs that would set it to null, as described below.
            (c) Entities are detached and the EntityKey is explicitly set to non-null by the user.
            (d) Entity graph was created using a NoTracking query with full span
            Is null in the following scenarios:
            (a) Entities are tracked by a context but there is no Unchanged or Added client-side relationship for this EntityReference's owner with the
            same RelationshipName and source role.
            (b) Entities are tracked by a context and a relationship exists, but the target entity has a temporary key (i.e. it is Added) or the key
            is one of the special keys
            (c) Entities are detached and the relationship was explicitly created by the user.
            </remarks>
            <returns>
            An <see cref="T:System.Data.Entity.Core.EntityKey" /> that is the key of the related object.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
            <summary>
            Models a relationship end with multiplicity 1.
            </summary>
            <typeparam name="TEntity">The type of the entity being referenced.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.
            </summary>
            <remarks>
            The default constructor is required for some serialization scenarios. It should not be used to
            create new EntityReferences. Use the GetRelatedReference or GetRelatedEnd methods on the RelationshipManager
            class instead.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>
            Loads the related object for this <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> with the specified merge option.
            </summary>
            <param name="mergeOption">
            Specifies how the object should be returned if it already exists in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
            <exception cref="T:System.InvalidOperationException">
            The source of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> is null 
            or a query returned more than one related end 
            or a query returned zero related ends, and one related end was expected.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
            <summary>Creates a many-to-one or one-to-one relationship between two objects in the object context.</summary>
            <param name="entity">The object being attached.</param>
            <exception cref="T:System.ArgumentNullException">When the  entity  is null.</exception>
            <exception cref="T:System.InvalidOperationException">When the  entity  cannot be related to the current related end. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
            <summary>Creates an equivalent object query that returns the related object.</summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> that returns the related object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            When the object is in an <see cref="F:System.Data.Entity.EntityState.Added" /> state 
            or when the object is in a <see cref="F:System.Data.Entity.EntityState.Detached" />
            state with a <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" />
            other than <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>This method is used internally to serialize related entity objects.</summary>
            <param name="context">The serialized stream.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>This method is used internally to serialize related entity objects.</summary>
            <param name="context">The serialized stream.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
            <summary>
            Gets or sets the related object returned by this
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            .
            </summary>
            <returns>
            The object returned by this <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
            <summary>
            Identifies the kind of a relationship
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
            <summary>
            The relationship is an Association
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
            <summary>
            Container for the lazily created relationship navigation
            property objects (collections and refs).
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> object.
            </summary>
            <remarks>
            Used by data classes that support relationships. If the change tracker
            requests the RelationshipManager property and the data class does not
            already have a reference to one of these objects, it calls this method
            to create one, then saves a reference to that object. On subsequent accesses
            to that property, the data class should return the saved reference.
            The reason for using a factory method instead of a public constructor is to
            emphasize that this is not something you would normally call outside of a data class.
            By requiring that these objects are created via this method, developers should
            give more thought to the operation, and will generally only use it when
            they explicitly need to get an object of this type. It helps define the intended usage.
            </remarks>
            <returns>
            The requested <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.
            </returns>
            <param name="owner">Reference to the entity that is calling this method.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
            <summary>
            Returns either an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> or
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            of the correct type for the specified target role in a relationship.
            </summary>
            <returns>
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> representing the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            or
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            that was retrieved.
            </returns>
            <param name="relationshipName">Name of the relationship in which  targetRoleName  is defined. The relationship name is not namespace qualified.</param>
            <param name="targetRoleName">Target role to use to retrieve the other end of  relationshipName .</param>
            <exception cref="T:System.ArgumentNullException"> relationshipName  or  targetRoleName  is null.</exception>
            <exception cref="T:System.InvalidOperationException">The source type does not match the type of the owner.</exception>
            <exception cref="T:System.ArgumentException"> targetRoleName  is invalid or unable to find the relationship type in the metadata.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
            <summary>
            Takes an existing EntityReference that was created with the default constructor and initializes it using the provided relationship and target role names.
            This method is designed to be used during deserialization only, and will throw an exception if the provided EntityReference has already been initialized,
            if the relationship manager already contains a relationship with this name and target role, or if the relationship manager is already attached to a ObjectContext.W
            </summary>
            <param name="relationshipName">The relationship name.</param>
            <param name="targetRoleName">The role name of the related end.</param>
            <param name="entityReference">
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> to initialize.
            </param>
            <typeparam name="TTargetEntity">
            The type of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> being initialized.
            </typeparam>
            <exception cref="T:System.InvalidOperationException">
            When the provided <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 
            is already initialized.-or-When the relationship manager is already attached to an
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            or when the relationship manager already contains a relationship with this name and target role.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
            <summary>
            Takes an existing EntityCollection that was created with the default constructor and initializes it using the provided relationship and target role names.
            This method is designed to be used during deserialization only, and will throw an exception if the provided EntityCollection has already been initialized,
            or if the relationship manager is already attached to a ObjectContext.
            </summary>
            <param name="relationshipName">The relationship name.</param>
            <param name="targetRoleName">The target role name.</param>
            <param name="entityCollection">An existing EntityCollection.</param>
            <typeparam name="TTargetEntity"> Type of the entity represented by targetRoleName </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
            <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> of related objects with the specified relationship name and target role name.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> of related objects.
            </returns>
            <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
            <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
            <typeparam name="TTargetEntity">
            The type of the returned <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.
            </typeparam>
            <exception cref="T:System.InvalidOperationException">
            The specified role returned an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> instead of an
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> for a related object by using the specified combination of relationship name and target role name.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> of a related object.
            </returns>
            <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
            <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
            <typeparam name="TTargetEntity">
            The type of the returned <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.
            </typeparam>
            <exception cref="T:System.InvalidOperationException">
            The specified role returned an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> instead of an
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
            <summary>Returns an enumeration of all the related ends managed by the relationship manager.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of objects that implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />
            . An empty enumeration is returned when the relationships have not yet been populated.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by Object Services to prepare an <see cref="T:System.Data.Entity.Core.EntityKey" /> for binary serialization with a serialized relationship.
            </summary>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used internally to deserialize entity objects along with the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />
            instances.
            </summary>
            <param name="context">The serialized stream.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
            <summary>
            Represents either a entity, entity stub or relationship
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
            <summary>
            Gets the updatable version of original values of the object associated with this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </summary>
            <returns>The updatable original values of object data.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
            <summary>Accepts the current values as original values.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
            <summary>Marks an entity as deleted.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
            <summary>
            Returns the names of an object’s properties that have changed since the last time
            <see
                cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />
            was called.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of names as string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
            <summary>Sets the state of the object or relationship to modify.</summary>
            <exception cref="T:System.InvalidOperationException">If State is not Modified or Unchanged</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
            <summary>Marks the specified property as modified.</summary>
            <param name="propertyName">The name of the property.</param>
            <exception cref="T:System.InvalidOperationException"> If State is not Modified or Unchanged </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
            <summary>Rejects any changes made to the property with the given name since the property was last loaded, attached, saved, or changes were accepted. The orginal value of the property is stored and the property will no longer be marked as modified.</summary>
            <param name="propertyName">The name of the property to change.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
            <summary>Uses DetectChanges to determine whether or not the current value of the property with the given name is different from its original value. Note that this may be different from the property being marked as modified since a property which has not changed can still be marked as modified.</summary>
            <remarks>
            Note that this property always returns the same result as the modified state of the property for change tracking 
            proxies and entities that derive from the EntityObject base class. This is because original values are not tracked 
            for these entity types and hence there is no way to know if the current value is really different from the 
            original value.
            </remarks>
            <returns>true if the property has changed; otherwise, false.</returns>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
            <summary>
            Changes state of the entry to the specified <see cref="T:System.Data.Entity.EntityState" /> value.
            </summary>
            <param name="state">
            The <see cref="T:System.Data.Entity.EntityState" /> value to set for the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" />
            property of the entry.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
            <summary>Sets the current values of the entry to match the property values of a supplied object.</summary>
            <param name="currentEntity">The detached object that has updated values to apply to the object.  currentEntity  can also be the object’s entity key.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
            <summary>Sets the original values of the entry to match the property values of a supplied object.</summary>
            <param name="originalEntity">The detached object that has original values to apply to the object.  originalEntity  can also be the object’s entity key.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
            <summary>
            Used to report that a scalar entity property is about to change
            The current value of the specified property is cached when this method is called.
            </summary>
            <param name="entityMemberName"> The name of the entity property that is changing </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
            <summary>
            Used to report that a scalar entity property has been changed
            The property value that was cached during EntityMemberChanging is now
            added to OriginalValues
            </summary>
            <param name="entityMemberName"> The name of the entity property that has changing </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
            <summary>
            Used to report that a complex property is about to change
            The current value of the specified property is cached when this method is called.
            </summary>
            <param name="entityMemberName"> The name of the top-level entity property that is changing </param>
            <param name="complexObject"> The complex object that contains the property that is changing </param>
            <param name="complexObjectMemberName"> The name of the property that is changing on complexObject </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
            <summary>
            Used to report that a complex property has been changed
            The property value that was cached during EntityMemberChanging is now added to OriginalValues
            </summary>
            <param name="entityMemberName"> The name of the top-level entity property that has changed </param>
            <param name="complexObject"> The complex object that contains the property that changed </param>
            <param name="complexObjectMemberName"> The name of the property that changed on complexObject </param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> for the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> for the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> for the object or relationship.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> for the object or relationship.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
            <summary>
            Gets the state of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.
            </summary>
            <returns>
            The state of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
            <summary>Gets the entity object.</summary>
            <returns>The entity object.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
            <summary>Gets the entity key.</summary>
            <returns>The entity key.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> represents a relationship.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> represents a relationship; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
            <summary>Gets the read-only version of original values of the object or relationship.</summary>
            <returns>The read-only version of original values of the relationship set entry or entity.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
            <summary>
            Gets the current property values of the object or relationship associated with this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" /> that contains the current values of the object or relationship associated with this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager"/> instance for the object represented by entry.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager"/> object.
            </returns>
            <exception cref="T:System.InvalidOperationException">The entry is a stub or represents a relationship</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
            <summary>
            Returns the EntityState from the ObjectStateEntry
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
            <summary>
            Defines behavior for implementations of IQueryable that allow modifications to the membership of the resulting set.
            </summary>
            <typeparam name="TEntity"> Type of entities returned from the queryable. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
            <summary>Notifies the set that an object that represents a new entity must be added to the set.</summary>
            <remarks>
            Depending on the implementation, the change to the set may not be visible in an enumeration of the set
            until changes to that set have been persisted in some manner.
            </remarks>
            <param name="entity">The new object to add to the set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
            <summary>Notifies the set that an object that represents an existing entity must be added to the set.</summary>
            <remarks>
            Depending on the implementation, the change to the set may not be visible in an enumeration of the set
            until changes to that set have been persisted in some manner.
            </remarks>
            <param name="entity">The existing object to add to the set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
            <summary>Notifies the set that an object that represents an existing entity must be deleted from the set. </summary>
            <remarks>
            Depending on the implementation, the change to the set may not be visible in an enumeration of the set
            until changes to that set have been persisted in some manner.
            </remarks>
            <param name="entity">The existing object to delete from the set.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
            <summary>Notifies the set that an object that represents an existing entity must be detached from the set.</summary>
            <remarks>
            Depending on the implementation, the change to the set may not be visible in an enumeration of the set
            until changes to that set have been persisted in some manner.
            </remarks>
            <param name="entity">The object to detach from the set.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.MergeOption">
            <summary>
            The different ways that new objects loaded from the database can be merged with existing objects already in memory.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
            <summary>
            Will only append new (top level-unique) rows.  This is the default behavior.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
            <summary>
            Same behavior as LoadOption.OverwriteChanges.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
            <summary>
            Same behavior as LoadOption.PreserveChanges.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
            <summary>
            Will not modify cache.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
            <summary>
            ObjectContext is the top-level object that encapsulates a connection between the CLR and the database,
            serving as a gateway for Create, Read, Update, and Delete operations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> class with the given connection. During construction, the metadata workspace is extracted from the
            <see
                cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />
            object.
            </summary>
            <param name="connection">
            An <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.
            </param>
            <exception cref="T:System.ArgumentNullException">The  connection  is null.</exception>
            <exception cref="T:System.ArgumentException">The  connection  is invalid or the metadata workspace is invalid. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
            <summary>
            Creates an ObjectContext with the given connection and metadata workspace.
            </summary>
            <param name="connection"> connection to the store </param>
            <param name="contextOwnsConnection"> If set to true the connection is disposed when the context is disposed, otherwise the caller must dispose the connection. </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> class with the given connection string and default entity container name.
            </summary>
            <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
            <exception cref="T:System.ArgumentNullException">The  connectionString  is null.</exception>
            <exception cref="T:System.ArgumentException">The  connectionString  is invalid or the metadata workspace is not valid. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> class with a given connection string and entity container name.
            </summary>
            <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
            <param name="defaultContainerName">The name of the default entity container. When the  defaultContainerName  is set through this method, the property becomes read-only.</param>
            <exception cref="T:System.ArgumentNullException">The  connectionString  is null.</exception>
            <exception cref="T:System.ArgumentException">The  connectionString ,  defaultContainerName , or metadata workspace is not valid.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> class with a given connection and entity container name.
            </summary>
            <param name="connection">
            An <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.
            </param>
            <param name="defaultContainerName">The name of the default entity container. When the  defaultContainerName  is set through this method, the property becomes read-only.</param>
            <exception cref="T:System.ArgumentNullException">The  connection  is null.</exception>
            <exception cref="T:System.ArgumentException">The  connection ,  defaultContainerName , or metadata workspace is not valid.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
            <summary>Accepts all changes made to objects in the object context.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
            <summary>Adds an object to the object context. </summary>
            <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
            <param name="entity">
            The <see cref="T:System.Object" /> to add.
            </param>
            <exception cref="T:System.ArgumentNullException">The  entity  parameter is null or the  entitySetName  does not qualify.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
            <summary>Explicitly loads an object related to the supplied object by the specified navigation property and using the default merge option. </summary>
            <param name="entity">The entity for which related objects are to be loaded.</param>
            <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
            <exception cref="T:System.InvalidOperationException">
            The  entity  is in a <see cref="F:System.Data.Entity.EntityState.Detached" />,
            <see
                cref="F:System.Data.Entity.EntityState.Added," />
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state or the  entity  is attached to another instance of
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
            <summary>Explicitly loads an object that is related to the supplied object by the specified navigation property and using the specified merge option. </summary>
            <param name="entity">The entity for which related objects are to be loaded.</param>
            <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> value to use when you load the related objects.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The  entity  is in a <see cref="F:System.Data.Entity.EntityState.Detached" />,
            <see
                cref="F:System.Data.Entity.EntityState.Added," />
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state or the  entity  is attached to another instance of
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the default merge option. </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The source object for which related objects are to be loaded.</param>
            <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
            <exception cref="T:System.ArgumentException"> selector  does not supply a valid input parameter.</exception>
            <exception cref="T:System.ArgumentNullException"> selector  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The  entity  is in a <see cref="F:System.Data.Entity.EntityState.Detached" />,
            <see
                cref="F:System.Data.Entity.EntityState.Added," />
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state or the  entity  is attached to another instance of
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
            <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the specified merge option. </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The source object for which related objects are to be loaded.</param>
            <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> value to use when you load the related objects.
            </param>
            <exception cref="T:System.ArgumentException"> selector  does not supply a valid input parameter.</exception>
            <exception cref="T:System.ArgumentNullException"> selector  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The  entity  is in a <see cref="F:System.Data.Entity.EntityState.Detached" />,
            <see
                cref="F:System.Data.Entity.EntityState.Added," />
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state or the  entity  is attached to another instance of
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
            <summary>Applies property changes from a detached object to an object already attached to the object context.</summary>
            <param name="entitySetName">The name of the entity set to which the object belongs.</param>
            <param name="changed">The detached object that has property updates to apply to the original object.</param>
            <exception cref="T:System.ArgumentNullException">When  entitySetName  is null or an empty string or when  changed  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            When the <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> from  entitySetName  does not match the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            of the object
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            or when the entity is in a state other than
            <see
                cref="F:System.Data.Entity.EntityState.Modified" />
            or
            <see
                cref="F:System.Data.Entity.EntityState.Unchanged" />
            or the original object is not attached to the context.
            </exception>
            <exception cref="T:System.ArgumentException">When the type of the  changed  object is not the same type as the original object.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
            <summary>
            Copies the scalar values from the supplied object into the object in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            that has the same key.
            </summary>
            <returns>The updated object.</returns>
            <param name="entitySetName">The name of the entity set to which the object belongs.</param>
            <param name="currentEntity">
            The detached object that has property updates to apply to the original object. The entity key of  currentEntity  must match the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />
            property of an entry in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
            <typeparam name="TEntity">The entity type of the object.</typeparam>
            <exception cref="T:System.ArgumentNullException"> entitySetName  or  current  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> from  entitySetName  does not match the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            of the object
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
             or the object is not in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            or it is in a
            <see
                cref="F:System.Data.Entity.EntityState.Detached" />
            state or the entity key of the supplied object is invalid.
            </exception>
            <exception cref="T:System.ArgumentException"> entitySetName  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
            <summary>
            Copies the scalar values from the supplied object into set of original values for the object in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            that has the same key.
            </summary>
            <returns>The updated object.</returns>
            <param name="entitySetName">The name of the entity set to which the object belongs.</param>
            <param name="originalEntity">
            The detached object that has original values to apply to the object. The entity key of  originalEntity  must match the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />
            property of an entry in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
            <typeparam name="TEntity">The type of the entity object.</typeparam>
            <exception cref="T:System.ArgumentNullException"> entitySetName  or  original  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> from  entitySetName  does not match the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            of the object
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
             or an
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            for the object cannot be found in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
             or the object is in an
            <see
                cref="F:System.Data.Entity.EntityState.Added" />
            or a
            <see
                cref="F:System.Data.Entity.EntityState.Detached" />
            state  or the entity key of the supplied object is invalid or has property changes.
            </exception>
            <exception cref="T:System.ArgumentException"> entitySetName  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
            <summary>Attaches an object or object graph to the object context in a specific entity set. </summary>
            <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
            <param name="entity">
            The <see cref="T:System.Object" /> to attach.
            </param>
            <exception cref="T:System.ArgumentNullException">The  entity  is null. </exception>
            <exception cref="T:System.InvalidOperationException">
            Invalid entity set  or the object has a temporary key or the object has an
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            and the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            does not match with the entity set passed in as an argument of the method or the object does not have an
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            and no entity set is provided or any object from the object graph has a temporary
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
             or any object from the object graph has an invalid
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            (for example, values in the key do not match values in the object) or the entity set could not be found from a given  entitySetName  name and entity container name or any object from the object graph already exists in another state manager.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
            <summary>Attaches an object or object graph to the object context when the object has an entity key. </summary>
            <param name="entity">The object to attach.</param>
            <exception cref="T:System.ArgumentNullException">The  entity  is null. </exception>
            <exception cref="T:System.InvalidOperationException">Invalid entity key. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
            <summary>Creates the entity key for a specific object, or returns the entity key if it already exists. </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.EntityKey" /> of the object.
            </returns>
            <param name="entitySetName">The fully qualified name of the entity set to which the entity object belongs.</param>
            <param name="entity">The object for which the entity key is being retrieved. </param>
            <exception cref="T:System.ArgumentNullException">When either parameter is null. </exception>
            <exception cref="T:System.ArgumentException">When  entitySetName  is empty or when the type of the  entity  object does not exist in the entity set or when the  entitySetName  is not fully qualified.</exception>
            <exception cref="T:System.InvalidOperationException">When the entity key cannot be constructed successfully based on the supplied parameters.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified entity type.
            </summary>
            <returns>
            The new <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> instance.
            </returns>
            <typeparam name="TEntity">
            Entity type of the requested <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.
            </typeparam>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> property is not set on the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
             or the specified type belongs to more than one entity set.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified type and with the specified entity set name.
            </summary>
            <returns>
            The new <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> instance.
            </returns>
            <param name="entitySetName">
            Name of the entity set for the returned <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />. The string must be qualified by the default container name if the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" />
            property is not set on the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
            <typeparam name="TEntity">
            Entity type of the requested <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.
            </typeparam>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> from  entitySetName  does not match the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />
            of the object
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
             or the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" />
            property is not set on the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            and the name is not qualified as part of the  entitySetName  parameter or the specified type belongs to more than one entity set.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>
            Creates an <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> in the current object context by using the specified query string.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> of the specified type.
            </returns>
            <param name="queryString">The query string to be executed.</param>
            <param name="parameters">Parameters to pass to the query.</param>
            <typeparam name="T">
            The entity type of the returned <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">The  queryString  or  parameters  parameter is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
            <summary>Marks an object for deletion. </summary>
            <param name="entity">
            An object that specifies the entity to delete. The object can be in any state except
            <see
                cref="F:System.Data.Entity.EntityState.Detached" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
            <summary>Removes the object from the object context.</summary>
            <param name="entity">
            Object to be detached. Only the  entity  is removed; if there are any related objects that are being tracked by the same
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            , those will not be detached automatically.
            </param>
            <exception cref="T:System.ArgumentNullException">The  entity  is null. </exception>
            <exception cref="T:System.InvalidOperationException">
            The  entity  is not associated with this <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> (for example, was newly created and not associated with any context yet, or was obtained through some other context, or was already detached).
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
            <summary>Releases the resources used by the object context.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the object context.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
            <summary>Returns an object that has the specified entity key.</summary>
            <returns>
            An <see cref="T:System.Object" /> that is an instance of an entity type.
            </returns>
            <param name="key">The key of the object to be found.</param>
            <exception cref="T:System.ArgumentNullException">The  key  parameter is null.</exception>
            <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">
            The object is not found in either the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> or the data source.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
            <summary>Updates a collection of objects in the object context with data from the database. </summary>
            <param name="refreshMode">
            A <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> value that indicates whether 
            property changes in the object context are overwritten with property values from the database.
            </param>
            <param name="collection">
            An <see cref="T:System.Collections.IEnumerable" /> collection of objects to refresh.
            </param>
            <exception cref="T:System.ArgumentNullException"> collection  is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> refreshMode  is not valid.</exception>
            <exception cref="T:System.ArgumentException"> collection is empty or an object is not attached to the context. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
            <summary>Updates an object in the object context with data from the database. </summary>
            <param name="refreshMode">
            A <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> value that indicates whether 
            property changes in the object context are overwritten with property values from the database.
            </param>
            <param name="entity">The object to be refreshed. </param>
            <exception cref="T:System.ArgumentNullException"> entity  is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> refreshMode  is not valid.</exception>
            <exception cref="T:System.ArgumentException"> entity is not attached to the context. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
            <summary>Persists all updates to the database and resets change tracking in the object context.</summary>
            <returns>
            The number of objects in an <see cref="F:System.Data.Entity.EntityState.Added" />,
            <see cref="F:System.Data.Entity.EntityState.Modified" />, 
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state when
            <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> was called.
            </returns>
            <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">An optimistic concurrency violation has occurred while saving changes.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
            <summary>Persists all updates to the database and optionally resets change tracking in the object context.</summary>
            <param name="acceptChangesDuringSave">
            This parameter is needed for client-side transaction support. If true, the change tracking on all objects is reset after
            <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />
            finishes. If false, you must call the <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" />
            method after <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />.
            </param>
            <returns>
            The number of objects in an <see cref="F:System.Data.Entity.EntityState.Added" />,
            <see cref="F:System.Data.Entity.EntityState.Modified" />, 
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state when
            <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> was called.
            </returns>
            <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">An optimistic concurrency violation has occurred while saving changes.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
            <summary>Persists all updates to the database and optionally resets change tracking in the object context.</summary>
            <param name="options">
            A <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> value that determines the behavior of the operation.
            </param>
            <returns>
            The number of objects in an <see cref="F:System.Data.Entity.EntityState.Added" />,
            <see cref="F:System.Data.Entity.EntityState.Modified" />, 
            or <see cref="F:System.Data.Entity.EntityState.Deleted" /> state when
            <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> was called.
            </returns>
            <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">An optimistic concurrency violation has occurred while saving changes.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
            <summary>
            Ensures that <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> changes are synchronized with changes in all objects that are tracked by the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
            <summary>Returns an object that has the specified entity key.</summary>
            <returns>true if the object was retrieved successfully. false if the  key  is temporary, the connection is null, or the  value  is null.</returns>
            <param name="key">The key of the object to be found.</param>
            <param name="value">When this method returns, contains the object.</param>
            <exception cref="T:System.ArgumentException">Incompatible metadata for  key .</exception>
            <exception cref="T:System.ArgumentNullException"> key  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>
            Executes a stored procedure or function that is defined in the data source and mapped in the conceptual model, with the specified parameters. Returns a typed
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.
            </returns>
            <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
            <param name="parameters">
            An array of <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> objects. If output parameters are used, 
            their values will not be available until the results have been read completely. This is due to the underlying behavior 
            of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
            </param>
            <typeparam name="TElement">
            The entity type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />
            .
            </typeparam>
            <exception cref="T:System.ArgumentException"> function  is null or empty or function  is not found.</exception>
            <exception cref="T:System.InvalidOperationException">The entity reader does not support this  function or there is a type mismatch on the reader and the  function .</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>
            Executes the given stored procedure or function that is defined in the data source and expressed in the conceptual model, with the specified parameters, and merge option. Returns a typed
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />
            .
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.
            </returns>
            <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when executing the query.
            </param>
            <param name="parameters">
            An array of <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> objects. If output parameters are used, 
            their values will not be available until the results have been read completely. This is due to the underlying behavior 
            of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
            </param>
            <typeparam name="TElement">
            The entity type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />
            .
            </typeparam>
            <exception cref="T:System.ArgumentException"> function  is null or empty or function  is not found.</exception>
            <exception cref="T:System.InvalidOperationException">The entity reader does not support this  function or there is a type mismatch on the reader and the  function .</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>
            Executes the given function on the default container.
            </summary>
            <typeparam name="TElement"> Element type for function results. </typeparam>
            <param name="functionName">
            Name of function. May include container (e.g. ContainerName.FunctionName) or just function name when DefaultContainerName is known.
            </param>
            <param name="executionOptions"> The options for executing this function. </param>
            <param name="parameters"> 
            The parameter values to use for the function. If output parameters are used, their values 
            will not be available until the results have been read completely. This is due to the underlying 
            behavior of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
            </param>
            <returns>An object representing the result of executing this function.</returns>
            <exception cref="T:System.ArgumentException"> If function is null or empty </exception>
            <exception cref="T:System.InvalidOperationException">
            If function is invalid (syntax,
            does not exist, refers to a function with return type incompatible with T)
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Executes a stored procedure or function that is defined in the data source and expressed in the conceptual model; discards any results returned from the function; and returns the number of rows affected by the execution.</summary>
            <returns>The number of rows affected.</returns>
            <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
            <param name="parameters">
            An array of <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> objects. If output parameters are used, 
            their values will not be available until the results have been read completely. This is due to the underlying 
            behavior of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
            </param>
            <exception cref="T:System.ArgumentException"> function  is null or empty or function  is not found.</exception>
            <exception cref="T:System.InvalidOperationException">The entity reader does not support this  function or there is a type mismatch on the reader and the  function .</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Generates an equivalent type that can be used with the Entity Framework for each type in the supplied enumeration.</summary>
            <param name="types">
            An enumeration of <see cref="T:System.Type" /> objects that represent custom data classes that map to the conceptual model.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
            <summary>Returns all the existing proxy types.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of all the existing proxy types.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
            <summary>Returns the entity type of the POCO entity associated with a proxy object of a specified type.</summary>
            <returns>
            The <see cref="T:System.Type" /> of the associated POCO entity.
            </returns>
            <param name="type">
            The <see cref="T:System.Type" /> of the proxy object.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
            <summary>Creates and returns an instance of the requested type .</summary>
            <returns>An instance of the requested type  T , or an instance of a derived type that enables  T  to be used with the Entity Framework. The returned object is either an instance of the requested type or an instance of a derived type that enables the requested type to be used with the Entity Framework.</returns>
            <typeparam name="T">Type of object to be returned.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
             <summary>
             Executes an arbitrary command directly against the data source using the existing connection.
             The command is specified using the server's native query language, such as SQL.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <remarks>
             If there isn't an existing local transaction a new transaction will be used
             to execute the command.
             </remarks>
             <param name="commandText">The command specified in the server's native query language.</param>
             <param name="parameters"> The parameter values to use for the query. </param>
             <returns>The number of rows affected.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
             <summary>
             Executes an arbitrary command directly against the data source using the existing connection.
             The command is specified using the server's native query language, such as SQL.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <param name="transactionalBehavior"> Controls the creation of a transaction for this command. </param>
             <param name="commandText">The command specified in the server's native query language.</param>
             <param name="parameters"> The parameter values to use for the query. </param>
             <returns>The number of rows affected.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
             <summary>
             Executes a query directly against the data source and returns a sequence of typed results. 
             The query is specified using the server's native query language, such as SQL.
             Results are not tracked by the context, use the overload that specifies an entity set name to track results.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <typeparam name="TElement"> The element type of the result sequence. </typeparam>
             <param name="commandText"> The query specified in the server's native query language. </param>
             <param name="parameters"> 
             The parameter values to use for the query. If output parameters are used, their values will not be 
             available until the results have been read completely. This is due to the underlying behavior 
             of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             An enumeration of objects of type <typeparamref name="TElement" /> .
             </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
             <summary>
             Executes a query directly against the data source and returns a sequence of typed results. 
             The query is specified using the server's native query language, such as SQL.
             Results are not tracked by the context, use the overload that specifies an entity set name to track results.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <typeparam name="TElement"> The element type of the result sequence. </typeparam>
             <param name="commandText"> The query specified in the server's native query language. </param>
             <param name="executionOptions"> The options for executing this query. </param>
             <param name="parameters"> 
             The parameter values to use for the query. If output parameters are used, their values will not be 
             available until the results have been read completely. This is due to the underlying behavior of 
             DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             An enumeration of objects of type <typeparamref name="TElement" /> .
             </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
             <summary>
             Executes a query directly against the data source and returns a sequence of typed results. 
             The query is specified using the server's native query language, such as SQL.
             If an entity set name is specified, results are tracked by the context.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <typeparam name="TElement"> The element type of the result sequence. </typeparam>
             <param name="commandText"> The query specified in the server's native query language. </param>
             <param name="entitySetName">The entity set of the  TResult  type. If an entity set name is not provided, the results are not going to be tracked.</param>
             <param name="mergeOption">
             The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when executing the query. The default is
             <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.
             </param>
             <param name="parameters"> 
             The parameter values to use for the query. If output parameters are used, their values will not be 
             available until the results have been read completely. This is due to the underlying behavior 
             of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             An enumeration of objects of type <typeparamref name="TElement" /> .
             </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
             <summary>
             Executes a query directly against the data source and returns a sequence of typed results. 
             The query is specified using the server's native query language, such as SQL.
             If an entity set name is specified, results are tracked by the context.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.ExecuteStoreQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <typeparam name="TElement"> The element type of the result sequence. </typeparam>
             <param name="commandText"> The query specified in the server's native query language. </param>
             <param name="entitySetName">The entity set of the  TResult  type. If an entity set name is not provided, the results are not going to be tracked.</param>
             <param name="executionOptions"> The options for executing this query. </param>
             <param name="parameters"> 
             The parameter values to use for the query. If output parameters are used, their values will not be 
             available until the results have been read completely. This is due to the underlying behavior 
             of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             An enumeration of objects of type <typeparamref name="TElement" /> .
             </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
            <summary>
            Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type.
            </summary>
            <typeparam name="TElement">The entity type.</typeparam>
            <returns>An enumeration of objects of type  TResult .</returns>
            <param name="reader">
            The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.
            </param>
            <exception cref="T:System.ArgumentNullException">When  reader  is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
            <summary>
            Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type, in a specific entity set, and with the specified merge option.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>An enumeration of objects of type  TResult .</returns>
            <param name="reader">
            The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.
            </param>
            <param name="entitySetName">The entity set of the  TResult  type.</param>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when translated objects are added to the object context. The default is
            <see
                cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />
            .
            </param>
            <exception cref="T:System.ArgumentNullException">When  reader  is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When the supplied  mergeOption  is not a valid <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">When the supplied  entitySetName  is not a valid entity set for the  TResult  type. </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
            <summary>
            Creates the database by using the current data source connection and the metadata in the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
            .
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
            <summary>Deletes the database that is specified as the database in the current data source connection.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
            <summary>
            Checks if the database that is specified as the database in the current store connection exists on the store. Most of the actual work
            is done by the DbProviderServices implementation for the current store connection.
            </summary>
            <returns>true if the database exists; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
            <summary>
            Generates a data definition language (DDL) script that creates schema objects (tables, primary keys, foreign keys) for the metadata in the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
            . The
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
            loads metadata from store schema definition language (SSDL) files.
            </summary>
            <returns>
            A DDL script that creates schema objects for the metadata in the
            <see
                cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
            <summary>Gets the connection used by the object context.</summary>
            <returns>
            A <see cref="T:System.Data.Common.DbConnection" /> object that is the connection.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            When the <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> instance has been disposed.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
            <summary>Gets or sets the default container name.</summary>
            <returns>
            A <see cref="T:System.String" /> that is the default container name.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
            <summary>Gets the metadata workspace used by the object context. </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> object associated with this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
            <summary>Gets the object state manager used by the object context to track object changes.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> used by this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
            <summary>Gets or sets the timeout value, in seconds, for all object context operations. A null value indicates that the default value of the underlying provider will be used.</summary>
            <returns>
            An <see cref="T:System.Int32" /> value that is the timeout value, in seconds.
            </returns>
            <exception cref="T:System.ArgumentException">The timeout value is less than 0. </exception>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
            <summary>Gets the LINQ query provider associated with this object context.</summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider" /> instance used by this object context.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
            <summary>
            Returns itself. ObjectContext implements <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter"/> to provide a common
            interface for <see cref="T:System.Data.Entity.DbContext"/> and ObjectContext both of which will return the underlying
            ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
            <summary>
            Gets the transaction handler in use by this context. May be null if no transaction have been started.
            </summary>
            <value>
            The transaction handler.
            </value>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
            <summary>
            Returns the <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"/> being used for this context.
            </summary>
        </member>
        <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
            <summary>Occurs when changes are saved to the data source. </summary>
        </member>
        <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
            <summary>Occurs when a new entity object is created from data in the data source as part of a query or load operation. </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
            <summary>
            Defines options that affect the behavior of the ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
            <summary>Gets or sets a Boolean value that determines whether related objects are loaded automatically when a navigation property is accessed.</summary>
            <returns>true if lazy loading is enabled; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
            <summary>Gets or sets a Boolean value that determines whether proxy instances are created for custom data classes that are persistence ignorant.</summary>
            <returns>true if proxies are created; otherwise, false. The default value is true.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
            <summary>Gets or sets a Boolean value that determines whether to use the legacy PreserveChanges behavior.</summary>
            <returns>true if the legacy PreserveChanges behavior should be used; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
            <summary>Gets or sets a Boolean value that determines whether to use the consistent NullReference behavior.</summary>
            <remarks>
            If this flag is set to false then setting the Value property of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1"/> for an
            FK relationship to null when it is already null will have no effect. When this flag is set to true, then
            setting the value to null will always cause the FK to be nulled and the relationship to be deleted
            even if the value is currently null. The default value is false when using ObjectContext and true
            when using DbContext.
            </remarks>
            <returns>true if the consistent NullReference behavior should be used; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
            <summary>Gets or sets a Boolean value that determines whether to use the C# NullComparison behavior.</summary>
            <remarks>
            This flag determines whether C# behavior should be exhibited when comparing null values in LinqToEntities.
            If this flag is set, then any equality comparison between two operands, both of which are potentially
            nullable, will be rewritten to show C# null comparison semantics. As an example:
            (operand1 = operand2) will be rewritten as
            (((operand1 = operand2) AND NOT (operand1 IS NULL OR operand2 IS NULL)) || (operand1 IS NULL &amp;&amp; operand2 IS NULL))
            The default value is false when using <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>.
            </remarks>
            <returns>true if the C# NullComparison behavior should be used; otherwise, false.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
            <summary>
            EventArgs for the ObjectMaterialized event.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
            <summary>Gets the entity object that was created.</summary>
            <returns>The entity object that was created.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
            <summary>
            Delegate for the ObjectMaterialized event.
            </summary>
            <param name="sender"> The ObjectContext responsable for materializing the object. </param>
            <param name="e"> EventArgs containing a reference to the materialized object. </param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
            <summary>
            This class represents a query parameter at the object layer, which consists
            of a Name, a Type and a Value.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> class with the specified name and type.
            </summary>
            <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
            <param name="type">The common language runtime (CLR) type of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is invalid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> class with the specified name and value.
            </summary>
            <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
            <param name="value">The initial value (and inherently, the type) of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is not valid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
            <summary>Gets the parameter name, which can only be set through a constructor.</summary>
            <returns>The parameter name, which can only be set through a constructor.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
            <summary>Gets the parameter type.</summary>
            <returns>
            The <see cref="T:System.Type" /> of the parameter.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
            <summary>Gets or sets the parameter value.</summary>
            <returns>The parameter value.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
            <summary>
            This class represents a collection of query parameters at the object layer.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
            <summary>
            Adds the specified <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> to the collection.
            </summary>
            <param name="item">The parameter to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">The  parameter  argument is null.</exception>
            <exception cref="T:System.ArgumentException">
            The  parameter  argument already exists in the collection. This behavior differs from that of most collections that allow duplicate entries. -or-Another parameter with the same name as the  parameter  argument already exists in the collection. Note that the lookup is case-insensitive. This behavior differs from that of most collections, and is more like that of a
            <see
                cref="T:System.Collections.Generic.Dictionary" />
            .
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The type of the  parameter  is not valid.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
            <summary>
            Deletes all <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> instances from the collection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
            <summary>
            Checks for the existence of a specified <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> in the collection by reference.
            </summary>
            <returns>Returns true if the parameter object was found in the collection; otherwise, false.  </returns>
            <param name="item">
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> to find in the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">The  parameter  argument is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
            <summary>
            Determines whether an <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> with the specified name is in the collection.
            </summary>
            <returns>Returns true if a parameter with the specified name was found in the collection; otherwise, false.</returns>
            <param name="name">The name of the parameter to look for in the collection. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
            <exception cref="T:System.ArgumentNullException">The  name  parameter is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
            <summary>Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.</summary>
            <param name="array">The array into which to copy the parameters.</param>
            <param name="arrayIndex">The index in the array at which to start copying the parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
            <summary>
            Removes an instance of an <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> from the collection by reference if it exists in the collection.
            </summary>
            <returns>Returns true if the parameter object was found and removed from the collection; otherwise, false. </returns>
            <param name="item">An object to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException">The  parameter  argument is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
            <summary>
            These methods return enumerator instances, which allow the collection to
            be iterated through and traversed.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an untyped enumerator over the collection. </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> instance.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
            <summary>Gets the number of parameters currently in the collection.</summary>
            <returns>
            The number of <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> objects that are currently in the collection.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{System#Data#Entity#Core#Objects#ObjectParameter}#IsReadOnly">
            <summary>
            This collection is read-write - parameters may be added, removed
            and [somewhat] modified at will (value only) - provided that the
            implementation the collection belongs to has not locked its parameters
            because it's command definition has been prepared.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
            <summary>Provides an indexer that allows callers to retrieve parameters by name.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> instance.
            </returns>
            <param name="name">The name of the parameter to find. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">No parameter with the specified name is found in the collection.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
            <summary>
            This class implements untyped queries at the object-layer.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
            <summary>Returns the commands to execute against the data source.</summary>
            <returns>A string that represents the commands that the query executes against the data source.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
            <summary>Returns information about the result type of the query.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> value that contains information about the result type of the query.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>Executes the untyped object query with the specified merge option.</summary>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when executing the query. 
            The default is <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.
            </param>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
            <summary>
            Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IList" /> of entity objects.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
            <summary>Returns the command text for the query.</summary>
            <returns>A string value.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
            <summary>Gets the object context associated with this object query.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> associated with this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />
            instance.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
            <summary>Gets or sets how objects returned from a query are added to the object context. </summary>
            <returns>
            The query <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
            <summary>
            Whether the query is streaming or buffering
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
            <summary>Gets the parameter collection for this object query.</summary>
            <returns>
            The parameter collection for this <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
            <summary>Gets or sets a value that indicates whether the query plan should be cached.</summary>
            <returns>A value that indicates whether the query plan should be cached.</returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
            <summary>
            Gets the result element type for this query instance.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
            <summary>
            Gets the expression describing this query. For queries built using
            LINQ builder patterns, returns a full LINQ expression tree; otherwise,
            returns a constant expression wrapping this query. Note that the
            default expression is not cached. This allows us to differentiate
            between LINQ and Entity-SQL queries.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryProvider"/> associated with this query instance.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
            <summary>
            ObjectQuery implements strongly-typed queries at the object-layer.
            Queries are specified using Entity-SQL strings and may be created by calling
            the Entity-SQL-based query builder methods declared by ObjectQuery.
            </summary>
            <typeparam name="T"> The result type of this ObjectQuery </typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query.
            </summary>
            <param name="commandText">The Entity SQL query.</param>
            <param name="context">
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> on which to execute the query.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query and the specified merge option.
            </summary>
            <param name="commandText">The Entity SQL query.</param>
            <param name="context">
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> on which to execute the query.
            </param>
            <param name="mergeOption">
            Specifies how the entities that are retrieved through this query should be merged with the entities that have been returned from previous queries against the same
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
            <summary>Executes the object query with the specified merge option.</summary>
            <param name="mergeOption">
            The <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> to use when executing the query. 
            The default is <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.
            </param>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
            <summary>Specifies the related objects to include in the query results.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> with the defined query path.
            </returns>
            <param name="path">Dot-separated list of related objects to return in the query results.</param>
            <exception cref="T:System.ArgumentNullException"> path  is null.</exception>
            <exception cref="T:System.ArgumentException"> path  is empty.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
            <summary>Limits the query to unique results.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with SELECT DISTINCT applied.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
            <summary>
            This query-builder method creates a new query whose results are all of
            the results of this query, except those that are also part of the other
            query specified.
            </summary>
            <param name="query"> A query representing the results to exclude. </param>
            <returns> a new ObjectQuery instance. </returns>
            <exception cref="T:System.ArgumentNullException">If the query parameter is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Groups the query results by the specified criteria.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance of type
            <see
                cref="T:System.Data.Common.DbDataRecord" />
            that is equivalent to the original instance with GROUP BY applied.
            </returns>
            <param name="keys">The key columns by which to group the results.</param>
            <param name="projection">The list of selected properties that defines the projection. </param>
            <param name="parameters">Zero or more parameters that are used in this method.</param>
            <exception cref="T:System.ArgumentNullException">The  query  parameter is null or an empty string 
            or the  projection  parameter is null or an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
            <summary>
            This query-builder method creates a new query whose results are those that
            are both in this query and the other query specified.
            </summary>
            <param name="query"> A query representing the results to intersect with. </param>
            <returns> a new ObjectQuery instance. </returns>
            <exception cref="T:System.ArgumentNullException">If the query parameter is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
            <summary>Limits the query to only results of a specific type.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with OFTYPE applied.
            </returns>
            <typeparam name="TResultType">
            The type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> returned when the query is executed with the applied filter.
            </typeparam>
            <exception cref="T:System.Data.Entity.Core.EntitySqlException">The type specified is not valid.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Orders the query results by the specified criteria.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with ORDER BY applied.
            </returns>
            <param name="keys">The key columns by which to order the results.</param>
            <param name="parameters">Zero or more parameters that are used in this method.</param>
            <exception cref="T:System.ArgumentNullException">The  keys  or  parameters  parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The  key  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Limits the query results to only the properties that are defined in the specified projection.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance of type
            <see
                cref="T:System.Data.Common.DbDataRecord" />
            that is equivalent to the original instance with SELECT applied.
            </returns>
            <param name="projection">The list of selected properties that defines the projection.</param>
            <param name="parameters">Zero or more parameters that are used in this method.</param>
            <exception cref="T:System.ArgumentNullException"> projection  is null or parameters is null.</exception>
            <exception cref="T:System.ArgumentException">The  projection  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Limits the query results to only the property specified in the projection.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance of a type compatible with the specific projection. The returned
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />
            is equivalent to the original instance with SELECT VALUE applied.
            </returns>
            <param name="projection">The projection list.</param>
            <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
            <typeparam name="TResultType">
            The type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> returned by the
            <see
                cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" />
            method.
            </typeparam>
            <exception cref="T:System.ArgumentNullException"> projection  is null or parameters  is null.</exception>
            <exception cref="T:System.ArgumentException">The  projection  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Orders the query results by the specified criteria and skips a specified number of results.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with both ORDER BY and SKIP applied.
            </returns>
            <param name="keys">The key columns by which to order the results.</param>
            <param name="count">The number of results to skip. This must be either a constant or a parameter reference.</param>
            <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
            <exception cref="T:System.ArgumentNullException">Any argument is null.</exception>
            <exception cref="T:System.ArgumentException"> keys  is an empty string or count  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Limits the query results to a specified number of items.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with TOP applied.
            </returns>
            <param name="count">The number of items in the results as a string. </param>
            <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
            <exception cref="T:System.ArgumentNullException"> count  is null.</exception>
            <exception cref="T:System.ArgumentException"> count  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
            <summary>
            This query-builder method creates a new query whose results are all of
            the results of this query, plus all of the results of the other query,
            without duplicates (i.e., results are unique).
            </summary>
            <param name="query"> A query representing the results to add. </param>
            <returns> a new ObjectQuery instance. </returns>
            <exception cref="T:System.ArgumentNullException">If the query parameter is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
            <summary>
            This query-builder method creates a new query whose results are all of
            the results of this query, plus all of the results of the other query,
            including any duplicates (i.e., results are not necessarily unique).
            </summary>
            <param name="query"> A query representing the results to add. </param>
            <returns> a new ObjectQuery instance. </returns>
            <exception cref="T:System.ArgumentNullException">If the query parameter is null.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
            <summary>Limits the query to results that match specified filtering criteria.</summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with WHERE applied.
            </returns>
            <param name="predicate">The filter predicate.</param>
            <param name="parameters">Zero or more parameters that are used in this method.</param>
            <exception cref="T:System.ArgumentNullException"> predicate  is null or parameters  is null.</exception>
            <exception cref="T:System.ArgumentException">The  predicate  is an empty string.</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> which when enumerated will execute the given SQL query against the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
            <summary>Gets or sets the name of this object query.</summary>
            <returns>
            A string value that is the name of this <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.
            </returns>
            <exception cref="T:System.ArgumentException">The value specified on set is not valid.</exception>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
            <summary>
            This class implements IEnumerable and IDisposable. Instance of this class
            is returned from ObjectQuery.Execute method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the query results.</summary>
            <returns>An enumerator that iterates through the query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
            <summary>Returns the results in a format useful for data binding.</summary>
            <returns>
            An <see cref="T:System.Collections.IList" /> of entity objects.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
            <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
            <summary>Releases the resources used by the object result.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
            <summary>Gets the next result set of a stored procedure.</summary>
            <returns>An ObjectResult that enumerates the values of the next result set. Null, if there are no more, or if the ObjectResult is not the result of a stored procedure call.</returns>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            IListSource.ContainsListCollection implementation. Always returns false.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
            <summary>
            When overridden in a derived class, gets the type of the generic
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />
            .
            </summary>
            <returns>
            The type of the generic <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
            <summary>
            This class represents the result of the <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)"/> method.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
            <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the query results.</summary>
            <returns>An enumerator that iterates through the query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
            <summary>
            Gets the type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that is the type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
            <summary>
            Represents a typed entity set that is used to perform create, read, update, and delete operations. 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
            <summary>Adds an object to the object context in the current entity set. </summary>
            <param name="entity">The object to add.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
            <summary>Attaches an object or object graph to the object context in the current entity set. </summary>
            <param name="entity">The object to attach.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
            <summary>Marks an object for deletion. </summary>
            <param name="entity">
            An object that represents the entity to delete. The object can be in any state except
            <see
                cref="F:System.Data.Entity.EntityState.Detached" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
            <summary>Removes the object from the object context.</summary>
            <param name="entity">
            Object to be detached. Only the  entity  is removed; if there are any related objects that are being tracked by the same
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            , those will not be detached automatically.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
            <summary>
            Copies the scalar values from the supplied object into the object in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            that has the same key.
            </summary>
            <returns>The updated object.</returns>
            <param name="currentEntity">
            The detached object that has property updates to apply to the original object. The entity key of  currentEntity  must match the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />
            property of an entry in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
            <summary>
            Sets the <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> property of an
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            to match the property values of a supplied object.
            </summary>
            <returns>The updated object.</returns>
            <param name="originalEntity">
            The detached object that has property updates to apply to the original object. The entity key of  originalEntity  must match the
            <see
                cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" />
            property of an entry in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            .
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
            <summary>Creates a new entity type object.</summary>
            <returns>The new entity type object, or an instance of a proxy type that corresponds to the entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
            <summary>Creates an instance of the specified type.</summary>
            <returns>An instance of the requested type  T , or an instance of a proxy type that corresponds to the type  T .</returns>
            <typeparam name="T">Type of object to be returned.</typeparam>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
            <summary>
            Gets the metadata of the entity set represented by this <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> instance.
            </summary>
            <returns>
            An <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> object.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
            <summary>
            The original values of the properties of an entity when it was retrieved from the database.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
            <summary>
            Maintains object state and identity management for entity type instances and relationship instances.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> class.
            </summary>
            <param name="metadataWorkspace">
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, which supplies mapping and metadata information.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
            <summary>
            Returns a collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects for objects or relationships with the given state.
            </summary>
            <returns>
            A collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects in the given
            <see
                cref="T:System.Data.Entity.EntityState" />
            .
            </returns>
            <param name="state">
            An <see cref="T:System.Data.Entity.EntityState" /> used to filter the returned
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            objects.
            </param>
            <exception cref="T:System.ArgumentException">
            When  state  is <see cref="F:System.Data.Entity.EntityState.Detached" />.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
            <summary>
            Changes state of the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for a specific object to the specified  entityState .
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the supplied  entity .
            </returns>
            <param name="entity">The object for which the state must be changed.</param>
            <param name="entityState">The new state of the object.</param>
            <exception cref="T:System.ArgumentNullException">When  entity  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            When the object is not detached and does not have an entry in the state manager
            or when you try to change the state to <see cref="F:System.Data.Entity.EntityState.Detached" />
            from any other <see cref="T:System.Data.Entity.EntityState." />
            or when  state  is not a valid <see cref="T:System.Data.Entity.EntityState" /> value.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
            <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the name of the navigation property.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the relationship that was changed.
            </returns>
            <param name="sourceEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the source entity at one end of the relationship.
            </param>
            <param name="targetEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the target entity at the other end of the relationship.
            </param>
            <param name="navigationProperty">The name of the navigation property on  source  that returns the specified  target .</param>
            <param name="relationshipState">
            The requested <see cref="T:System.Data.Entity.EntityState" /> of the specified relationship.
            </param>
            <exception cref="T:System.ArgumentNullException">When  source  or  target  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            When trying to change the state of the relationship to a state other than 
                <see cref="F:System.Data.Entity.EntityState.Deleted" /> or <see cref="F:System.Data.Entity.EntityState.Detached" /> 
            when either  source  or  target  is in a <see cref="F:System.Data.Entity.EntityState.Deleted" /> state 
            or when you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Added" /> or <see cref="F:System.Data.Entity.EntityState.Detached" />
            when either  source  or  target  is in an <see ref="F:System.Data.Entity.EntityState.Added" /> state 
            or when  state  is not a valid <see cref="T:System.Data.Entity.EntityState" /> value
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
            <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and a LINQ expression that defines the navigation property.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the relationship that was changed.
            </returns>
            <param name="sourceEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the source entity at one end of the relationship.
            </param>
            <param name="targetEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the target entity at the other end of the relationship.
            </param>
            <param name="navigationPropertySelector">A LINQ expression that selects the navigation property on  source  that returns the specified  target .</param>
            <param name="relationshipState">
            The requested <see cref="T:System.Data.Entity.EntityState" /> of the specified relationship.
            </param>
            <typeparam name="TEntity">The entity type of the  source  object.</typeparam>
            <exception cref="T:System.ArgumentNullException">When  source ,  target , or  selector  is null.</exception>
            <exception cref="T:System.ArgumentException"> selector  is malformed or cannot return a navigation property.</exception>
            <exception cref="T:System.InvalidOperationException">
            When you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Deleted" />  or <see cref="F:System.Data.Entity.EntityState.Detached" /> 
            when either  source  or  target  is in a
            <see cref="F:System.Data.Entity.EntityState.Deleted" /> state
            or when you try to change the state of the relationship to a state other than
            <see  cref="F:System.Data.Entity.EntityState.Added" />  or <see  cref="F:System.Data.Entity.EntityState.Detached" />
            when either  source  or  target  is in an <see cref="F:System.Data.Entity.EntityState.Added" /> state 
            or when  state  is not a valid <see cref="T:System.Data.Entity.EntityState" /> value.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
            <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the properties of the relationship.</summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the relationship that was changed.
            </returns>
            <param name="sourceEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the source entity at one end of the relationship.
            </param>
            <param name="targetEntity">
            The object instance or <see cref="T:System.Data.Entity.Core.EntityKey" /> of the target entity at the other end of the relationship.
            </param>
            <param name="relationshipName">The name of the relationship.</param>
            <param name="targetRoleName">The role name at the  target  end of the relationship.</param>
            <param name="relationshipState">
            The requested <see cref="T:System.Data.Entity.EntityState" /> of the specified relationship.
            </param>
            <exception cref="T:System.ArgumentNullException">When  source  or  target  is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            When you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Deleted" /> or <see cref="F:System.Data.Entity.EntityState.Detached" /> 
            when either  source  or  target  is in a <see cref="F:System.Data.Entity.EntityState.Deleted" /> state 
            or when you try to change the state of the relationship to a state other than
            <see cref="F:System.Data.Entity.EntityState.Added" /> or <see cref="F:System.Data.Entity.EntityState.Detached" />
            when either  source  or  target  is in an
            <see cref="F:System.Data.Entity.EntityState.Added" /> state 
            or when  state  is not a valid  <see cref="T:System.Data.Entity.EntityState" /> value.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the object or relationship entry with the specified key.
            </summary>
            <returns>
            The corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            .
            </returns>
            <param name="key">
            The <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </param>
            <exception cref="T:System.ArgumentNullException">When  key  is null.</exception>
            <exception cref="T:System.ArgumentException">When the specified  key  cannot be found in the state manager.</exception>
            <exception cref="T:System.InvalidOperationException">
            No entity with the specified <see cref="T:System.Data.Entity.Core.EntityKey" /> exists in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
            <summary>
            Returns an <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the specified object.
            </summary>
            <returns>
            The corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see
                cref="T:System.Object" />
            .
            </returns>
            <param name="entity">
            The <see cref="T:System.Object" /> to which the retrieved
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            belongs.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No entity for the specified <see cref="T:System.Object" /> exists in the
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
            <summary>
            Tries to retrieve the corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the specified
            <see
                cref="T:System.Object" />
            .
            </summary>
            <returns>
            A Boolean value that is true if there is a corresponding
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            for the given object; otherwise, false.
            </returns>
            <param name="entity">
            The <see cref="T:System.Object" /> to which the retrieved
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            belongs.
            </param>
            <param name="entry">
            When this method returns, contains the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            This parameter is passed uninitialized.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
            <summary>
            Tries to retrieve the corresponding <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the object or relationship with the specified
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            .
            </summary>
            <returns>
            A Boolean value that is true if there is a corresponding
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            for the given
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            ; otherwise, false.
            </returns>
            <param name="key">
            The given <see cref="T:System.Data.Entity.Core.EntityKey" />.
            </param>
            <param name="entry">
            When this method returns, contains an <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> for the given
            <see
                cref="T:System.Data.Entity.Core.EntityKey" />
            This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">A null (Nothing in Visual Basic) value is provided for  key .</exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
            <summary>
            Returns the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager"/> that is used by the specified object.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager"/> for the specified object.
            </returns>
            <param name="entity">
            The object for which to return the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The entity does not implement IEntityWithRelationships and is not tracked by this ObjectStateManager
            </exception>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
            <summary>
            Returns the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> that is used by the specified object.
            </summary>
            <returns>
            true if a <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> instance was returned for the supplied  entity ; otherwise false.
            </returns>
            <param name="entity">
            The object for which to return the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.
            </param>
            <param name="relationshipManager">
            When this method returns, contains the
            <see
                cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />
            for the  entity .
            </param>
        </member>
        <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associated with this state manager.
            </summary>
            <returns>
            The <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associated with this
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />
            .
            </returns>
        </member>
        <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
            <summary>Occurs when entities are added to or removed from the state manager.</summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
            <summary>
            A DataContractResolver that knows how to resolve proxy types created for persistent
            ignorant classes to their base types. This is used with the DataContractSerializer.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
            <summary>During deserialization, maps any xsi:type information to the actual type of the persistence-ignorant object. </summary>
            <returns>Returns the type that the xsi:type is mapped to. Returns null if no known type was found that matches the xsi:type.</returns>
            <param name="typeName">The xsi:type information to map.</param>
            <param name="typeNamespace">The namespace of the xsi:type.</param>
            <param name="declaredType">The declared type.</param>
            <param name="knownTypeResolver">
            An instance of <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
            <summary>During serialization, maps actual types to xsi:type information.</summary>
            <returns>true if the type was resolved; otherwise, false.  </returns>
            <param name="type">The actual type of the persistence-ignorant object.</param>
            <param name="declaredType">The declared type.</param>
            <param name="knownTypeResolver">
            An instance of <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.
            </param>
            <param name="typeName">When this method returns, contains a list of xsi:type declarations.</param>
            <param name="typeNamespace">When this method returns, contains a list of namespaces used.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
            <summary>
            Defines the different ways to handle modified properties when refreshing in-memory data from the database.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
            <summary>
            For unmodified client objects, same behavior as StoreWins.  For modified client
            objects, Refresh original values with store value, keeping all values on client
            object. The next time an update happens, all the client change units will be
            considered modified and require updating.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
            <summary>
            Discard all changes on the client and refresh values with store values.
            Client original values is updated to match the store.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
            <summary>
            Flags used to modify behavior of ObjectContext.SaveChanges()
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
            <summary>
            Changes are saved without the DetectChanges or the AcceptAllChangesAfterSave methods being called.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
            <summary>
            After changes are saved, the AcceptAllChangesAfterSave method is called, which resets change tracking in the ObjectStateManager.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
            <summary>
            Before changes are saved, the DetectChanges method is called to synchronize the property values of objects that are attached to the object context with data in the ObjectStateManager.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
            <summary>
            This exception is thrown when a update operation violates the concurrency constraint.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Core.UpdateException">
            <summary>
            Exception during save changes to store
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.UpdateException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.UpdateException" /> with a specialized error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.UpdateException" /> class that uses a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.UpdateException" /> class that uses a specified error message, a reference to the inner exception, and an enumerable collection of
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            objects.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="stateEntries">
            The collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects.
            </param>
        </member>
        <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.UpdateException" /> with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects for this
            <see
                cref="T:System.Data.Entity.Core.UpdateException" />
            .
            </summary>
            <returns>
            A collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects comprised of either a single entity and 0 or more relationships, or 0 entities and 1 or more relationships.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> with a specialized error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> that uses a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> that uses a specified error message, a reference to the inner exception, and an enumerable collection of
            <see
                cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />
            objects.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
            <param name="stateEntries">
            The enumerable collection of <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> objects.
            </param>
        </member>
        <member name="T:System.Data.Entity.Core.PropertyConstraintException">
            <summary>
            Property constraint exception class. Note that this class has state - so if you change even
            its internals, it can be a breaking change
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> class with default message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> class with supplied message.
            </summary>
            <param name="message">A localized error message.</param>
        </member>
        <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> class with supplied message and inner exception.
            </summary>
            <param name="message">A localized error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> class.
            </summary>
            <param name="message">A localized error message.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> class.
            </summary>
            <param name="message">A localized error message.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
            <summary>Gets the name of the property that violated the constraint.</summary>
            <returns>The name of the property that violated the constraint.</returns>
        </member>
        <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
            <summary>
            This exception is thrown when the store provider exhibits a behavior incompatible with the entity client provider
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> with a specialized error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> that uses a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:System.Data.Entity.DbFunctions">
            <summary>
            Provides common language runtime (CLR) methods that expose EDM canonical functions
            for use in <see cref="T:System.Data.Entity.DbContext"/> or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> LINQ to Entities queries.
            </summary>
            <remarks>
            Note that this class was called EntityFunctions in some previous versions of Entity Framework.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDev EDM function to calculate
            the standard deviation of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical StDevP EDM function to calculate
            the standard deviation for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The standard deviation for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Var EDM function to calculate
            the variance of the collection.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical VarP EDM function to calculate
            the variance for the population.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="collection"> The collection over which to perform the calculation. </param>
            <returns> The variance for the population. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Left EDM function to return a given
            number of the leftmost characters in a string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="stringArgument"> The input string. </param>
            <param name="length"> The number of characters to return </param>
            <returns> A string containing the number of characters asked for from the left of the input string. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Right EDM function to return a given
            number of the rightmost characters in a string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="stringArgument"> The input string. </param>
            <param name="length"> The number of characters to return </param>
            <returns> A string containing the number of characters asked for from the right of the input string. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Reverse EDM function to return a given
            string with the order of the characters reversed.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="stringArgument"> The input string. </param>
            <returns> The input string with the order of the characters reversed. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical GetTotalOffsetMinutes EDM function to
            return the number of minutes that the given date/time is offset from UTC. This is generally between +780
            and -780 (+ or - 13 hrs).
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateTimeOffsetArgument"> The date/time value to use. </param>
            <returns> The offset of the input from UTC. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical TruncateTime EDM function to return
            the given date with the time portion cleared.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The date/time value to use. </param>
            <returns> The input date with the time portion cleared. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical TruncateTime EDM function to return
            the given date with the time portion cleared.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The date/time value to use. </param>
            <returns> The input date with the time portion cleared. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical CreateDateTime EDM function to
            create a new <see cref="T:System.DateTime"/> object.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="year"> The year. </param>
            <param name="month"> The month (1-based). </param>
            <param name="day"> The day (1-based). </param>
            <param name="hour"> The hours. </param>
            <param name="minute"> The minutes. </param>
            <param name="second"> The seconds, including fractional parts of the seconds if desired. </param>
            <returns> The new date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical CreateDateTimeOffset EDM function to
            create a new <see cref="T:System.DateTimeOffset"/> object.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="year"> The year. </param>
            <param name="month"> The month (1-based). </param>
            <param name="day"> The day (1-based). </param>
            <param name="hour"> The hours. </param>
            <param name="minute"> The minutes. </param>
            <param name="second"> The seconds, including fractional parts of the seconds if desired. </param>
            <param name="timeZoneOffset"> The time zone offset part of the new date. </param>
            <returns> The new date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical CreateTime EDM function to
            create a new <see cref="T:System.TimeSpan"/> object.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="hour"> The hours. </param>
            <param name="minute"> The minutes. </param>
            <param name="second"> The seconds, including fractional parts of the seconds if desired. </param>
            <returns> The new time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddYears EDM function to
            add the given number of years to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of years to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddYears EDM function to
            add the given number of years to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of years to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMonths EDM function to
            add the given number of months to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of months to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMonths EDM function to
            add the given number of months to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of months to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddDays EDM function to
            add the given number of days to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of days to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddDays EDM function to
            add the given number of days to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue"> The input date/time. </param>
            <param name="addValue"> The number of days to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddHours EDM function to
            add the given number of hours to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of hours to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddHours EDM function to
            add the given number of hours to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of hours to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddHours EDM function to
            add the given number of hours to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of hours to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMinutes EDM function to
            add the given number of minutes to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of minutes to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMinutes EDM function to
            add the given number of minutes to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of minutes to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMinutes EDM function to
            add the given number of minutes to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of minutes to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddSeconds EDM function to
            add the given number of seconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of seconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddSeconds EDM function to
            add the given number of seconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of seconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddSeconds EDM function to
            add the given number of seconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of seconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMilliseconds EDM function to
            add the given number of milliseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of milliseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMilliseconds EDM function to
            add the given number of milliseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of milliseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMilliseconds EDM function to
            add the given number of milliseconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of milliseconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMicroseconds EDM function to
            add the given number of microseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of microseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMicroseconds EDM function to
            add the given number of microseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of microseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddMicroseconds EDM function to
            add the given number of microseconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of microseconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddNanoseconds EDM function to
            add the given number of nanoseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of nanoseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddNanoseconds EDM function to
            add the given number of nanoseconds to a date/time.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of nanoseconds to add. </param>
            <returns> A resulting date/time. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical AddNanoseconds EDM function to
            add the given number of nanoseconds to a time span.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue"> The input date/time. </param>
            <param name="addValue"> The number of nanoseconds to add. </param>
            <returns> A resulting time span. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffYears EDM function to
            calculate the number of years between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of years between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffYears EDM function to
            calculate the number of years between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of years between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMonths EDM function to
            calculate the number of months between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of months between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMonths EDM function to
            calculate the number of months between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of months between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffDays EDM function to
            calculate the number of days between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of days between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffDays EDM function to
            calculate the number of days between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="dateValue1"> The first date/time. </param>
            <param name="dateValue2"> The second date/time. </param>
            <returns> The number of days between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffHours EDM function to
            calculate the number of hours between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of hours between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffHours EDM function to
            calculate the number of hours between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of hours between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffHours EDM function to
            calculate the number of hours between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of hours between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMinutes EDM function to
            calculate the number of minutes between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of minutes between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMinutes EDM function to
            calculate the number of minutes between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of minutes between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMinutes EDM function to
            calculate the number of minutes between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of minutes between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffSeconds EDM function to
            calculate the number of seconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of seconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffSeconds EDM function to
            calculate the number of seconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of seconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffSeconds EDM function to
            calculate the number of seconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of seconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMilliseconds EDM function to
            calculate the number of milliseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of milliseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMilliseconds EDM function to
            calculate the number of milliseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of milliseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMilliseconds EDM function to
            calculate the number of milliseconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of milliseconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMicroseconds EDM function to
            calculate the number of microseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of microseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMicroseconds EDM function to
            calculate the number of microseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of microseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffMicroseconds EDM function to
            calculate the number of microseconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of microseconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffNanoseconds EDM function to
            calculate the number of nanoseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of nanoseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffNanoseconds EDM function to
            calculate the number of nanoseconds between two date/times.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first date/time. </param>
            <param name="timeValue2"> The second date/time. </param>
            <returns> The number of nanoseconds between the first and second date/times. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical DiffNanoseconds EDM function to
            calculate the number of nanoseconds between two time spans.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="timeValue1"> The first time span. </param>
            <param name="timeValue2"> The second time span. </param>
            <returns> The number of nanoseconds between the first and second time spans. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Truncate EDM function to
            truncate the given value to the number of specified digits.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="value"> The value to truncate. </param>
            <param name="digits"> The number of digits to preserve. </param>
            <returns> The truncated value. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            When used as part of a LINQ to Entities query, this method invokes the canonical Truncate EDM function to
            truncate the given value to the number of specified digits.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function is translated to a corresponding function in the database.
            </remarks>
            <param name="value"> The value to truncate. </param>
            <param name="digits"> The number of digits to preserve. </param>
            <returns> The truncated value. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
            <summary>
            When used as part of a LINQ to Entities query, this method acts as an operator that ensures the input
            is treated as a Unicode string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function impacts the way the LINQ query is translated to a query that can be run in the database.
            </remarks>
            <param name="value"> The input string. </param>
            <returns> The input string treated as a Unicode string. </returns>
        </member>
        <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
            <summary>
            When used as part of a LINQ to Entities query, this method acts as an operator that ensures the input
            is treated as a non-Unicode string.
            </summary>
            <remarks>
            You cannot call this function directly. This function can only appear within a LINQ to Entities query.
            This function impacts the way the LINQ query is translated to a query that can be run in the database.
            </remarks>
            <param name="value"> The input string. </param>
            <returns> The input string treated as a non-Unicode string. </returns>
        </member>
        <member name="T:System.Data.Entity.EntityState">
            <summary>
            Describes the state of an entity.
            </summary>
        </member>
        <member name="F:System.Data.Entity.EntityState.Detached">
            <summary>
            The entity is not being tracked by the context.
            An entity is in this state immediately after it has been created with the new operator
            or with one of the <see cref="T:System.Data.Entity.DbSet"/> Create methods.
            </summary>
        </member>
        <member name="F:System.Data.Entity.EntityState.Unchanged">
            <summary>
            The entity is being tracked by the context and exists in the database, and its property
            values have not changed from the values in the database.
            </summary>
        </member>
        <member name="F:System.Data.Entity.EntityState.Added">
            <summary>
            The entity is being tracked by the context but does not yet exist in the database.
            </summary>
        </member>
        <member name="F:System.Data.Entity.EntityState.Deleted">
            <summary>
            The entity is being tracked by the context and exists in the database, but has been marked
            for deletion from the database the next time SaveChanges is called.
            </summary>
        </member>
        <member name="F:System.Data.Entity.EntityState.Modified">
            <summary>
            The entity is being tracked by the context and exists in the database, and some or all of its
            property values have been modified.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
            <summary>
            Represents information about a database connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of DbConnectionInfo representing a connection that is specified in the application configuration file.
            </summary>
            <param name="connectionName"> The name of the connection string in the application configuration. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of DbConnectionInfo based on a connection string.
            </summary>
            <param name="connectionString"> The connection string to use for the connection. </param>
            <param name="providerInvariantName"> The name of the provider to use for the connection. Use 'System.Data.SqlClient' for SQL Server. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server LocalDb based on a given database name or connection string.
            </summary>
            <remarks>
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database"/> class or in the
            app.config/web.config for the application to cause all DbContexts created with no
            connection information or just a database name to use SQL Server LocalDb by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
            <summary>
            Implementations of this interface are used to create DbConnection objects for
            a type of database server based on a given database name.
            An Instance is set on the <see cref="T:System.Data.Entity.Database"/> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use a certain type of database server by default.
            Two implementations of this interface are provided: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory"/>
            is used to create connections to Microsoft SQL Server, including EXPRESS editions.
            <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory"/> is used to create connections to Microsoft SQL
            Server Compact Editions.
            Other implementations for other database servers can be added as needed.
            Note that implementations should be thread safe or immutable since they may
            be accessed by multiple threads at the same time.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection based on the given database name or connection string.
            </summary>
            <param name="nameOrConnectionString"> The database name or connection string. </param>
            <returns> An initialized DbConnection. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new instance of the connection factory for the given version of LocalDb.
            For SQL Server 2012 LocalDb use "v11.0".
            For SQL Server 2014 and later LocalDb use "mssqllocaldb".
            </summary>
            <param name="localDbVersion"> The LocalDb version to use. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the connection factory for the given version of LocalDb.
            For SQL Server 2012 LocalDb use "v11.0".
            For SQL Server 2014 and later LocalDb use "mssqllocaldb".
            </summary>
            <param name="localDbVersion"> The LocalDb version to use. </param>
            <param name="baseConnectionString"> The connection string to use for options to the database other than the 'Initial Catalog', 'Data Source', and 'AttachDbFilename'. The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the database name when CreateConnection is called. The 'Data Source' will be set based on the LocalDbVersion argument. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server LocalDb based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString"> The database name or connection string. </param>
            <returns> An initialized DbConnection. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Initial Catalog',
            'Data Source', and 'AttachDbFilename'.
            The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the
            database name when CreateConnection is called.
            The 'Data Source' will be set based on the LocalDbVersion argument.
            The default is 'Integrated Security=True;'.
            </summary>
        </member>
        <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> that will use Code First Migrations
            to update the database to the latest version.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TMigrationsConfiguration">The type of the migrations configuration to use during initialization.</typeparam>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
            <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class that will use
            the connection information from a context constructed using the default constructor 
            or registered factory if applicable
            </summary>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class specifying whether to
            use the connection information from the context that triggered initialization to perform the migration.
            </summary>
            <param name="useSuppliedContext">
            If set to <c>true</c> the initializer is run using the connection information from the context that 
            triggered initialization. Otherwise, the connection information will be taken from a context constructed 
            using the default constructor or registered factory if applicable. 
            </param>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
            <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class specifying whether to
            use the connection information from the context that triggered initialization to perform the migration.
            Also allows specifying migrations configuration to use during initialization.
            </summary>
            <param name="useSuppliedContext">
            If set to <c>true</c> the initializer is run using the connection information from the context that
            triggered initialization. Otherwise, the connection information will be taken from a context constructed
            using the default constructor or registered factory if applicable.
            </param>
            <param name="configuration"> Migrations configuration to use during initialization. </param>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class that will
            use a specific connection string from the configuration file to connect to
            the database to perform the migration.
            </summary>
            <param name="connectionStringName"> The name of the connection string to use for migration. </param>
        </member>
        <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
             <summary>
             Helper class that is used to configure a column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Binary data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="maxLength"> The maximum allowable length of the array data. </param>
             <param name="fixedLength"> Value indicating whether or not all data should be padded to the maximum length. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="timestamp"> Value indicating whether or not this column should be configured as a timestamp. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Boolean data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Byte data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="identity"> Value indicating whether or not the database will generate values for this column during insert. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store DateTime data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="precision"> The precision of the column. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Decimal data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="precision"> The numeric precision of the column. </param>
             <param name="scale"> The numeric scale of the column. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="identity"> Value indicating whether or not the database will generate values for this column during insert. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Double data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store GUID data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="identity"> Value indicating whether or not the database will generate values for this column during insert. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Single data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Short data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="identity"> Value indicating whether or not the database will generate values for this column during insert. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Integer data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="identity"> Value indicating whether or not the database will generate values for this column during insert. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Long data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="identity"> Value indicating whether or not the database will generate values for this column during insert. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store String data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="maxLength"> The maximum allowable length of the string data. </param>
             <param name="fixedLength"> Value indicating whether or not all data should be padded to the maximum length. </param>
             <param name="unicode"> Value indicating whether or not the column supports Unicode content. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store Time data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="precision"> The precision of the column. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store DateTimeOffset data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="precision"> The precision of the column. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store geography data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
             <summary>
             Creates a new column definition to store geometry data.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="nullable"> Value indicating whether or not the column allows null values. </param>
             <param name="defaultValue"> Constant value to use as the default value for this column. </param>
             <param name="defaultValueSql"> SQL expression used as the default value for this column. </param>
             <param name="name"> The name of the column. </param>
             <param name="storeType"> Provider specific data type to use for this column. </param>
             <param name="annotations"> Custom annotations usually from the Code First model. </param>
             <returns> The newly constructed column definition. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
             <summary>
             Helper class that is used to further configure a table being created from a CreateTable call on
             <see cref="T:System.Data.Entity.Migrations.DbMigration"/>
             .
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <typeparam name="TColumns">The type that represents the table's columns.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
            <summary>
            Initializes a new instance of the TableBuilder class.
            </summary>
            <param name="createTableOperation"> The table creation operation to be further configured. </param>
            <param name="migration"> The migration the table is created in. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
             <summary>
             Specifies a primary key for the table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="keyExpression"> A lambda expression representing the property to be used as the primary key. C#: t => t.Id VB.Net: Function(t) t.Id If the primary key is made up of multiple properties then specify an anonymous type including the properties. C#: t => new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
             <param name="name"> The name of the primary key. If null is supplied, a default name will be generated. </param>
             <param name="clustered"> A value indicating whether or not this is a clustered primary key. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
             <returns> Itself, so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
             <summary>
             Specifies an index to be created on the table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="indexExpression"> A lambda expression representing the property to be indexed. C#: t => t.PropertyOne VB.Net: Function(t) t.PropertyOne If multiple properties are to be indexed then specify an anonymous type including the properties. C#: t => new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo } </param>
             <param name="name"> The name of the index. </param>
             <param name="unique"> A value indicating whether or not this is a unique index. </param>
             <param name="clustered"> A value indicating whether or not this is a clustered index. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
             <returns> Itself, so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
             <summary>
             Specifies a foreign key constraint to be created on the table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="principalTable"> Name of the table that the foreign key constraint targets. </param>
             <param name="dependentKeyExpression"> A lambda expression representing the properties of the foreign key. C#: t => t.PropertyOne VB.Net: Function(t) t.PropertyOne If multiple properties make up the foreign key then specify an anonymous type including the properties. C#: t => new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo } </param>
             <param name="cascadeDelete"> A value indicating whether or not cascade delete should be configured on the foreign key constraint. </param>
             <param name="name"> The name of this foreign key constraint. If no name is supplied, a default name will be calculated. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
             <returns> Itself, so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigration">
             <summary>
             Base class for code-based migrations.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to create a new stored procedure.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the stored procedure. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="body">The body of the stored procedure.</param>
             <param name="anonymousArguments">
             The additional arguments that may be processed by providers. Use anonymous type syntax
             to specify arguments. For example, 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
             <summary>
             Adds an operation to create a new stored procedure.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the stored procedure. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="parametersAction">The action that specifies the parameters of the stored procedure.</param>
             <param name="body">The body of the stored procedure.</param>
             <param name="anonymousArguments">
             The additional arguments that may be processed by providers. Use anonymous type syntax
             to specify arguments. For example, 'new { SampleArgument = "MyValue" }'.
             </param>
             <typeparam name="TParameters">
             The parameters in this create stored procedure operation. You do not need to specify this
             type, it will be inferred from the <paramref name="parametersAction" /> parameter you supply.
             </typeparam>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to alter a stored procedure.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the stored procedure. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="body">The body of the stored procedure.</param>
             <param name="anonymousArguments">
             The additional arguments that may be processed by providers. Use anonymous type syntax
             to specify arguments. For example, 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
             <summary>
             Adds an operation to alter a stored procedure.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <typeparam name="TParameters">
             The parameters in this alter stored procedure operation. You do not need to specify this
             type, it will be inferred from the <paramref name="parametersAction" /> parameter you supply.
             </typeparam>
             <param name="name">
             The name of the stored procedure. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="parametersAction">The action that specifies the parameters of the stored procedure.</param>
             <param name="body">The body of the stored procedure.</param>
             <param name="anonymousArguments">
             The additional arguments that may be processed by providers. Use anonymous type syntax
             to specify arguments. For example, 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
             <summary>
             Adds an operation to drop an existing stored procedure with the specified name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the procedure to drop. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="anonymousArguments">
             The additional arguments that may be processed by providers. Use anonymous type syntax
             to specify arguments. For example, 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
             <summary>
             Adds an operation to create a new table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <typeparam name="TColumns">
             The columns in this create table operation. You do not need to specify this type, it will
             be inferred from the columnsAction parameter you supply.
             </typeparam>
             <param name="name"> The name of the table. Schema name is optional, if no schema is specified then dbo is assumed. </param>
             <param name="columnsAction">
             An action that specifies the columns to be included in the table. i.e. t => new { Id =
             t.Int(identity: true), Name = t.String() }
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
             <returns> An object that allows further configuration of the table creation operation. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
             <summary>
             Adds an operation to create a new table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <typeparam name="TColumns">
             The columns in this create table operation. You do not need to specify this type, it will
             be inferred from the columnsAction parameter you supply.
             </typeparam>
             <param name="name"> The name of the table. Schema name is optional, if no schema is specified then dbo is assumed. </param>
             <param name="columnsAction">
             An action that specifies the columns to be included in the table. i.e. t => new { Id =
             t.Int(identity: true), Name = t.String() }
             </param>
             <param name="annotations">Custom annotations that exist on the table to be created. May be null or empty.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
             <returns> An object that allows further configuration of the table creation operation. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
             <summary>
             Adds an operation to handle changes in the annotations defined on tables.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <typeparam name="TColumns">
             The columns in this operation. You do not need to specify this type, it will
             be inferred from the columnsAction parameter you supply.
             </typeparam>
             <param name="name"> The name of the table. Schema name is optional, if no schema is specified then dbo is assumed. </param>
             <param name="columnsAction">
             An action that specifies the columns to be included in the table. i.e. t => new { Id =
             t.Int(identity: true), Name = t.String() }
             </param>
             <param name="annotations">The custom annotations on the table that have changed.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
             <summary>
             Adds an operation to create a new foreign key constraint.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="dependentTable">
             The table that contains the foreign key column. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="dependentColumn"> The foreign key column. </param>
             <param name="principalTable">
             The table that contains the column this foreign key references. Schema name is optional,
             if no schema is specified then dbo is assumed.
             </param>
             <param name="principalColumn">
             The column this foreign key references. If no value is supplied the primary key of the
             principal table will be referenced.
             </param>
             <param name="cascadeDelete">
             A value indicating if cascade delete should be configured for the foreign key
             relationship. If no value is supplied, cascade delete will be off.
             </param>
             <param name="name">
             The name of the foreign key constraint in the database. If no value is supplied a unique name will
             be generated.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
             <summary>
             Adds an operation to create a new foreign key constraint.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="dependentTable">
             The table that contains the foreign key columns. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="dependentColumns"> The foreign key columns. </param>
             <param name="principalTable">
             The table that contains the columns this foreign key references. Schema name is optional,
             if no schema is specified then dbo is assumed.
             </param>
             <param name="principalColumns">
             The columns this foreign key references. If no value is supplied the primary key of the
             principal table will be referenced.
             </param>
             <param name="cascadeDelete">
             A value indicating if cascade delete should be configured for the foreign key
             relationship. If no value is supplied, cascade delete will be off.
             </param>
             <param name="name">
             The name of the foreign key constraint in the database. If no value is supplied a unique name will
             be generated.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop a foreign key constraint based on its name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="dependentTable">
             The table that contains the foreign key column. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="name"> The name of the foreign key constraint in the database. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop a foreign key constraint based on the column it targets.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="dependentTable">
             The table that contains the foreign key column. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="dependentColumn"> The foreign key column. </param>
             <param name="principalTable">
             The table that contains the column this foreign key references. Schema name is optional,
             if no schema is specified then dbo is assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop a foreign key constraint based on the column it targets.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="dependentTable">
             The table that contains the foreign key column.
             Schema name is optional, if no schema is specified then dbo is assumed.
             </param>
             <param name="dependentColumn">The foreign key column.</param>
             <param name="principalTable">
             The table that contains the column this foreign key references.
             Schema name is optional, if no schema is specified then dbo is assumed.
             </param>
             <param name="principalColumn">The columns this foreign key references.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers.
             Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
             <summary>
             Adds an operation to drop a foreign key constraint based on the columns it targets.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="dependentTable">
             The table that contains the foreign key columns. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="dependentColumns"> The foreign key columns. </param>
             <param name="principalTable">
             The table that contains the columns this foreign key references. Schema name is optional,
             if no schema is specified then dbo is assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
             <summary>
             Adds an operation to drop a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the table to be dropped. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
             <summary>
             Adds an operation to drop a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the table to be dropped. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="removedColumnAnnotations">Custom annotations that exist on columns of the table that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
             <summary>
             Adds an operation to drop a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the table to be dropped. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="removedAnnotations">Custom annotations that exist on the table that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
             <summary>
             Adds an operation to drop a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the table to be dropped. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="removedAnnotations">Custom annotations that exist on the table that is being dropped. May be null or empty.</param>
             <param name="removedColumnAnnotations">Custom annotations that exist on columns of the table that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to move a table to a new schema.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the table to be moved. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="newSchema"> The schema the table is to be moved to. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to move a stored procedure to a new schema.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the stored procedure to be moved. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="newSchema"> The schema the stored procedure is to be moved to. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to rename a table. To change the schema of a table use MoveTable.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the table to be renamed. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="newName">
             The new name for the table. Schema name is optional, if no schema is specified then dbo is
             assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to rename a stored procedure. To change the schema of a stored procedure use MoveStoredProcedure
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name">
             The name of the stored procedure to be renamed. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="newName">
             The new name for the stored procedure. Schema name is optional, if no schema is specified then
             dbo is assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
             <summary>
             Adds an operation to rename a column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table that contains the column to be renamed. Schema name is optional, if no
             schema is specified then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be renamed. </param>
             <param name="newName"> The new name for the column. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
             <summary>
             Adds an operation to add a column to an existing table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to add the column to. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be added. </param>
             <param name="columnAction">
             An action that specifies the column to be added. i.e. c => c.Int(nullable: false,
             defaultValue: 3)
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the column from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
             <summary>
             Adds an operation to drop an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the column from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="removedAnnotations">Custom annotations that exist on the column that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
             <summary>
             Adds an operation to alter the definition of an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table the column exists in. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be changed. </param>
             <param name="columnAction">
             An action that specifies the new definition for the column. i.e. c => c.String(nullable:
             false, defaultValue: "none")
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create a new primary key.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key column. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="column"> The primary key column. </param>
             <param name="name">
             The name of the primary key in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered primary key. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create a new primary key based on multiple columns.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key columns. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="columns"> The primary key columns. </param>
             <param name="name">
             The name of the primary key in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered primary key. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop an existing primary key that does not have the default name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key column. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the primary key to be dropped. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
             <summary>
             Adds an operation to drop an existing primary key that was created with the default name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key column. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create an index on a single column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to create the index on. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="column"> The name of the column to create the index on. </param>
             <param name="unique">
             A value indicating if this is a unique index. If no value is supplied a non-unique index will be
             created.
             </param>
             <param name="name">
             The name to use for the index in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered index. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create an index on multiple columns.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to create the index on. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="columns"> The name of the columns to create the index on. </param>
             <param name="unique">
             A value indicating if this is a unique index. If no value is supplied a non-unique index will be
             created.
             </param>
             <param name="name">
             The name to use for the index in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered index. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop an index based on its name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the index from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the index to be dropped. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
             <summary>
             Adds an operation to drop an index based on the columns it targets.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the index from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="columns"> The name of the column(s) the index targets. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
             <summary>
             Adds an operation to rename an index.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table that contains the index to be renamed. Schema name is optional, if no
             schema is specified then dbo is assumed.
             </param>
             <param name="name"> The name of the index to be renamed. </param>
             <param name="newName"> The new name for the index. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to execute a SQL command or set of SQL commands.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sql"> The SQL to be executed. </param>
             <param name="suppressTransaction">
             A value indicating if the SQL should be executed outside of the transaction being
             used for the migration process. If no value is supplied the SQL will be executed within the transaction.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to execute a SQL file.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sqlFile"> 
             The SQL file to be executed.  Relative paths are assumed to be relative to the current AppDomain's BaseDirectory.
             </param>
             <param name="suppressTransaction">
             A value indicating if the SQL should be executed outside of the transaction being
             used for the migration process. If no value is supplied the SQL will be executed within the transaction.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
             <summary>
             Adds an operation to execute a SQL resource file.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sqlResource"> The manifest resource name of the SQL resource file to be executed. </param>
             <param name="resourceAssembly">
             The assembly containing the resource file. The calling assembly is assumed if not provided.
             </param>
             <param name="suppressTransaction">
             A value indicating if the SQL should be executed outside of the transaction being
             used for the migration process. If no value is supplied the SQL will be executed within the transaction.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
            <summary>
            Configuration relating to the use of migrations for a given model.
            You will typically create a configuration class that derives
            from <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1"/> rather than
            using this class.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
            <summary>
            The default directory that migrations are stored in.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
            <summary>
            Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
            <summary>
            Adds a new SQL generator to be used for a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to set the SQL generator for. </param>
            <param name="migrationSqlGenerator"> The SQL generator to be used. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
            <summary>
            Gets the SQL generator that is set to be used with a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to get the SQL generator for. </param>
            <returns> The SQL generator that is set for the database provider. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
            <summary>
            Adds a new factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances to be used for a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to set the SQL generator for. </param>
            <param name="factory">
            A factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances for a given <see cref="T:System.Data.Common.DbConnection"/> and
            <see cref="T:System.String"/> representing the default schema.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
            <summary>
            Gets the history context factory that is set to be used with a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to get thefactory for. </param>
            <returns> The history context factory that is set for the database provider. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
            <summary>
            Gets or sets a value indicating if automatic migrations can be used when migrating the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
            <summary>
            Gets or sets the string used to distinguish migrations belonging to this configuration
            from migrations belonging to other configurations using the same database.
            This property enables migrations from multiple different models to be applied to applied to a single database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
            <summary>
            Gets or sets a value indicating if data loss is acceptable during automatic migration.
            If set to false an exception will be thrown if data loss may occur as part of an automatic migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
            <summary>
            Gets or sets the derived DbContext representing the model to be migrated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
            <summary>
            Gets or sets the namespace used for code-based migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
            <summary>
            Gets or sets the sub-directory that code-based migrations are stored in.
            Note that this property must be set to a relative path for a sub-directory under the
            Visual Studio project root; it cannot be set to an absolute path.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
            <summary>
            Gets or sets the code generator to be used when scaffolding migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
            <summary>
            Gets or sets the assembly containing code-based migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
            <summary>
            Gets or sets a value to override the connection of the database to be migrated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
            <summary>
            Gets or sets the timeout value used for the individual commands within a
            migration. A null value indicates that the default value of the underlying
            provider will be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
            <summary>
            Configuration relating to the use of migrations for a given model.
            </summary>
            <typeparam name="TContext"> The context representing the model that this configuration applies to. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
            <summary>
            Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
            <summary>
            Runs after upgrading to the latest migration to allow seed data to be updated.
            </summary>
            <remarks>
            Note that the database may already contain seed data when this method runs. This means that
            implementations of this method must check whether or not seed data is present and/or up-to-date
            and then only make changes if necessary and in a non-destructive way. The 
            <see cref="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])"/>
            can be used to help with this, but for seeding large amounts of data it may be necessary to do less
            granular checks if performance is an issue.
            If the <see cref="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2"/> database 
            initializer is being used, then this method will be called each time that the initializer runs.
            If one of the <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1"/>, <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1"/>,
            or <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/> initializers is being used, then this method will not be
            called and the Seed method defined in the initializer should be used instead.
            </remarks>
            <param name="context"> Context to be used for updating seed data. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrator">
            <summary>
            DbMigrator is used to apply existing migrations to a database.
            DbMigrator can be used to upgrade and downgrade to any given migration.
            To scaffold migrations based on changes to your model use <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder"/>
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
            <summary>
            Base class for decorators that wrap the core <see cref="T:System.Data.Entity.Migrations.DbMigrator"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
            <summary>
            Initializes a new instance of the MigratorBase class.
            </summary>
            <param name="innerMigrator"> The migrator that this decorator is wrapping. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
            <summary>
            Gets a list of the pending migrations that have not been applied to the database.
            </summary>
            <returns> List of migration Ids </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
            <summary>
            Updates the target database to the latest migration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
            <summary>
            Updates the target database to a given migration.
            </summary>
            <param name="targetMigration"> The migration to upgrade/downgrade to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
            <summary>
            Gets a list of the migrations that are defined in the assembly.
            </summary>
            <returns> List of migration Ids </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
            <summary>
            Gets a list of the migrations that have been applied to the database.
            </summary>
            <returns> List of migration Ids </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
            <summary>
            Gets the configuration being used for the migrations process.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
            <summary>
            Migration Id representing the state of the database before any migrations are applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
            <summary>
            Initializes a new instance of the DbMigrator class.
            </summary>
            <param name="configuration"> Configuration to be used for the migration process. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
            <summary>
            Gets all migrations that are defined in the configured migrations assembly.
            </summary>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
            <summary>
            Gets all migrations that have been applied to the target database.
            </summary>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
            <summary>
            Gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
            <summary>
            Updates the target database to a given migration.
            </summary>
            <param name="targetMigration"> The migration to upgrade/downgrade to. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
            <summary>
            Gets the configuration that is being used for the migration process.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
            <summary>
            A set of extension methods for <see cref="T:System.Data.Entity.IDbSet`1"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
            <summary>
            Adds or updates entities by key when SaveChanges is called. Equivalent to an "upsert" operation
            from database terminology.
            This method can useful when seeding data using Migrations.
            </summary>
            <typeparam name="TEntity">The type of entities to add or update.</typeparam>
            <param name="set">The set to which the entities belong.</param>
            <param name="entities"> The entities to add or update. </param>
            <remarks>
            When the <paramref name="set" /> parameter is a custom or fake IDbSet implementation, this method will
            attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
            <summary>
            Adds or updates entities by a custom identification expression when SaveChanges is called.
            Equivalent to an "upsert" operation from database terminology.
            This method can useful when seeding data using Migrations.
            </summary>
            <typeparam name="TEntity">The type of entities to add or update.</typeparam>
            <param name="set">The set to which the entities belong.</param>
            <param name="identifierExpression"> An expression specifying the properties that should be used when determining whether an Add or Update operation should be performed. </param>
            <param name="entities"> The entities to add or update. </param>
            <remarks>
            When the <paramref name="set" /> parameter is a custom or fake IDbSet implementation, this method will
            attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
            <summary>
            Generates C# code for a code-based migration.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
            <summary>
            Base class for providers that generate code for code-based migrations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <summary>
            Generates the code that should be added to the users project.
            </summary>
            <param name="migrationId"> Unique identifier of the migration. </param>
            <param name="operations"> Operations to be performed by the migration. </param>
            <param name="sourceModel"> Source model to be stored in the migration metadata. </param>
            <param name="targetModel"> Target model to be stored in the migration metadata. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
            <summary>
            Gets the namespaces that must be output as "using" or "Imports" directives to handle
            the code generated by the given operations.
            </summary>
            <param name="operations"> The operations for which code is going to be generated. </param>
            <returns> An ordered list of namespace names. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
            <summary>
            Gets the default namespaces that must be output as "using" or "Imports" directives for
            any code generated.
            </summary>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
            <returns> An ordered list of namespace names. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> instances that are being used.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
            <summary>
            Generates the primary code file that the user can view and edit.
            </summary>
            <param name="operations"> Operations to be performed by the migration. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates the code behind file with migration metadata.
            </summary>
            <param name="migrationId"> Unique identifier of the migration. </param>
            <param name="sourceModel"> Source model to be stored in the migration metadata. </param>
            <param name="targetModel"> Target model to be stored in the migration metadata. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates a property to return the source or target model in the code behind file.
            </summary>
            <param name="name"> Name of the property. </param>
            <param name="value"> Value to be returned. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
            Generates class attributes.
            </summary>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a namespace, using statements and class definition.
            </summary>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="base"> Base class for the generated class. </param>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
            <param name="namespaces"> Namespaces for which using directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates the closing code for a class that was started with WriteClassStart.
            </summary>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation"/>.
            </summary>
            <param name="addColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation"/>.
            </summary>
            <param name="dropColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation"/>.
            </summary>
            <param name="alterColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for to re-create the given dictionary of annotations for use when passing
            these annotations as a parameter of a <see cref="T:System.Data.Entity.Migrations.DbMigration"/>. call.
            </summary>
            <param name="annotations">The annotations to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for to re-create the given dictionary of annotations for use when passing
            these annotations as a parameter of a <see cref="T:System.Data.Entity.Migrations.DbMigration"/>. call.
            </summary>
            <param name="annotations">The annotations to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for the given annotation value, which may be null. The default behavior is to use an
            <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> if one is registered, otherwise call ToString on the annotation value.
            </summary>
            <remarks>
            Note that a <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> can be registered to generate code for custom annotations
            without the need to override the entire code generator.
            </remarks>
            <param name="name">The name of the annotation for which code is needed.</param>
            <param name="annotation">The annotation value to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
            <param name="createProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
            <param name="alterProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
            <param name="parameterModel">The parameter definition to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
            <param name="emitName">A value indicating whether to include the column name in the definition.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
            <param name="dropProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for an <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation"/>.
            </summary>
            <param name="alterTableOperation">The operation for which code should be generated.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to specify a set of column names using a lambda expression.
            </summary>
            <param name="columns"> The columns to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation"/>.
            </summary>
            <param name="dropPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/>.
            </summary>
            <param name="addForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation"/>.
            </summary>
            <param name="dropForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/>.
            </summary>
            <param name="createIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation"/>.
            </summary>
            <param name="dropIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
            Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel"/>.
            </summary>
            <param name="column"> The column definition to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="emitName"> A value indicating whether to include the column name in the definition. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
            <summary>
            Generates code to specify the default value for a <see cref="T:byte[]" /> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.DateTime"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.DateTimeOffset"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Decimal"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Guid"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Int64"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Single"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.String"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.TimeSpan"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Data.Entity.Spatial.DbGeography"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
            <summary>
            Generates code to specify the default value for a column of unknown data type.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation"/>.
            </summary>
            <param name="dropTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation"/>.
            </summary>
            <param name="moveTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation"/>.
            </summary>
            <param name="moveProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation"/>.
            </summary>
            <param name="renameTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation"/>.
            </summary>
            <param name="renameProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation"/>.
            </summary>
            <param name="renameColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation"/>.
            </summary>
            <param name="renameIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation"/>.
            </summary>
            <param name="sqlOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
            <summary>
            Removes any invalid characters from the name of an database artifact.
            </summary>
            <param name="name"> The name to be scrubbed. </param>
            <returns> The scrubbed name. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
            Gets the type name to use for a column of the given data type.
            </summary>
            <param name="primitiveTypeKind"> The data type to translate. </param>
            <returns> The type name to use in the generated migration. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
            <summary>
            Quotes an identifier using appropriate escaping to allow it to be stored in a string.
            </summary>
            <param name="identifier"> The identifier to be quoted. </param>
            <returns> The quoted identifier. </returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
            <summary>
            Scaffolds code-based migrations to apply pending model changes to the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
            <summary>
            Initializes a new instance of the MigrationScaffolder class.
            </summary>
            <param name="migrationsConfiguration"> Configuration to be used for scaffolding. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
            <summary>
            Scaffolds a code based migration to apply any pending model changes to the database.
            </summary>
            <param name="migrationName"> The name to use for the scaffolded migration. </param>
            <returns> The scaffolded migration. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
            <summary>
            Scaffolds a code based migration to apply any pending model changes to the database.
            </summary>
            <param name="migrationName"> The name to use for the scaffolded migration. </param>
            <param name="ignoreChanges"> Whether or not to include model changes. </param>
            <returns> The scaffolded migration. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
            <summary>
            Scaffolds the initial code-based migration corresponding to a previously run database initializer.
            </summary>
            <returns> The scaffolded migration. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
            <summary>
            Gets or sets the namespace used in the migration's generated code.
            By default, this is the same as MigrationsNamespace on the migrations
            configuration object passed into the constructor. For VB.NET projects, this
            will need to be updated to take into account the project's root namespace.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
            <summary>
            Represents a code-based migration that has been scaffolded and is ready to be written to a file.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
            <summary>
            Gets or sets the unique identifier for this migration.
            Typically used for the file name of the generated code.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
            <summary>
            Gets or sets the scaffolded migration code that the user can edit.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
            <summary>
            Gets or sets the scaffolded migration code that should be stored in a code behind file.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
            <summary>
            Gets or sets the programming language used for this migration.
            Typically used for the file extension of the generated code.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
            <summary>
            Gets or sets the subdirectory in the user's project that this migration should be saved in.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
            <summary>
            Gets a dictionary of string resources to add to the migration resource file.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
            <summary>
            Gets or sets whether the migration was re-scaffolded.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
            <summary>
            Helper class that is used by design time tools to run migrations related
            commands that need to interact with an application that is being edited
            in Visual Studio.
            Because the application is being edited the assemblies need to
            be loaded in a separate AppDomain to ensure the latest version
            is always loaded.
            The App/Web.config file from the startup project is also copied
            to ensure that any configuration is applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
            Initializes a new instance of the ToolingFacade class.
            </summary>
            <param name="migrationsAssemblyName"> The name of the assembly that contains the migrations configuration to be used. </param>
            <param name="contextAssemblyName"> The name of the assembly that contains the DbContext to be used. </param>
            <param name="configurationTypeName"> The namespace qualified name of migrations configuration to be used. </param>
            <param name="workingDirectory"> The working directory containing the compiled assemblies. </param>
            <param name="configurationFilePath"> The path of the config file from the startup project. </param>
            <param name="dataDirectory"> The path of the application data directory from the startup project. Typically the App_Data directory for web applications or the working directory for executables. </param>
            <param name="connectionStringInfo"> The connection to the database to be migrated. If null is supplied, the default connection for the context will be used. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
            <summary>
            Releases all unmanaged resources used by the facade.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
            <summary>
            Gets the fully qualified name of all types deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> All context types found. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
            <summary>
            Gets the fully qualified name of a type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="contextTypeName"> The name of the context type. If null, the single context type found in the assembly will be returned. </param>
            <returns> The context type found. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
            <summary>
            Gets a list of all migrations that have been applied to the database.
            </summary>
            <returns> Ids of applied migrations. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
            <summary>
            Gets a list of all migrations that have not been applied to the database.
            </summary>
            <returns> Ids of pending migrations. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
            <summary>
            Updates the database to the specified migration.
            </summary>
            <param name="targetMigration"> The Id of the migration to migrate to. If null is supplied, the database will be updated to the latest migration. </param>
            <param name="force"> Value indicating if data loss during automatic migration is acceptable. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
            <summary>
            Generates a SQL script to migrate between two migrations.
            </summary>
            <param name="sourceMigration"> The migration to update from. If null is supplied, a script to update the current database will be produced. </param>
            <param name="targetMigration"> The migration to update to. If null is supplied, a script to update to the latest migration will be produced. </param>
            <param name="force"> Value indicating if data loss during automatic migration is acceptable. </param>
            <returns> The generated SQL script. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Scaffolds a code-based migration to apply any pending model changes.
            </summary>
            <param name="migrationName"> The name for the generated migration. </param>
            <param name="language"> The programming language of the generated migration. </param>
            <param name="rootNamespace"> The root namespace of the project the migration will be added to. </param>
            <param name="ignoreChanges"> Whether or not to include model changes. </param>
            <returns> The scaffolded migration. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
            <summary>
            Scaffolds the initial code-based migration corresponding to a previously run database initializer.
            </summary>
            <param name="language"> The programming language of the generated migration. </param>
            <param name="rootNamespace"> The root namespace of the project the migration will be added to. </param>
            <returns> The scaffolded migration. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the facade.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
            <summary>
            Gets or sets an action to be run to log information.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
            <summary>
            Gets or sets an action to be run to log warnings.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
            <summary>
            Gets or sets an action to be run to log verbose information.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
            <summary>
            Base class for loggers that can be used for the migrations process.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="message"> The message to be logged. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
            <summary>
            Logs a warning that the user should be made aware of.
            </summary>
            <param name="message"> The message to be logged. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
            <summary>
            Logs some additional information that should only be presented to the user if they request verbose output.
            </summary>
            <param name="message"> The message to be logged. </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
            <summary>
            Generates VB.Net code for a code-based migration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
            <summary>
            Generates the primary code file that the user can view and edit.
            </summary>
            <param name="operations"> Operations to be performed by the migration. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates the code behind file with migration metadata.
            </summary>
            <param name="migrationId"> Unique identifier of the migration. </param>
            <param name="sourceModel"> Source model to be stored in the migration metadata. </param>
            <param name="targetModel"> Target model to be stored in the migration metadata. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates a property to return the source or target model in the code behind file.
            </summary>
            <param name="name"> Name of the property. </param>
            <param name="value"> Value to be returned. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
            Generates class attributes.
            </summary>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a namespace, using statements and class definition.
            </summary>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="base"> Base class for the generated class. </param>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
            <param name="namespaces"> Namespaces for which Imports directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates the closing code for a class that was started with WriteClassStart.
            </summary>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation"/>.
            </summary>
            <param name="addColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation"/>.
            </summary>
            <param name="dropColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation"/>.
            </summary>
            <param name="alterColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for to re-create the given dictionary of annotations for use when passing
            these annotations as a parameter of a <see cref="T:System.Data.Entity.Migrations.DbMigration"/>. call.
            </summary>
            <param name="annotations">The annotations to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for to re-create the given dictionary of annotations for use when passing
            these annotations as a parameter of a <see cref="T:System.Data.Entity.Migrations.DbMigration"/>. call.
            </summary>
            <param name="annotations">The annotations to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for the given annotation value, which may be null. The default behavior is to use an
            <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> if one is registered, otherwise call ToString on the annotation value.
            </summary>
            <remarks>
            Note that a <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> can be registered to generate code for custom annotations
            without the need to override the entire code generator.
            </remarks>
            <param name="name">The name of the annotation for which code is needed.</param>
            <param name="annotation">The annotation value to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
            <param name="createProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
            <param name="alterProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
            <param name="parameterModel">The parameter model definition to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
            <param name="emitName">true to include the column name in the definition; otherwise, false.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
            <param name="dropProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for an <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation"/>.
            </summary>
            <param name="alterTableOperation">The operation for which code should be generated.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to specify a set of column names using a lambda expression.
            </summary>
            <param name="columns"> The columns to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/>.
            </summary>
            <param name="addForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation"/>.
            </summary>
            <param name="dropForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation"/>.
            </summary>
            <param name="dropPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/>.
            </summary>
            <param name="createIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation"/>.
            </summary>
            <param name="dropIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
            Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel"/>.
            </summary>
            <param name="column"> The column definition to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="emitName"> A value indicating whether to include the column name in the definition. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
            <summary>
            Generates code to specify the default value for a <see cref="T:byte[]" /> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.DateTime"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.DateTimeOffset"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Decimal"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Guid"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Int64"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Single"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.String"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.TimeSpan"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Data.Entity.Spatial.DbGeography"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
            <summary>
            Generates code to specify the default value for a column of unknown data type.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation"/>.
            </summary>
            <param name="dropTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation"/>.
            </summary>
            <param name="moveTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation"/>.
            </summary>
            <param name="moveProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation"/>.
            </summary>
            <param name="renameTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation"/>.
            </summary>
            <param name="renameProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation"/>.
            </summary>
            <param name="renameColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation"/>.
            </summary>
            <param name="renameIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation"/>.
            </summary>
            <param name="sqlOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
            <summary>
            Removes any invalid characters from the name of an database artifact.
            </summary>
            <param name="name"> The name to be scrubbed. </param>
            <returns> The scrubbed name. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
            <summary>
            Gets the type name to use for a column of the given data type.
            </summary>
            <param name="primitiveTypeKind"> The data type to translate. </param>
            <returns> The type name to use in the generated migration. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
            <summary>
            Quotes an identifier using appropriate escaping to allow it to be stored in a string.
            </summary>
            <param name="identifier"> The identifier to be quoted. </param>
            <returns> The quoted identifier. </returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
            <summary>
            This class is used by Code First Migrations to read and write migration history
            from the database.
            To customize the definition of the migrations history table you can derive from
            this class and override OnModelCreating. Derived instances can either be registered
            on a per migrations configuration basis using <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})"/>,
            or globally using <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})"/>.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
            <summary>
            The default name used for the migrations history table.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Initializes a new instance of the HistoryContext class.
            If you are creating a derived history context you will generally expose a constructor
            that accepts these same parameters and passes them to this base constructor.
            </summary>
            <param name="existingConnection">
            An existing connection to use for the new context.
            </param>
            <param name="defaultSchema">
            The default schema of the model being migrated.
            This schema will be used for the migrations history table unless a different schema is configured in OnModelCreating.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            Applies the default configuration for the migrations history table. If you override
            this method it is recommended that you call this base implementation before applying your
            custom configuration.
            </summary>
            <param name="modelBuilder"> The builder that defines the model for the context being created. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
            <summary>
            Gets the key used to locate a model that was previously built for this context. This is used
            to avoid processing OnModelCreating and calculating the model every time a new context instance is created.
            By default this property returns the default schema.
            In most cases you will not need to override this property. However, if your implementation of OnModelCreating
            contains conditional logic that results in a different model being built for the same database provider and
            default schema you should override this property and calculate an appropriate key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
            <summary>
            Gets the default schema of the model being migrated.
            This schema will be used for the migrations history table unless a different schema is configured in OnModelCreating.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
            <summary>
            Gets or sets a <see cref="T:System.Data.Entity.DbSet`1"/> that can be used to read and write <see cref="T:System.Data.Entity.Migrations.History.HistoryRow"/> instances.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
            <summary>
            This class is used by Code First Migrations to read and write migration history
            from the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
            <summary>
            Gets or sets the Id of the migration this row represents.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
            <summary>
            Gets or sets a key representing to which context the row applies.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
            <summary>
            Gets or sets the state of the model after this migration was applied.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
            <summary>
            Gets or sets the version of Entity Framework that created this entry.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
            <summary>
            Represents an error that occurs when an automatic migration would result in data loss.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
            <summary>
            Initializes a new instance of the AutomaticDataLossException class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutomaticDataLossException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
            <summary>
            Represents an error that occurs when there are pending model changes after applying the last migration and automatic migration is disabled.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
            <summary>
            Initializes a new instance of the AutomaticMigrationsDisabledException class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutomaticMigrationsDisabledException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
            <param name="message"> The message that describes the error. </param>
            <param name="innerException"> The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
            <summary>
            Provides additional metadata about a code-based migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
            <summary>
            Gets the unique identifier for the migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
            <summary>
            Gets the state of the model before this migration is run.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
            <summary>
            Gets the state of the model after this migration is run.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
            <summary>
            Decorator to provide logging during migrations operations..
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
            <summary>
            Initializes a new instance of the MigratorLoggingDecorator class.
            </summary>
            <param name="innerMigrator"> The migrator that this decorator is wrapping. </param>
            <param name="logger"> The logger to write messages to. </param>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
            <summary>
            Decorator to produce a SQL script instead of applying changes to the database.
            Using this decorator to wrap <see cref="T:System.Data.Entity.Migrations.DbMigrator"/> will prevent <see cref="T:System.Data.Entity.Migrations.DbMigrator"/>
            from applying any changes to the target database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
            <summary>
            Initializes a new instance of the  MigratorScriptingDecorator class.
            </summary>
            <param name="innerMigrator"> The migrator that this decorator is wrapping. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
            <summary>
            Produces a script to update the database.
            </summary>
            <param name="sourceMigration">
            The migration to update from. If null is supplied, a script to update the
            current database will be produced.
            </param>
            <param name="targetMigration">
            The migration to update to. If null is supplied,
            a script to update to the latest migration will be produced.
            </param>
            <returns> The generated SQL script. </returns>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
             <summary>
             Represents a column being added to a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
             <summary>
             Initializes a new instance of the AddColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table the column should be added to. </param>
             <param name="column"> Details of the column being added. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
            <summary>
            Gets the name of the table the column should be added to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
            <summary>
            Gets the details of the column being added.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
            <summary>
            Gets an operation that represents dropping the added column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
             <summary>
             Represents a foreign key constraint being added to a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
             <summary>
             Base class for changes that affect foreign key constraints.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the ForeignKeyOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
             <summary>
             Gets or sets the name of the table that the foreign key constraint targets.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
             <summary>
             Gets or sets the name of the table that the foreign key columns exist in.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
            <summary>
            The names of the foreign key column(s).
            
            Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
            (such as the end user of an application). If input is accepted from such sources it should be validated 
            before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
            <summary>
            Gets a value indicating if a specific name has been supplied for this foreign key constraint.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
             <summary>
             Gets or sets the name of this foreign key constraint.
             If no name is supplied, a default name will be calculated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the AddForeignKeyOperation class.
             The PrincipalTable, PrincipalColumns, DependentTable and DependentColumns properties should also be populated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
            <summary>
            Gets an operation to create an index on the foreign key column(s).
            </summary>
            <returns> An operation to add the index. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
             <summary>
             The names of the column(s) that the foreign key constraint should target.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
            <summary>
            Gets or sets a value indicating if cascade delete should be configured on the foreign key constraint.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
            <summary>
            Gets an operation to drop the foreign key constraint.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
             <summary>
             Represents adding a primary key to a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
             <summary>
             Common base class to represent operations affecting primary keys.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
            <summary>
            Returns the default name for the primary key.
            </summary>
            <param name="table">The target table name.</param>
            <returns>The default primary key name.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the PrimaryKeyOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
             <summary>
             Gets or sets the name of the table that contains the primary key.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
             <summary>
             Gets the column(s) that make up the primary key.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
            <summary>
            Gets a value indicating if a specific name has been supplied for this primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
             <summary>
             Gets or sets the name of this primary key.
             If no name is supplied, a default name will be calculated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the AddPrimaryKeyOperation class.
             The Table and Columns properties should also be populated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
            <summary>
            Gets an operation to drop the primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
            <summary>
            Gets or sets whether this is a clustered primary key.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
             <summary>
             Represents altering an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
             <summary>
             Initializes a new instance of the AlterColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table that the column belongs to. </param>
             <param name="column"> Details of what the column should be altered to. </param>
             <param name="isDestructiveChange"> Value indicating if this change will result in data loss. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
             <summary>
             Initializes a new instance of the AlterColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table that the column belongs to. </param>
             <param name="column"> Details of what the column should be altered to. </param>
             <param name="isDestructiveChange"> Value indicating if this change will result in data loss. </param>
             <param name="inverse"> An operation to revert this alteration of the column. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
            <summary>
            Gets the name of the table that the column belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
            <summary>
            Gets the new definition for the column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
            <summary>
            Gets an operation that represents reverting the alteration.
            The inverse cannot be automatically calculated,
            if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
             <summary>
             Represents information about a column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
             <summary>
             Initializes a new instance of the ColumnModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this column. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
             <summary>
             Initializes a new instance of the ColumnModel class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="type"> The data type for this column. </param>
             <param name="typeUsage"> Additional details about the data type. This includes details such as maximum length, nullability etc. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
            <summary>
            Determines if this column is a narrower data type than another column.
            Used to determine if altering the supplied column definition to this definition will result in data loss.
            </summary>
            <param name="column"> The column to compare to. </param>
            <param name="providerManifest"> Details of the database provider being used. </param>
            <returns> True if this column is of a narrower data type. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
            <summary>
            Gets the CLR type corresponding to the database type of this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
            <summary>
            Gets the default value for the CLR type corresponding to the database type of this column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
            <summary>
            Gets or sets a value indicating if this column can store null values.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
            <summary>
            Gets or sets a value indicating if values for this column will be generated by the database using the identity pattern.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
            <summary>
            Gets or sets a value indicating if this property model should be configured as a timestamp.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
            <summary>
            Gets or sets the custom annotations that have changed on the column.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
             <summary>
             Represents creating a database index.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
            <summary>
                Common base class for operations affecting indexes.
                Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
                (such as the end user of an application). If input is accepted from such sources it should be validated
                before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a default index name based on the supplied column names.
            </summary>
            <param name="columns">The column names used to create a default index name.</param>
            <returns>A default index name.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the IndexOperation class.
                Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
                (such as the end user of an application). If input is accepted from such sources it should be validated
                before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
            <param name="anonymousArguments">
                Additional arguments that may be processed by providers. Use anonymous type syntax to
                specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
            <summary>
                Gets or sets the table the index belongs to.
                Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
                (such as the end user of an application). If input is accepted from such sources it should be validated
                before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
            <summary>
                Gets the columns that are indexed.
                Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
                (such as the end user of an application). If input is accepted from such sources it should be validated
                before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
            <summary>
                Gets a value indicating if a specific name has been supplied for this index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
            <summary>
                Gets or sets the name of this index.
                If no name is supplied, a default name will be calculated.
                Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources
                (such as the end user of an application). If input is accepted from such sources it should be validated
                before being passed to these APIs to protect against SQL injection attacks etc.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the CreateIndexOperation class.
             The Table and Columns properties should also be populated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
            <summary>
            Gets or sets a value indicating if this is a unique index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
            <summary>
            Gets an operation to drop this index.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
            <summary>
            Gets or sets whether this is a clustered index.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
             <summary>
             Represents creating a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
             <summary>
             Initializes a new instance of the CreateTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> Name of the table to be created. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
             <summary>
             Initializes a new instance of the CreateTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> Name of the table to be created. </param>
             <param name="annotations">Custom annotations that exist on the table to be created. May be null or empty.</param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
            <summary>
            Gets the name of the table to be created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
            <summary>
            Gets the columns to be included in the new table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
            <summary>
            Gets or sets the primary key for the new table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
            <summary>
            Gets custom annotations that exist on the table to be created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
            <summary>
            Gets an operation to drop the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
             <summary>
             Represents a column being dropped from a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the DropColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table the column should be dropped from. </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
             <summary>
             Initializes a new instance of the DropColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table the column should be dropped from. </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="removedAnnotations">Custom annotations that exist on the column that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
             <summary>
             Initializes a new instance of the DropColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table the column should be dropped from. </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="inverse"> The operation that represents reverting the drop operation. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
             <summary>
             Initializes a new instance of the DropColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> The name of the table the column should be dropped from. </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="removedAnnotations">Custom annotations that exist on the column that is being dropped. May be null or empty.</param>
             <param name="inverse"> The operation that represents reverting the drop operation. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
            <summary>
            Gets the name of the table the column should be dropped from.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
            <summary>
            Gets the name of the column to be dropped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
            <summary>
            Gets custom annotations that exist on the column that is being dropped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
            <summary>
            Gets an operation that represents reverting dropping the column.
            The inverse cannot be automatically calculated,
            if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
             <summary>
             Represents a foreign key constraint being dropped from a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the DropForeignKeyOperation class.
             The PrincipalTable, DependentTable and DependentColumns properties should also be populated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
             <summary>
             Initializes a new instance of the DropForeignKeyOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc..
             </summary>
             <param name="inverse"> The operation that represents reverting dropping the foreign key constraint. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
            <summary>
            Gets an operation to drop the associated index on the foreign key column(s).
            </summary>
            <returns> An operation to drop the index. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
            <summary>
            Gets an operation that represents reverting dropping the foreign key constraint.
            The inverse cannot be automatically calculated,
            if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
             <summary>
             Represents dropping an existing index.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the DropIndexOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
             <summary>
             Initializes a new instance of the DropIndexOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="inverse"> The operation that represents reverting dropping the index. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
            <summary>
            Gets an operation that represents reverting dropping the index.
            The inverse cannot be automatically calculated,
            if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
             <summary>
             Represents dropping a primary key from a table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the DropPrimaryKeyOperation class.
             The Table and Columns properties should also be populated.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
            <summary>
            Gets an operation to add the primary key.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
            <summary>
            Used when altering the migrations history table so that the table can be rebuilt rather than just dropping and adding the primary key.
            </summary>
            <value>
            The create table operation for the migrations history table.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
             <summary>
             Represents dropping an existing table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
             <summary>
             Initializes a new instance of the DropTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> The name of the table to be dropped. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
             <summary>
             Initializes a new instance of the DropTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> The name of the table to be dropped. </param>
             <param name="removedAnnotations">Custom annotations that exist on the table that is being dropped. May be null or empty.</param>
             <param name="removedColumnAnnotations">Custom annotations that exist on columns of the table that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
             <summary>
             Initializes a new instance of the DropTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> The name of the table to be dropped. </param>
             <param name="inverse"> An operation that represents reverting dropping the table. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
             <summary>
             Initializes a new instance of the DropTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> The name of the table to be dropped. </param>
             <param name="removedAnnotations">Custom annotations that exist on the table that is being dropped. May be null or empty.</param>
             <param name="removedColumnAnnotations">Custom annotations that exist on columns of the table that is being dropped. May be null or empty.</param>
             <param name="inverse"> An operation that represents reverting dropping the table. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
            <summary>
            Gets the name of the table to be dropped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
            <summary>
            Gets custom annotations that exist on the table that is being dropped. 
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
            <summary>
            Gets custom annotations that exist on columns of the table that is being dropped.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
            <summary>
            Gets an operation that represents reverting dropping the table.
            The inverse cannot be automatically calculated,
            if it was not supplied to the constructor this property will return null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
             <summary>
             Operation representing DML changes to the migrations history table.
             The migrations history table is used to store a log of the migrations that have been applied to the database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
             <summary>
             Initializes a new instance of the HistoryOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="commandTrees"> A sequence of command trees representing the operations being applied to the history table. </param>
             <param name="anonymousArguments"> Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
            <summary>
            A sequence of commands representing the operations being applied to the history table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
             <summary>
             Represents moving a table from one schema to another.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the MoveTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> Name of the table to be moved. </param>
             <param name="newSchema"> Name of the schema to move the table to. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
            <summary>
            Gets the name of the table to be moved.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
            <summary>
            Gets the name of the schema to move the table to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
            <summary>
            Gets an operation that moves the table back to its original schema.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
            <summary>
            Used when altering the migrations history table so that data can be moved to the new table.
            </summary>
            <value>
            The context key for the model.
            </value>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
            <summary>
            Gets a value that indicates whether this is a system table.
            </summary>
            <returns>
            true if the table is a system table; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
            <summary>
            Used when altering the migrations history table so that the table can be rebuilt rather than just dropping and adding the primary key.
            </summary>
            <value>
            The create table operation for the migrations history table.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
             <summary>
             Represents renaming an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the RenameColumnOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table"> Name of the table the column belongs to. </param>
             <param name="name"> Name of the column to be renamed. </param>
             <param name="newName"> New name for the column. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
            <summary>
            Gets the name of the table the column belongs to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
            <summary>
            Gets the name of the column to be renamed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
            <summary>
            Gets the new name for the column.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
            <summary>
            Gets an operation that reverts the rename.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
             <summary>
             Represents renaming an existing table.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
             <summary>
             Initializes a new instance of the RenameTableOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="name"> Name of the table to be renamed. </param>
             <param name="newName"> New name for the table. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
            <summary>
            Gets the name of the table to be renamed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
            <summary>
            Gets the new name for the table.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
            <summary>
            Gets an operation that reverts the rename.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
             <summary>
             Represents a provider specific SQL statement to be executed directly against the target database.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
             <summary>
             Initializes a new instance of the SqlOperation class.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sql"> The SQL to be executed. </param>
             <param name="anonymousArguments"> Additional arguments that may be processed by providers. Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
            <summary>
            Gets the SQL to be executed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
            <summary>
            Gets or sets a value indicating whether this statement should be performed outside of
            the transaction scope that is used to make the migration process transactional.
            If set to true, this operation will not be rolled back if the migration process fails.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
            <summary>
            Common base class for providers that convert provider agnostic migration
            operations into database provider specific SQL commands.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
            <summary>
            Converts a set of migration operations into database provider specific SQL.
            </summary>
            <param name="migrationOperations"> The operations to be converted. </param>
            <param name="providerManifestToken"> Token representing the version of the database being targeted. </param>
            <returns> A list of SQL statements to be executed to perform the migration operations. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
            <summary>
            Generates the SQL body for a stored procedure.
            </summary>
            <param name="commandTrees">The command trees representing the commands for an insert, update or delete operation.</param>
            <param name="rowsAffectedParameter">The rows affected parameter name.</param>
            <param name="providerManifestToken">The provider manifest token.</param>
            <returns>The SQL body for the stored procedure.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
            <summary>
            Builds the store type usage for the specified <paramref name="storeTypeName"/> using the facets from the specified <paramref name="propertyModel"/>.
            </summary>
            <param name="storeTypeName">Name of the store type.</param>
            <param name="propertyModel">The target property.</param>
            <returns>A store-specific TypeUsage</returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
            <summary>
            Gets or sets the provider manifest.
            </summary>
            <value>
            The provider manifest.
            </value>
        </member>
        <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
             <summary>
             Represents a migration operation that has been translated into a SQL statement.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
             <summary>
             Gets or sets the SQL to be executed to perform this migration operation.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
            <summary>
            Gets or sets a value indicating whether this statement should be performed outside of
            the transaction scope that is used to make the migration process transactional.
            If set to true, this operation will not be rolled back if the migration process fails.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
             <summary>
             Gets or sets the batch terminator for the database provider.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <value>
             The batch terminator for the database provider.
             </value>
        </member>
        <member name="T:System.Data.Entity.ObservableCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Returns an <see cref="T:System.ComponentModel.BindingList`1"/> implementation that stays in sync with the given
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T"> The element type. </typeparam>
            <param name="source"> The collection that the binding list will stay in sync with. </param>
            <returns> The binding list. </returns>
        </member>
        <member name="T:System.Data.Entity.Spatial.DbGeography">
            <summary>
            Represents data in a geodetic (round earth) coordinate system.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well known binary value.
            </summary>
            <returns>
            A new DbGeography value as defined by the well known binary value with the default geography coordinate system identifier (SRID)(
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownBinary">A byte array that contains a well known binary representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="wellKnownBinary">A byte array that contains a well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> line value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="lineWellKnownBinary">A byte array that contains a well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> point value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="pointWellKnownBinary">A byte array that contains a well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> polygon value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="polygonWellKnownBinary">A byte array that contains a well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
            <summary>Returns the multiline value from a binary value.</summary>
            <returns>The multiline value from a binary value.</returns>
            <param name="multiLineWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
            <summary>Returns the multipoint value from a well-known binary value.</summary>
            <returns>The multipoint value from a well-known binary value.</returns>
            <param name="multiPointWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
            <summary>Returns the multi polygon value from a well-known binary value.</summary>
            <returns>The multi polygon value from a well-known binary value.</returns>
            <param name="multiPolygonWellKnownBinary">The multi polygon well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> collection value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="geographyCollectionWellKnownBinary">A byte array that contains a well known binary representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified Geography Markup Language (GML) value.
            </summary>
            <returns>
            A new DbGeography value as defined by the GML value with the default geography coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geographyMarkup">A string that contains a Geography Markup Language (GML) representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified Geography Markup Language (GML) value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the GML value with the specified coordinate system identifier.</returns>
            <param name="geographyMarkup">A string that contains a Geography Markup Language (GML) representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well known text value.
            </summary>
            <returns>
            A new DbGeography value as defined by the well known text value with the default geography coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownText">A string that contains a well known text representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="wellKnownText">A string that contains a well known text representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> line value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="lineWellKnownText">A string that contains a well known text representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> point value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="pointWellKnownText">A string that contains a well known text representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> polygon value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="polygonWellKnownText">A string that contains a well known text representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
            <summary>Returns the multiline value from a well-known text value.</summary>
            <returns>The multiline value from a well-known text value.</returns>
            <param name="multiLineWellKnownText">The well-known text.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
            <summary>Returns the multipoint value from a well-known text value.</summary>
            <returns>The multipoint value from a well-known text value.</returns>
            <param name="multiPointWellKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
            <summary>Returns the multi polygon value from a well-known text value.</summary>
            <returns>The multi polygon value from a well-known text value.</returns>
            <param name="multiPolygonWellKnownText">The multi polygon well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> collection value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeography value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="geographyCollectionWellKnownText">A string that contains a well known text representation of the geography value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeography value should use.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
            <summary> Generates the well known text representation of this DbGeography value.  Includes only Longitude and Latitude for points. </summary>
            <returns>A string containing the well known text representation of this DbGeography value.</returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
            <summary> Generates the well known binary representation of this DbGeography value. </summary>
            <returns>The well-known binary representation of this DbGeography value.</returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
            <summary> Generates the Geography Markup Language (GML) representation of this DbGeography value. </summary>
            <returns>A string containing the GML representation of this DbGeography value.</returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
            <summary> Determines whether this DbGeography is spatially equal to the specified DbGeography argument. </summary>
            <returns>true if other is spatially equal to this geography value; otherwise false.</returns>
            <param name="other">The geography value that should be compared with this geography value for equality.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
            <summary> Determines whether this DbGeography is spatially disjoint from the specified DbGeography argument. </summary>
            <returns>true if other is disjoint from this geography value; otherwise false.</returns>
            <param name="other">The geography value that should be compared with this geography value for disjointness.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
            <summary> Determines whether this DbGeography value spatially intersects the specified DbGeography argument. </summary>
            <returns>true if other intersects this geography value; otherwise false.</returns>
            <param name="other">The geography value that should be compared with this geography value for intersection.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
            <summary>Returns a geography object that represents the union of all points whose distance from a geography instance is less than or equal to a specified value.</summary>
            <returns>A geography object that represents the union of all points</returns>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
            <summary> Computes the distance between the closest points in this DbGeography value and another DbGeography value. </summary>
            <returns>A double value that specifies the distance between the two closest points in this geography value and other.</returns>
            <param name="other">The geography value for which the distance from this value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
            <summary> Computes the intersection of this DbGeography value and another DbGeography value. </summary>
            <returns>A new DbGeography value representing the intersection between this geography value and other.</returns>
            <param name="other">The geography value for which the intersection with this value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
            <summary> Computes the union of this DbGeography value and another DbGeography value. </summary>
            <returns>A new DbGeography value representing the union between this geography value and other.</returns>
            <param name="other">The geography value for which the union with this value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
            <summary> Computes the difference of this DbGeography value and another DbGeography value. </summary>
            <returns>A new DbGeography value representing the difference between this geography value and other.</returns>
            <param name="other">The geography value for which the difference with this value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
            <summary> Computes the symmetric difference of this DbGeography value and another DbGeography value. </summary>
            <returns>A new DbGeography value representing the symmetric difference between this geography value and other.</returns>
            <param name="other">The geography value for which the symmetric difference with this value should be computed.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
            <summary> Returns an element of this DbGeography value from a specific position, if it represents a geography collection. &lt;param name="index"&gt;The position within this geography value from which the element should be taken.&lt;/param&gt;&lt;returns&gt;The element in this geography value at the specified position, if it represents a collection of other geography values; otherwise null.&lt;/returns&gt;</summary>
            <returns>An element of this DbGeography value from a specific position</returns>
            <param name="index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
            <summary> Returns an element of this DbGeography value from a specific position, if it represents a linestring or linear ring. &lt;param name="index"&gt;The position within this geography value from which the element should be taken.&lt;/param&gt;&lt;returns&gt;The element in this geography value at the specified position, if it represents a linestring or linear ring; otherwise null.&lt;/returns&gt;</summary>
            <returns>An element of this DbGeography value from a specific position</returns>
            <param name="index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
            <summary> Returns a string representation of the geography value. </summary>
            <returns>A string representation of the geography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
            <summary> Gets the default coordinate system id (SRID) for geography values (WGS 84) </summary>
            <returns>The default coordinate system id (SRID) for geography values (WGS 84)</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
            <summary> Gets a representation of this DbGeography value that is specific to the underlying provider that constructed it. </summary>
            <returns>A representation of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
            <summary>
            Gets the spatial provider that will be used for operations on this spatial type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
            <summary> Gets or sets a data contract serializable well known representation of this DbGeography value. </summary>
            <returns>A data contract serializable well known representation of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
            <summary>Gets the identifier associated with the coordinate system.</summary>
            <returns>The identifier associated with the coordinate system.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
            <summary>
            Gets the dimension of the given <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value or, if the value is a collections, the largest element dimension.
            </summary>
            <returns>
            The dimension of the given <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
            <summary>Gets the spatial type name of the DBGeography.</summary>
            <returns>The spatial type name of the DBGeography.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
            <summary>Gets a nullable Boolean value indicating whether this DbGeography value is empty.</summary>
            <returns>True if this DbGeography value is empty; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
            <summary> Gets the number of elements in this DbGeography value, if it represents a geography collection. &lt;returns&gt;The number of elements in this geography value, if it represents a collection of other geography values; otherwise null.&lt;/returns&gt;</summary>
            <returns>The number of elements in this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
            <summary> Gets the Latitude coordinate of this DbGeography value, if it represents a point. &lt;returns&gt;The Latitude coordinate value of this geography value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The Latitude coordinate of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
            <summary> Gets the Longitude coordinate of this DbGeography value, if it represents a point. &lt;returns&gt;The Longitude coordinate value of this geography value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The Longitude coordinate of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
            <summary> Gets the elevation (Z coordinate) of this DbGeography value, if it represents a point. &lt;returns&gt;The elevation (Z coordinate) value of this geography value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The elevation (Z coordinate) of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
            <summary> Gets the M (Measure) coordinate of this DbGeography value, if it represents a point. &lt;returns&gt;The M (Measure) coordinate value of this geography value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The M (Measure) coordinate of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
            <summary> Gets a nullable double value that indicates the length of this DbGeography value, which may be null if this value does not represent a curve. </summary>
            <returns>A nullable double value that indicates the length of this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
            <summary> Gets a DbGeography value representing the start point of this value, which may be null if this DbGeography value does not represent a curve. </summary>
            <returns>A DbGeography value representing the start point of this value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
            <summary> Gets a DbGeography value representing the start point of this value, which may be null if this DbGeography value does not represent a curve. </summary>
            <returns>A DbGeography value representing the start point of this value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
            <summary> Gets a nullable Boolean value indicating whether this DbGeography value is closed, which may be null if this value does not represent a curve. </summary>
            <returns>True if this DbGeography value is closed; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
            <summary> Gets the number of points in this DbGeography value, if it represents a linestring or linear ring. &lt;returns&gt;The number of elements in this geography value, if it represents a linestring or linear ring; otherwise null.&lt;/returns&gt;</summary>
            <returns>The number of points in this DbGeography value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
            <summary> Gets a nullable double value that indicates the area of this DbGeography value, which may be null if this value does not represent a surface. </summary>
            <returns>A nullable double value that indicates the area of this DbGeography value.</returns>
        </member>
        <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
            <summary>
            A data contract serializable representation of a <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
            <summary> Gets or sets the coordinate system identifier (SRID) of this value. </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
            <summary> Gets or sets the well known text representation of this value. </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
            <summary> Gets or sets the well known binary representation of this value. </summary>
        </member>
        <member name="T:System.Data.Entity.Spatial.DbGeometry">
            <summary>
            Represents geometric shapes.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well known binary value.
            </summary>
            <returns>
            A new DbGeometry value as defined by the well known binary value with the default geometry coordinate system identifier (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownBinary">A byte array that contains a well known binary representation of the geometry value.</param>
            <exception cref="T:System.ArgumentNullException">wellKnownBinary</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="wellKnownBinary">A byte array that contains a well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">wellKnownBinary</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> line value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="lineWellKnownBinary">A byte array that contains a well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">lineWellKnownBinary</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> point value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="pointWellKnownBinary">A byte array that contains a well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">pointWellKnownBinary</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> polygon value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="polygonWellKnownBinary">A byte array that contains a well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">polygonWellKnownBinary</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
            <summary>Returns the multiline value from a binary value.</summary>
            <returns>The multiline value from a binary value.</returns>
            <param name="multiLineWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
            <summary>Returns the multipoint value from a well-known binary value.</summary>
            <returns>The multipoint value from a well-known binary value.</returns>
            <param name="multiPointWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
            <summary>Returns the multi polygon value from a well-known binary value.</summary>
            <returns>The multipoint value from a well-known text value.</returns>
            <param name="multiPolygonWellKnownBinary">The multi polygon well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> collection value based on the specified well known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known binary value with the specified coordinate system identifier.</returns>
            <param name="geometryCollectionWellKnownBinary">A byte array that contains a well known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">geometryCollectionWellKnownBinary</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified Geography Markup Language (GML) value.
            </summary>
            <returns>
            A new DbGeometry value as defined by the GML value with the default geometry coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geometryMarkup">A string that contains a Geography Markup Language (GML) representation of the geometry value.</param>
            <exception cref="T:System.ArgumentNullException">geometryMarkup</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified Geography Markup Language (GML) value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the GML value with the specified coordinate system identifier.</returns>
            <param name="geometryMarkup">A string that contains a Geography Markup Language (GML) representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">geometryMarkup</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well known text value.
            </summary>
            <returns>
            A new DbGeometry value as defined by the well known text value with the default geometry coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownText">A string that contains a well known text representation of the geometry value.</param>
            <exception cref="T:System.ArgumentNullException">wellKnownText</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="wellKnownText">A string that contains a well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">wellKnownText</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> line value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="lineWellKnownText">A string that contains a well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">lineWellKnownText</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> point value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="pointWellKnownText">A string that contains a well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">pointWellKnownText</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> polygon value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="polygonWellKnownText">A string that contains a well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">polygonWellKnownText</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
            <summary>Returns the multiline value from a well-known text value.</summary>
            <returns>The multiline value from a well-known text value.</returns>
            <param name="multiLineWellKnownText">The well-known text.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
            <summary>Returns the multipoint value from a well-known text value.</summary>
            <returns>The multipoint value from a well-known text value.</returns>
            <param name="multiPointWellKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
            <summary>Returns the multi polygon value from a well-known binary value.</summary>
            <returns>The multi polygon value from a well-known binary value.</returns>
            <param name="multiPolygonWellKnownText">The multi polygon well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> collection value based on the specified well known text value and coordinate system identifier (SRID).
            </summary>
            <returns>A new DbGeometry value as defined by the well known text value with the specified coordinate system identifier.</returns>
            <param name="geometryCollectionWellKnownText">A string that contains a well known text representation of the geometry value.</param>
            <param name="coordinateSystemId">The identifier of the coordinate system that the new DbGeometry value should use.</param>
            <exception cref="T:System.ArgumentNullException">geometryCollectionWellKnownText</exception>
            <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
            <summary> Generates the well known text representation of this DbGeometry value.  Includes only X and Y coordinates for points. </summary>
            <returns>A string containing the well known text representation of this DbGeometry value.</returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
            <summary> Generates the well known binary representation of this DbGeometry value. </summary>
            <returns>The well-known binary representation of this DbGeometry value.</returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
            <summary> Generates the Geography Markup Language (GML) representation of this DbGeometry value. </summary>
            <returns>A string containing the GML representation of this DbGeometry value.</returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry is spatially equal to the specified DbGeometry argument. </summary>
            <returns>true if other is spatially equal to this geometry value; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for equality.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry is spatially disjoint from the specified DbGeometry argument. </summary>
            <returns>true if other is disjoint from this geometry value; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for disjointness.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry value spatially intersects the specified DbGeometry argument. </summary>
            <returns>true if other intersects this geometry value; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for intersection.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry value spatially touches the specified DbGeometry argument. </summary>
            <returns>true if other touches this geometry value; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry value spatially crosses the specified DbGeometry argument. </summary>
            <returns>true if other crosses this geometry value; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry value is spatially within the specified DbGeometry argument. </summary>
            <returns>true if this geometry value is within other; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for containment.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry value spatially contains the specified DbGeometry argument. </summary>
            <returns>true if this geometry value contains other; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for containment.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Determines whether this DbGeometry value spatially overlaps the specified DbGeometry argument. </summary>
            <returns>true if this geometry value overlaps other; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for overlap.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
            <summary> Determines whether this DbGeometry value spatially relates to the specified DbGeometry argument according to the given Dimensionally Extended Nine-Intersection Model (DE-9IM) intersection pattern. </summary>
            <returns>true if this geometry value relates to other according to the specified intersection pattern matrix; otherwise false.</returns>
            <param name="other">The geometry value that should be compared with this geometry value for relation.</param>
            <param name="matrix">A string that contains the text representation of the (DE-9IM) intersection pattern that defines the relation.</param>
            <exception cref="T:System.ArgumentNullException">othermatrix</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
            <summary>Returns a geometry object that represents the union of all points whose distance from a geometry instance is less than or equal to a specified value.</summary>
            <returns>A geometry object that represents the union of all points.</returns>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Computes the distance between the closest points in this DbGeometry value and another DbGeometry value. </summary>
            <returns>A double value that specifies the distance between the two closest points in this geometry value and other.</returns>
            <param name="other">The geometry value for which the distance from this value should be computed.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Computes the intersection of this DbGeometry value and another DbGeometry value. </summary>
            <returns>A new DbGeometry value representing the intersection between this geometry value and other.</returns>
            <param name="other">The geometry value for which the intersection with this value should be computed.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Computes the union of this DbGeometry value and another DbGeometry value. </summary>
            <returns>A new DbGeometry value representing the union between this geometry value and other.</returns>
            <param name="other">The geometry value for which the union with this value should be computed.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Computes the difference between this DbGeometry value and another DbGeometry value. </summary>
            <returns>A new DbGeometry value representing the difference between this geometry value and other.</returns>
            <param name="other">The geometry value for which the difference with this value should be computed.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
            <summary> Computes the symmetric difference between this DbGeometry value and another DbGeometry value. </summary>
            <returns>A new DbGeometry value representing the symmetric difference between this geometry value and other.</returns>
            <param name="other">The geometry value for which the symmetric difference with this value should be computed.</param>
            <exception cref="T:System.ArgumentNullException">other</exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
            <summary> Returns an element of this DbGeometry value from a specific position, if it represents a geometry collection. &lt;param name="index"&gt;The position within this geometry value from which the element should be taken.&lt;/param&gt;&lt;returns&gt;The element in this geometry value at the specified position, if it represents a collection of other geometry values; otherwise null.&lt;/returns&gt;</summary>
            <returns>An element of this DbGeometry value from a specific position.</returns>
            <param name="index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
            <summary> Returns an element of this DbGeometry value from a specific position, if it represents a linestring or linear ring. &lt;param name="index"&gt;The position within this geometry value from which the element should be taken.&lt;/param&gt;&lt;returns&gt;The element in this geometry value at the specified position, if it represents a linestring or linear ring; otherwise null.&lt;/returns&gt;</summary>
            <returns>An element of this DbGeometry value from a specific position.</returns>
            <param name="index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
            <summary> Returns an interior ring from this DbGeometry value at a specific position, if it represents a polygon. &lt;param name="index"&gt;The position within this geometry value from which the interior ring should be taken.&lt;/param&gt;&lt;returns&gt;The interior ring in this geometry value at the specified position, if it represents a polygon; otherwise null.&lt;/returns&gt;</summary>
            <returns>An interior ring from this DbGeometry value at a specific position.</returns>
            <param name="index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
            <summary> Returns a string representation of the geometry value. </summary>
            <returns>A string representation of the geometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
            <summary> Gets the default coordinate system id (SRID) for geometry values. </summary>
            <returns>The default coordinate system id (SRID) for geometry values.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
            <summary> Gets a representation of this DbGeometry value that is specific to the underlying provider that constructed it. </summary>
            <returns>A representation of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
            <summary>
            Gets the spatial provider that will be used for operations on this spatial type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
            <summary> Gets or sets a data contract serializable well known representation of this DbGeometry value. </summary>
            <returns>A data contract serializable well known representation of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
            <summary>Gets the coordinate system identifier of the DbGeometry object.</summary>
            <returns>The coordinate system identifier of the DbGeometry object.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
            <summary>Gets the boundary of the DbGeometry objects.</summary>
            <returns>The boundary of the DbGeometry objects.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
            <summary>
            Gets the dimension of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value or, if the value is a collection, the dimension of its largest element.
            </summary>
            <returns>
            The dimension of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
            <summary> Gets the envelope (minimum bounding box) of this DbGeometry value, as a geometry value. </summary>
            <returns>The envelope (minimum bounding box) of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
            <summary>Gets a spatial type name representation of this DbGeometry value.</summary>
            <returns>A spatial type name representation of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
            <summary>Gets a nullable Boolean value indicating whether this DbGeometry value is empty, which may be null if this value does not represent a curve.</summary>
            <returns>True if this DbGeometry value is empty; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
            <summary>Gets a nullable Boolean value indicating whether this DbGeometry value is simple.</summary>
            <returns>True if this DbGeometry value is simple; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
            <summary>Gets a nullable Boolean value indicating whether this DbGeometry value is valid.</summary>
            <returns>True if this DbGeometry value is valid; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
            <summary> Gets the convex hull of this DbGeometry value as another DbGeometry value. </summary>
            <returns>The convex hull of this DbGeometry value as another DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
            <summary> Gets the number of elements in this DbGeometry value, if it represents a geometry collection. &lt;returns&gt;The number of elements in this geometry value, if it represents a collection of other geometry values; otherwise null.&lt;/returns&gt;</summary>
            <returns>The number of elements in this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
            <summary> Gets the X coordinate of this DbGeometry value, if it represents a point. &lt;returns&gt;The X coordinate value of this geometry value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The X coordinate of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
            <summary> Gets the Y coordinate of this DbGeometry value, if it represents a point. &lt;returns&gt;The Y coordinate value of this geometry value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The Y coordinate of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
            <summary> Gets the elevation (Z coordinate) of this DbGeometry value, if it represents a point. &lt;returns&gt;The elevation (Z coordinate) of this geometry value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The elevation (Z coordinate) of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
            <summary> Gets the Measure (M coordinate) of this DbGeometry value, if it represents a point. &lt;returns&gt;The Measure (M coordinate) value of this geometry value, if it represents a point; otherwise null.&lt;/returns&gt;</summary>
            <returns>The Measure (M coordinate) of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
            <summary> Gets a nullable double value that indicates the length of this DbGeometry value, which may be null if this value does not represent a curve. </summary>
            <returns>The length of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
            <summary> Gets a DbGeometry value representing the start point of this value, which may be null if this DbGeometry value does not represent a curve. </summary>
            <returns>A DbGeometry value representing the start point of this value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
            <summary> Gets a DbGeometry value representing the start point of this value, which may be null if this DbGeometry value does not represent a curve. </summary>
            <returns>A DbGeometry value representing the start point of this value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
            <summary> Gets a nullable Boolean value indicating whether this DbGeometry value is closed, which may be null if this value does not represent a curve. </summary>
            <returns>True if this DbGeometry value is closed; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
            <summary> Gets a nullable Boolean value indicating whether this DbGeometry value is a ring, which may be null if this value does not represent a curve. </summary>
            <returns>True if this DbGeometry value is a ring; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
            <summary> Gets the number of points in this DbGeometry value, if it represents a linestring or linear ring. &lt;returns&gt;The number of elements in this geometry value, if it represents a linestring or linear ring; otherwise null.&lt;/returns&gt;</summary>
            <returns>The number of points in this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
            <summary> Gets a nullable double value that indicates the area of this DbGeometry value, which may be null if this value does not represent a surface. </summary>
            <returns>A nullable double value that indicates the area of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
            <summary> Gets the DbGeometry value that represents the centroid of this DbGeometry value, which may be null if this value does not represent a surface. </summary>
            <returns>The DbGeometry value that represents the centroid of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
            <summary> Gets a point on the surface of this DbGeometry value, which may be null if this value does not represent a surface. </summary>
            <returns>A point on the surface of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
            <summary> Gets the DbGeometry value that represents the exterior ring of this DbGeometry value, which may be null if this value does not represent a polygon. </summary>
            <returns>The DbGeometry value that represents the exterior ring of this DbGeometry value.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
            <summary> Gets the number of interior rings in this DbGeometry value, if it represents a polygon. &lt;returns&gt;The number of elements in this geometry value, if it represents a polygon; otherwise null.&lt;/returns&gt;</summary>
            <returns>The number of interior rings in this DbGeometry value.</returns>
        </member>
        <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
            <summary>
            A data contract serializable representation of a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
            <summary> Gets or sets the coordinate system identifier (SRID) of this value. </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
            <summary> Gets or sets the well known text representation of this value. </summary>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
            <summary> Gets or sets the well known binary representation of this value. </summary>
        </member>
        <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
            <summary>
            A provider-independent service API for geospatial (Geometry/Geography) type support.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
            <summary>
            When implemented in derived types, reads an instance of <see cref="T:System.Data.Entity.Spatial.DbGeography" /> from the column at the specified column ordinal.
            </summary>
            <returns>The instance of DbGeography at the specified column value</returns>
            <param name="ordinal">The ordinal of the column that contains the geography value</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
            <summary>
            When implemented in derived types, reads an instance of <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> from the column at the specified column ordinal.
            </summary>
            <returns>The instance of DbGeometry at the specified column value</returns>
            <param name="ordinal">The ordinal of the data record column that contains the provider-specific geometry data</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
            <summary>
            Returns whether the column at the specified column ordinal is of geography type
            </summary>
            <param name="ordinal">The column ordinal.</param>
            <returns>
            <c>true</c> if the column at the specified column ordinal is of geography type;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
            <summary>
            Returns whether the column at the specified column ordinal is of geometry type
            </summary>
            <param name="ordinal">The column ordinal.</param>
            <returns>
            <c>true</c> if the column at the specified column ordinal is of geometry type;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
            <summary>
            A provider-independent service API for geospatial (Geometry/Geography) type support.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
            <summary>
            This method is intended for use by derived implementations of
            <see
                cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" />
            after suitable validation of the specified provider value to ensure it is suitable for use with the derived implementation.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> instance that contains the specified providerValue and uses the specified spatialServices as its spatial implementation.
            </returns>
            <param name="spatialServices">
            The spatial services instance that the returned <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value will depend on for its implementation of spatial functionality.
            </param>
            <param name="providerValue">The provider value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value based on a provider-specific value that is compatible with this spatial services implementation.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value backed by this spatial services implementation and the specified provider value.
            </returns>
            <param name="providerValue">A provider-specific value that this spatial services implementation is capable of interpreting as a geography value.</param>
            <returns> A new DbGeography value backed by this spatial services implementation and the specified provider value. </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providerValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="providerValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
            <summary>
            Creates a provider-specific value compatible with this spatial services implementation based on the specified well-known
            <see
                cref="T:System.Data.Entity.Spatial.DbGeography" />
            representation.
            </summary>
            <returns>A provider-specific value that encodes the information contained in wellKnownValue in a fashion compatible with this spatial services implementation.</returns>
            <param name="wellKnownValue">
            An instance of <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> that contains the well-known representation of a geography value.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue"/> that represents the specified
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value using one or both of the standard well-known spatial formats.
            </summary>
            <returns>
            The well-known representation of geographyValue, as a new
            <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue"/>
            .
            </returns>
            <param name="geographyValue">The geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well-known binary value.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known binary value with the default
            <see
                cref="T:System.Data.Entity.Spatial.DbGeography" />
            coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownBinary">A byte array that contains a well-known binary representation of the geography value.</param>        
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownBinary">A byte array that contains a well-known binary representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> line value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="lineWellKnownBinary">A byte array that contains a well-known binary representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> point value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="pointWellKnownBinary">A byte array that contains a well-known binary representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> polygon value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="polygonWellKnownBinary">A byte array that contains a well-known binary representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multiline value based on the specified well-known binary value and coordinate system identifier.
            </summary>
            <returns>
            The new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multiline value.
            </returns>
            <param name="multiLineWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multipoint value based on the specified well-known binary value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multipoint value.
            </returns>
            <param name="multiPointWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multi polygon value based on the specified well-known binary value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multi polygon value.
            </returns>
            <param name="multiPolygonWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> collection value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geographyCollectionWellKnownBinary">A byte array that contains a well-known binary representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well-known text value.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known text value with the default
            <see
                cref="T:System.Data.Entity.Spatial.DbGeography" />
            coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownText">A string that contains a well-known text representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownText">A string that contains a well-known text representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> line value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="lineWellKnownText">A string that contains a well-known text representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> point value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="pointWellKnownText">A string that contains a well-known text representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> polygon value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="polygonWellKnownText">A string that contains a well-known text representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multiline value based on the specified well-known text value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multiline value.
            </returns>
            <param name="multiLineWellKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multipoint value based on the specified well-known text value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multipoint value.
            </returns>
            <param name="multiPointWellKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multi polygon value based on the specified well-known text value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> multi polygon value.
            </returns>
            <param name="multiPolygonKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> collection value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geographyCollectionWellKnownText">A string that contains a well-known text representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified Geography Markup Language (GML) value.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the GML value with the default
            <see
                cref="T:System.Data.Entity.Spatial.DbGeography" />
            coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geographyMarkup">A string that contains a Geometry Markup Language (GML) representation of the geography value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value based on the specified Geography Markup Language (GML) value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value as defined by the GML value with the specified coordinate system identifier (SRID).
            </returns>
            <param name="geographyMarkup">A string that contains a Geometry Markup Language (GML) representation of the geography value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeography" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the coordinate system identifier of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </summary>
            <returns>
            The coordinate system identifier of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Gets the dimension of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value or, if the value is a collections, the largest element dimension.
            </summary>
            <returns>
            The dimension of geographyValue, or the largest element dimension if
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            is a collection.
            </returns>
            <param name="geographyValue">The geography value for which the dimension value should be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a value that indicates the spatial type name of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value.
            </summary>
            <returns>
            The spatial type name of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value is empty.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value is empty; otherwise, false.
            </returns>
            <param name="geographyValue">The geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Gets the well-known text representation of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value. This value should include only the Longitude and Latitude of points.
            </summary>
            <returns>A string containing the well-known text representation of geographyValue.</returns>
            <param name="geographyValue">The geography value for which the well-known text should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a text representation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> with elevation and measure.
            </summary>
            <returns>
            A text representation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/>.
            </returns>
            <param name="geographyValue">The geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Gets the well-known binary representation of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </summary>
            <returns>
            The well-known binary representation of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value for which the well-known binary should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Generates the Geography Markup Language (GML) representation of this
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value.
            </summary>
            <returns>A string containing the GML representation of this DbGeography value.</returns>
            <param name="geographyValue">The geography value for which the GML should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values are spatially equal.
            </summary>
            <returns>true if geographyValue is spatially equal to otherGeography; otherwise false.</returns>
            <param name="geographyValue">The first geography value to compare for equality.</param>
            <param name="otherGeography">The second geography value to compare for equality.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values are spatially disjoint.
            </summary>
            <returns>true if geographyValue is disjoint from otherGeography; otherwise false.</returns>
            <param name="geographyValue">The first geography value to compare for disjointness.</param>
            <param name="otherGeography">The second geography value to compare for disjointness.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values spatially intersect.
            </summary>
            <returns>true if geographyValue intersects otherGeography; otherwise false.</returns>
            <param name="geographyValue">The first geography value to compare for intersection.</param>
            <param name="otherGeography">The second geography value to compare for intersection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
            <summary>
            Creates a geography value representing all points less than or equal to distance from the given
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value.
            </summary>
            <returns>A new DbGeography value representing all points less than or equal to distance from geographyValue.</returns>
            <param name="geographyValue">The geography value.</param>
            <param name="distance">A double value specifying how far from geographyValue to buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Computes the distance between the closest points in two <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values.
            </summary>
            <returns>A double value that specifies the distance between the two closest points in geographyValue and otherGeography.</returns>
            <param name="geographyValue">The first geography value.</param>
            <param name="otherGeography">The second geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Computes the intersection of two <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value representing the intersection of geographyValue and otherGeography.
            </returns>
            <param name="geographyValue">The first geography value.</param>
            <param name="otherGeography">The second geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Computes the union of two <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value representing the union of geographyValue and otherGeography.
            </returns>
            <param name="geographyValue">The first geography value.</param>
            <param name="otherGeography">The second geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Computes the difference of two <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values.
            </summary>
            <returns>A new DbGeography value representing the difference of geographyValue and otherGeography.</returns>
            <param name="geographyValue">The first geography value.</param>
            <param name="otherGeography">The second geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Computes the symmetric difference of two <see cref="T:System.Data.Entity.Spatial.DbGeography"/> values.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value representing the symmetric difference of geographyValue and otherGeography.
            </returns>
            <param name="geographyValue">The first geography value.</param>
            <param name="otherGeography">The second geography value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            or
            <paramref name="otherGeography"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the number of elements in the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a geography collection.
            </summary>
            <returns>The number of elements in geographyValue, if it represents a collection of other geography values; otherwise null.</returns>
            <param name="geographyValue">The geography value, which need not represent a geography collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
            <summary>
            Returns an element of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a geography collection.
            </summary>
            <returns>The element in geographyValue at position index, if it represents a collection of other geography values; otherwise null.</returns>
            <param name="geographyValue">The geography value, which need not represent a geography collection.</param>
            <param name="index">The position within the geography value from which the element should be taken.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the Latitude coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a point.
            </summary>
            <returns>
            The Latitude coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the Longitude coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a point.
            </summary>
            <returns>
            The Longitude coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the elevation (Z coordinate) of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a point.
            </summary>
            <returns>The elevation (Z coordinate) of geographyValue, if it represents a point; otherwise null.</returns>
            <param name="geographyValue">The geography value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the M (Measure) coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a point.
            </summary>
            <returns>
            The M (Measure) coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a nullable double value that indicates the length of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            The length of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value that represents the start point of the given DbGeography value, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            The start point of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value that represents the end point of the given DbGeography value, which may be null if the value does not represent a curve.
            </summary>
            <returns>The end point of geographyValue, if it represents a curve; otherwise null.</returns>
            <param name="geographyValue">The geography value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value is closed, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value is closed; otherwise, false.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the number of points in the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a linestring or linear ring.
            </summary>
            <returns>
            The number of points in the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a linestring or linear ring.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
            <summary>
            Returns a point element of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value, if it represents a linestring or linear ring.
            </summary>
            <returns>The point in geographyValue at position index, if it represents a linestring or linear ring; otherwise null.</returns>
            <param name="geographyValue">The geography value, which need not represent a linestring or linear ring.</param>
            <param name="index">The position within the geography value from which the element should be taken.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a nullable double value that indicates the area of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value, which may be null if the value does not represent a surface.
            </summary>
            <returns>
            A nullable double value that indicates the area of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geographyValue">The geography value, which need not represent a surface.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geographyValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geographyValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
            <summary>
            This method is intended for use by derived implementations of
            <see
                cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" />
            after suitable validation of the specified provider value to ensure it is suitable for use with the derived implementation.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> instance that contains the specified providerValue and uses the specified spatialServices as its spatial implementation.
            </returns>
            <param name="spatialServices">
            The spatial services instance that the returned <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value will depend on for its implementation of spatial functionality.
            </param>
            <param name="providerValue">A provider value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
            <summary>
            Creates a provider-specific value compatible with this spatial services implementation based on the specified well-known
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            representation.
            </summary>
            <returns>A provider-specific value that encodes the information contained in wellKnownValue in a fashion compatible with this spatial services implementation.</returns>
            <param name="wellKnownValue">
            An instance of <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> that contains the well-known representation of a geometry value.
            </param>        
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue"/> that represents the specified
            <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>
            value using one or both of the standard well-known spatial formats.
            </summary>
            <returns>
            The well-known representation of geometryValue, as a new
            <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue"/>
            .
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value based on a provider-specific value that is compatible with this spatial services implementation.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value backed by this spatial services implementation and the specified provider value.
            </returns>
            <param name="providerValue">A provider-specific value that this spatial services implementation is capable of interpreting as a geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="providerValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="providerValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well-known binary value.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known binary value with the default
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownBinary">A byte array that contains a well-known binary representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownBinary">A byte array that contains a well-known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> line value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="lineWellKnownBinary">A byte array that contains a well-known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> point value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="pointWellKnownBinary">A byte array that contains a well-known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> polygon value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="polygonWellKnownBinary">A byte array that contains a well-known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multiline value based on the specified well-known binary value and coordinate system identifier.
            </summary>
            <returns>
            The new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multiline value
            </returns>
            <param name="multiLineWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multipoint value based on the specified well-known binary value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multipoint value.
            </returns>
            <param name="multiPointWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multi polygon value based on the specified well-known binary value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multi polygon value.
            </returns>
            <param name="multiPolygonWellKnownBinary">The well-known binary value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> collection value based on the specified well-known binary value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known binary value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geometryCollectionWellKnownBinary">A byte array that contains a well-known binary representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" />value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well-known text value.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known text value with the default
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownText">A string that contains a well-known text representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="wellKnownText">A string that contains a well-known text representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> line value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="lineWellKnownText">A string that contains a well-known text representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> point value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="pointWellKnownText">A string that contains a well-known text representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> polygon value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="polygonWellKnownText">A string that contains a well-known text representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multiline value based on the specified well-known text value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multiline value
            </returns>
            <param name="multiLineWellKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multipoint value based on the specified well-known text value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multipoint value.
            </returns>
            <param name="multiPointWellKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multi polygon value based on the specified well-known text value and coordinate system identifier.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> multi polygon value.
            </returns>
            <param name="multiPolygonKnownText">The well-known text value.</param>
            <param name="coordinateSystemId">The coordinate system identifier.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> collection value based on the specified well-known text value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the well-known text value with the specified coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geometryCollectionWellKnownText">A string that contains a well-known text representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified Geography Markup Language (GML) value.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the GML value with the default
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            coordinate system identifier (SRID) (
            <see
                cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />
            ).
            </returns>
            <param name="geometryMarkup">A string that contains a Geography Markup Language (GML) representation of the geometry value.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value based on the specified Geography Markup Language (GML) value and coordinate system identifier (SRID).
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value as defined by the GML value with the specified coordinate system identifier (SRID).
            </returns>
            <param name="geometryMarkup">A string that contains a Geography Markup Language (GML) representation of the geometry value.</param>
            <param name="coordinateSystemId">
            The identifier of the coordinate system that the new <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value should use.
            </param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the coordinate system identifier of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </summary>
            <returns>
            The coordinate system identifier of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable double value that indicates the boundary of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value.
            </summary>
            <returns>
            The boundary of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Gets the dimension of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> value or, if the value is a collections, the largest element dimension.
            </summary>
            <returns>
            The dimension of geometryValue, or the largest element dimension if
            <see
                cref="T:System.Data.Entity.Spatial.DbGeometry" />
            is a collection.
            </returns>
            <param name="geometryValue">The geometry value for which the dimension value should be retrieved.</param>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Gets the envelope (minimum bounding box) of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, as a geometry value.
            </summary>
            <returns>
            The envelope of geometryValue, as a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value for which the envelope value should be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a value that indicates the spatial type name of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>
            value.
            </summary>
            <returns>
            The spatial type name of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is empty.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is empty; otherwise, false.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is simple.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is simple; otherwise, false.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is valid.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is valid; otherwise, false.
            </returns>
            <param name="geometryValue">The geometry value.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Gets the well-known text representation of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, including only X and Y coordinates for points.
            </summary>
            <returns>A string containing the well-known text representation of geometryValue.</returns>
            <param name="geometryValue">The geometry value for which the well-known text should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a text representation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> with elevation and measure.
            </summary>
            <returns>
            A text representation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> with elevation and measure.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Gets the well-known binary representation of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </summary>
            <returns>
            The well-known binary representation of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geometryValue">The geometry value for which the well-known binary should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Generates the Geography Markup Language (GML) representation of this
            <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>
            value.
            </summary>
            <returns>A string containing the GML representation of this DbGeometry value.</returns>
            <param name="geometryValue">The geometry value for which the GML should be generated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values are spatially equal.
            </summary>
            <returns>true if geometryValue is spatially equal to otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value to compare for equality.</param>
            <param name="otherGeometry">The second geometry value to compare for equality.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values are spatially disjoint.
            </summary>
            <returns>true if geometryValue is disjoint from otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value to compare for disjointness.</param>
            <param name="otherGeometry">The second geometry value to compare for disjointness.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values spatially intersect.
            </summary>
            <returns>true if geometryValue intersects otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value to compare for intersection.</param>
            <param name="otherGeometry">The second geometry value to compare for intersection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values spatially touch.
            </summary>
            <returns>true if geometryValue touches otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values spatially cross.
            </summary>
            <returns>true if geometryValue crosses otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether one <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is spatially within the other.
            </summary>
            <returns>true if geometryValue is within otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether one <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value spatially contains the other.
            </summary>
            <returns>true if geometryValue contains otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values spatially overlap.
            </summary>
            <returns>true if geometryValue overlaps otherGeometry; otherwise false.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
            <summary>
            Determines whether the two given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values are spatially related according to the given Dimensionally Extended Nine-Intersection Model (DE-9IM) intersection pattern.
            </summary>
            <returns>true if this geometryValue value relates to otherGeometry according to the specified intersection pattern matrix; otherwise false.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The geometry value that should be compared with the first geometry value for relation.</param>
            <param name="matrix">A string that contains the text representation of the (DE-9IM) intersection pattern that defines the relation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            ,
            <paramref name="otherGeometry"/>
            or
            <paramref name="matrix"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
            <summary>
            Creates a geometry value representing all points less than or equal to distance from the given
            <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>
            value.
            </summary>
            <returns>A new DbGeometry value representing all points less than or equal to distance from geometryValue.</returns>
            <param name="geometryValue">The geometry value.</param>
            <param name="distance">A double value specifying how far from geometryValue to buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Computes the distance between the closest points in two <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values.
            </summary>
            <returns>A double value that specifies the distance between the two closest points in geometryValue and otherGeometry.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable double value that indicates the convex hull of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeography"/>
            value.
            </summary>
            <returns>
            The convex hull of the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value.
            </returns>
            <param name="geometryValue">The geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Computes the intersection of two <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value representing the intersection of geometryValue and otherGeometry.
            </returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Computes the union of two <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value representing the union of geometryValue and otherGeometry.
            </returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Computes the difference between two <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values.
            </summary>
            <returns>A new DbGeometry value representing the difference between geometryValue and otherGeometry.</returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Computes the symmetric difference between two <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> values.
            </summary>
            <returns>
            A new <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value representing the symmetric difference between geometryValue and otherGeometry.
            </returns>
            <param name="geometryValue">The first geometry value.</param>
            <param name="otherGeometry">The second geometry value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            or
            <paramref name="otherGeometry"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the number of elements in the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a geometry collection.
            </summary>
            <returns>The number of elements in geometryValue, if it represents a collection of other geometry values; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a geometry collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
            <summary>
            Returns an element of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a geometry collection.
            </summary>
            <returns>The element in geometryValue at position index, if it represents a collection of other geometry values; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a geometry collection.</param>
            <param name="index">The position within the geometry value from which the element should be taken.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the X coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a point.
            </summary>
            <returns>
            The X coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the Y coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a point.
            </summary>
            <returns>
            The Y coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the elevation (Z) of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a point.
            </summary>
            <returns>The elevation (Z) of geometryValue, if it represents a point; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the M (Measure) coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a point.
            </summary>
            <returns>
            The M (Measure) coordinate of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a point.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable double value that indicates the length of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>
            value, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            The length of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value that represents the start point of the given DbGeometry value, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            The start point of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value that represents the end point of the given DbGeometry value, which may be null if the value does not represent a curve.
            </summary>
            <returns>The end point of geometryValue, if it represents a curve; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is closed, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeography"/> value is closed; otherwise, false.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable Boolean value that whether the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is a ring, which may be null if the value does not represent a curve.
            </summary>
            <returns>
            True if the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value is a ring; otherwise, false.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a curve.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the number of points in the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a linestring or linear ring.
            </summary>
            <returns>
            The number of points in the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a linestring or linear ring.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
            <summary>
            Returns a point element of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a linestring or linear ring.
            </summary>
            <returns>The point in geometryValue at position index, if it represents a linestring or linear ring; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a linestring or linear ring.</param>
            <param name="index">The position within the geometry value from which the element should be taken.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a nullable double value that indicates the area of the given
            <see cref="T:System.Data.Entity.Spatial.DbGeometry"/>
            value, which may be null if the value does not represent a surface.
            </summary>
            <returns>
            A nullable double value that indicates the area of the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a surface.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value that represents the centroid of the given DbGeometry value, which may be null if the value does not represent a surface.
            </summary>
            <returns>The centroid of geometryValue, if it represents a surface; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a surface.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value that represents a point on the surface of the given DbGeometry value, which may be null if the value does not represent a surface.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value that represents a point on the surface of the given DbGeometry value.
            </returns>
            <param name="geometryValue">The geometry value, which need not represent a surface.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns a <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value that represents the exterior ring of the given DbGeometry value, which may be null if the value does not represent a polygon.
            </summary>
            <returns>A DbGeometry value representing the exterior ring on geometryValue, if it represents a polygon; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a polygon.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Returns the number of interior rings in the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a polygon.
            </summary>
            <returns>The number of elements in geometryValue, if it represents a polygon; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a polygon.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
            <summary>
            Returns an interior ring from the given <see cref="T:System.Data.Entity.Spatial.DbGeometry"/> value, if it represents a polygon.
            </summary>
            <returns>The interior ring in geometryValue at position index, if it represents a polygon; otherwise null.</returns>
            <param name="geometryValue">The geometry value, which need not represent a polygon.</param>
            <param name="index">The position within the geometry value from which the element should be taken.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometryValue"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="geometryValue"/>
            is not compatible with this spatial services implementation.
            </exception>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
            <summary>
            Gets the default services for the <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.
            </summary>
            <returns>The default services.</returns>
        </member>
        <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
            <summary>
            Override this property to allow the spatial provider to fail fast when native types or other
            resources needed for the spatial provider to function correctly are not available.
            The default value is <code>true</code> which means that EF will continue with the assumption
            that the provider has the necessary types/resources rather than failing fast.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
            <summary>
            The same as <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"/> but works in partial trust and adds explicit caching of
            generated indentation string and also recognizes writing a string that contains just \r\n or \n as a write-line to ensure
            we indent the next line properly.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
            <summary>
            Specifies the default tab string. This field is constant.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
            <summary>
            Specifies the culture what will be used by the underlying TextWriter. This static property is read-only.
            Note that any writer passed to one of the constructors of <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter"/> must use this
            same culture. The culture is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the IndentedTextWriter class using the specified text writer and default tab string.
            Note that the writer passed to this constructor must use the <see cref="T:System.Globalization.CultureInfo"/> specified by the
            <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture"/> property.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.TextWriter"/> to use for output.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Initializes a new instance of the IndentedTextWriter class using the specified text writer and tab string.
            Note that the writer passed to this constructor must use the <see cref="T:System.Globalization.CultureInfo"/> specified by the
            <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture"/> property.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.TextWriter"/> to use for output.
            </param>
            <param name="tabString"> The tab string to use for indentation. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
            <summary>
            Closes the document being written to.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
            <summary>
            Outputs the tab string once for each level of indentation according to the
            <see
                cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />
            property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
            <summary>
            Builds a string representing the current indentation level for a new line.
            </summary>
            <remarks>
            Does NOT check if tabs are currently pending, just returns a string that would be
            useful in replacing embedded <see cref="P:System.Environment.NewLine">newline characters</see>.
            </remarks>
            <returns>An empty string, or a string that contains .Indent level's worth of specified tab-string.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
            <summary>
            Writes the specified string to the text stream.
            </summary>
            <param name="value"> The string to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value to the text stream.
            </summary>
            <param name="value"> The Boolean value to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value"> The character to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the text stream.
            </summary>
            <param name="buffer"> The character array to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer"> The character array to write data from. </param>
            <param name="index"> Starting index in the buffer. </param>
            <param name="count"> The number of characters to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
            <summary>
            Writes the text representation of a Double to the text stream.
            </summary>
            <param name="value"> The double to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
            <summary>
            Writes the text representation of a Single to the text stream.
            </summary>
            <param name="value"> The single to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
            <summary>
            Writes the text representation of an integer to the text stream.
            </summary>
            <param name="value"> The integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte integer to the text stream.
            </summary>
            <param name="value"> The 8-byte integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text stream.
            </summary>
            <param name="value"> The object to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name="format"> The formatting string. </param>
            <param name="arg0"> The object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name="format"> The formatting string to use. </param>
            <param name="arg0"> The first object to write into the formatted string. </param>
            <param name="arg1"> The second object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name="format"> The formatting string to use. </param>
            <param name="arg"> The argument array to output. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
            <summary>
            Writes the specified string to a line without tabs.
            </summary>
            <param name="value"> The string to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
            <summary>
            Writes the specified string, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The string to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
            <summary>
            Writes a line terminator.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The Boolean to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
            <summary>
            Writes a character, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The character to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
            <summary>
            Writes a character array, followed by a line terminator, to the text stream.
            </summary>
            <param name="buffer"> The character array to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters, followed by a line terminator, to the text stream.
            </summary>
            <param name="buffer"> The character array to write data from. </param>
            <param name="index"> Starting index in the buffer. </param>
            <param name="count"> The number of characters to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
            <summary>
            Writes the text representation of a Double, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The double to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
            <summary>
            Writes the text representation of a Single, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The single to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of an integer, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The 8-byte integer to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> The object to write. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name="format"> The formatting string. </param>
            <param name="arg0"> The object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name="format"> The formatting string to use. </param>
            <param name="arg0"> The first object to write into the formatted string. </param>
            <param name="arg1"> The second object to write into the formatted string. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name="format"> The formatting string to use. </param>
            <param name="arg"> The argument array to output. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of a UInt32, followed by a line terminator, to the text stream.
            </summary>
            <param name="value"> A UInt32 to output. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
            <summary>
            Gets the encoding for the text writer to use.
            </summary>
            <returns>
            An <see cref="T:System.Text.Encoding" /> that indicates the encoding for the text writer to use.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
            <summary>
            Gets or sets the new line character to use.
            </summary>
            <returns> The new line character to use. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
            <summary>
            Gets or sets the number of spaces to indent.
            </summary>
            <returns> The number of spaces to indent. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
            <summary>
            Gets the <see cref="T:System.IO.TextWriter" /> to use.
            </summary>
            <returns>
            The <see cref="T:System.IO.TextWriter" /> to use.
            </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
            <summary>
            Convention to apply column ordering specified via
            <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute"/>
            or the <see cref="T:System.Data.Entity.DbModelBuilder"/> API. This convention throws if a duplicate configured column order
            is detected.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
            <summary>
            Convention to apply column ordering specified via
            <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute"/>
            or the <see cref="T:System.Data.Entity.DbModelBuilder"/> API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
            <summary>
            Validates the ordering configuration supplied for columns.
            This base implementation is a no-op.
            </summary>
            <param name="table">The name of the table that the columns belong to.</param>
            <param name="tableName">The definition of the table.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
            <summary>
            Validates the ordering configuration supplied for columns to ensure 
            that the same ordinal was not supplied for two columns.
            </summary>
            <param name="table">The name of the table that the columns belong to.</param>
            <param name="tableName">The definition of the table.</param>
        </member>
        <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
            <summary>
            Represents a conceptual or store model. This class can be used to access information about the shape of the model 
            and the way the that it has been configured. 
            </summary>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
            <summary>
            Adds an association type to the model.
            </summary>
            <param name="item">The AssociationType instance to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
            <summary>
            Adds a complex type to the model.
            </summary>
            <param name="item">The ComplexType instance to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Adds an entity type to the model.
            </summary>
            <param name="item">The EntityType instance to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
            <summary>
            Adds an enumeration type to the model.
            </summary>
            <param name="item">The EnumType instance to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>
            Adds a function to the model.
            </summary>
            <param name="item">The EdmFunction instance to be added.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
            <summary>
            Removes an association type from the model.
            </summary>
            <param name="item">The AssociationType instance to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
            <summary>
            Removes a complex type from the model.
            </summary>
            <param name="item">The ComplexType instance to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
            <summary>
            Removes an entity type from the model.
            </summary>
            <param name="item">The EntityType instance to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
            <summary>
            Removes an enumeration type from the model.
            </summary>
            <param name="item">The EnumType instance to be removed.</param>
        </member>
        <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
            <summary>
            Removes a function from the model.
            </summary>
            <param name="item">The EdmFunction instance to be removed.</param>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
            <summary>Gets the built-in type kind for this type.</summary>
            <returns>
            A <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
            <summary>
            Gets the data space associated with the model, which indicates whether 
            it is a conceptual model (DataSpace.CSpace) or a store model (DataSpace.SSpace).
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
            <summary>
            Gets the association types in the model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
            <summary>
            Gets the complex types in the model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
            <summary>
            Gets the entity types in the model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
            <summary>
            Gets the enum types in the model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
            <summary>
            Gets the functions in the model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
            <summary>
            Gets the container that stores entity and association sets, and function imports.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
            <summary>Gets the global items associated with the model.</summary>
            <returns>The global items associated with the model.</returns>
        </member>
        <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
            <summary>
            An implementation of IDatabaseInitializer that will recreate and optionally re-seed the
            database only if the database does not exist.
            To seed the database, create a derived class and override the Seed method.
            </summary>
            <typeparam name="TContext"> The type of the context. </typeparam>
        </member>
        <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> class.</summary>
        </member>
        <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context"> The context. </param>
        </member>
        <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
            <summary>
            A method that should be overridden to actually add data to the context for seeding.
            The default implementation does nothing.
            </summary>
            <param name="context"> The context to seed. </param>
        </member>
        <member name="T:System.Data.Entity.Database">
            <summary>
            An instance of this class is obtained from an <see cref="T:System.Data.Entity.DbContext"/> object and can be used
            to manage the actual database backing a DbContext or connection.
            This includes creating, deleting, and checking for the existence of a database.
            Note that deletion and checking for existence of a database can be performed using just a
            connection (i.e. without a full context) by using the static methods of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Enables the user to pass in a database transaction created outside of the <see cref="T:System.Data.Entity.Database"/> object
            if you want the Entity Framework to execute commands within that external transaction.
            Alternatively, pass in null to clear the framework's knowledge of that transaction.
            </summary>
            <param name="transaction">the external transaction</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the transaction is already completed</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the connection associated with the <see cref="T:System.Data.Entity.Database"/> object is already enlisted in a
            <see cref="T:System.Transactions.TransactionScope"/>
            transaction
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the connection associated with the <see cref="T:System.Data.Entity.Database"/> object is already participating in a transaction
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the connection associated with the transaction does not match the Entity Framework's connection</exception>
        </member>
        <member name="M:System.Data.Entity.Database.BeginTransaction">
            <summary>
            Begins a transaction on the underlying store connection
            </summary>
            <returns>
            a <see cref="T:System.Data.Entity.DbContextTransaction"/> object wrapping access to the underlying store's transaction object
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the underlying store connection using the specified isolation level
            </summary>
            <param name="isolationLevel">The database isolation level with which the underlying store transaction will be created</param>
            <returns>
            a <see cref="T:System.Data.Entity.DbContextTransaction"/> object wrapping access to the underlying store's transaction object
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
            <summary>
            Sets the database initializer to use for the given context type.  The database initializer is called when a
            the given <see cref="T:System.Data.Entity.DbContext"/> type is used to access a database for the first time.
            The default strategy for Code First contexts is an instance of <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/>.
            </summary>
            <typeparam name="TContext"> The type of the context. </typeparam>
            <param name="strategy"> The initializer to use, or null to disable initialization for the given context type. </param>
        </member>
        <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
            <summary>
            Runs the the registered <see cref="T:System.Data.Entity.IDatabaseInitializer`1"/> on this context.
            If "force" is set to true, then the initializer is run regardless of whether or not it
            has been run before.  This can be useful if a database is deleted while an app is running
            and needs to be reinitialized.
            If "force" is set to false, then the initializer is only run if it has not already been
            run for this context, model, and connection in this app domain. This method is typically
            used when it is necessary to ensure that the database has been created and seeded
            before starting some operation where doing so lazily will cause issues, such as when the
            operation is part of a transaction.
            </summary>
            <param name="force">
            If set to <c>true</c> the initializer is run even if it has already been run.
            </param>
        </member>
        <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
            <summary>
            Checks whether or not the database is compatible with the the current Code First model.
            </summary>
            <remarks>
            Model compatibility currently uses the following rules.
            If the context was created using either the Model First or Database First approach then the
            model is assumed to be compatible with the database and this method returns true.
            For Code First the model is considered compatible if the model is stored in the database
            in the Migrations history table and that model has no differences from the current model as
            determined by Migrations model differ.
            If the model is not stored in the database but an EF 4.1/4.2 model hash is found instead,
            then this is used to check for compatibility.
            </remarks>
            <param name="throwIfNoMetadata">
            If set to <c>true</c> then an exception will be thrown if no model metadata is found in the database. If set to <c>false</c> then this method will return <c>true</c> if metadata is not found.
            </param>
            <returns> True if the model hash in the context and the database match; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Create">
            <summary>
            Creates a new database on the database server for the model defined in the backing context.
            Note that calling this method before the database initialization strategy has run will disable
            executing that strategy.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.CreateIfNotExists">
            <summary>
            Creates a new database on the database server for the model defined in the backing context, but only
            if a database with the same name does not already exist on the server.
            </summary>
            <returns> True if the database did not exist and was created; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Exists">
            <summary>
            Checks whether or not the database exists on the server.
            </summary>
            <returns> True if the database exists; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Delete">
            <summary>
            Deletes the database on the database server if it exists, otherwise does nothing.
            Calling this method from outside of an initializer will mark the database as having
            not been initialized. This means that if an attempt is made to use the database again
            after it has been deleted, then any initializer set will run again and, usually, will
            try to create the database again automatically.
            </summary>
            <returns> True if the database did exist and was deleted; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Exists(System.String)">
            <summary>
            Checks whether or not the database exists on the server.
            The connection to the database is created using the given database name or connection string
            in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString"> The database name or a connection string to the database. </param>
            <returns> True if the database exists; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Delete(System.String)">
            <summary>
            Deletes the database on the database server if it exists, otherwise does nothing.
            The connection to the database is created using the given database name or connection string
            in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString"> The database name or a connection string to the database. </param>
            <returns> True if the database did exist and was deleted; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
            <summary>
            Checks whether or not the database exists on the server.
            </summary>
            <param name="existingConnection"> An existing connection to the database. </param>
            <returns> True if the database exists; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
            <summary>
            Deletes the database on the database server if it exists, otherwise does nothing.
            </summary>
            <param name="existingConnection"> An existing connection to the database. </param>
            <returns> True if the database did exist and was deleted; false otherwise. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
             <summary>
             Creates a raw SQL query that will return elements of the given generic type.
             The type can be any type that has properties that match the names of the columns returned
             from the query, or can be a simple primitive type.  The type does not have to be an
             entity type. The results of this query are never tracked by the context even if the
             type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])"/>
             method to return entities that are tracked by the context.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Database.SqlQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Database.SqlQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <typeparam name="TElement"> The type of object returned by the query. </typeparam>
             <param name="sql"> The SQL query string. </param>
             <param name="parameters"> 
             The parameters to apply to the SQL query string. If output parameters are used, their values will 
             not be available until the results have been read completely. This is due to the underlying behavior 
             of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             A <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1"/> object that will execute the query when it is enumerated.
             </returns>
        </member>
        <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
             <summary>
             Creates a raw SQL query that will return elements of the given type.
             The type can be any type that has properties that match the names of the columns returned
             from the query, or can be a simple primitive type.  The type does not have to be an
             entity type. The results of this query are never tracked by the context even if the
             type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])"/>
             method to return entities that are tracked by the context.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <param name="elementType"> The type of object returned by the query. </param>
             <param name="sql"> The SQL query string. </param>
             <param name="parameters"> 
             The parameters to apply to the SQL query string. If output parameters are used, their values 
             will not be available until the results have been read completely. This is due to the underlying 
             behavior of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             A <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery"/> object that will execute the query when it is enumerated.
             </returns>
        </member>
        <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
             <summary>
             Executes the given DDL/DML command against the database.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <remarks>
             If there isn't an existing local or ambient transaction a new transaction will be used
             to execute the command.
             </remarks>
             <param name="sql"> The command string. </param>
             <param name="parameters"> The parameters to apply to the command string. </param>
             <returns> The result returned by the database after executing the command. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
             <summary>
             Executes the given DDL/DML command against the database.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <param name="transactionalBehavior"> Controls the creation of a transaction for this command. </param>
             <param name="sql"> The command string. </param>
             <param name="parameters"> The parameters to apply to the command string. </param>
             <returns> The result returned by the database after executing the command. </returns>
        </member>
        <member name="M:System.Data.Entity.Database.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Database.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Database.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Database.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Database.Connection">
            <summary>
            Returns the connection being used by this context.  This may cause the
            connection to be created if it does not already exist.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
            <summary>
            The connection factory to use when creating a <see cref="T:System.Data.Common.DbConnection"/> from just
            a database name or a connection string.
            </summary>
            <remarks>
            This is used when just a database name or connection string is given to <see cref="T:System.Data.Entity.DbContext"/> or when
            the no database name or connection is given to DbContext in which case the name of
            the context class is passed to this factory in order to generate a DbConnection.
            By default, the <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory"/> instance to use is read from the application's .config
            file from the "EntityFramework DefaultConnectionFactory" entry in appSettings. If no entry is found in
            the config file then <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory"/> is used. Setting this property in code
            always overrides whatever value is found in the config file.
            </remarks>
        </member>
        <member name="P:System.Data.Entity.Database.CommandTimeout">
            <summary>
            Gets or sets the timeout value, in seconds, for all context operations.
            The default value is null, where null indicates that the default value of the underlying
            provider will be used.
            </summary>
            <value>
            The timeout, in seconds, or null to use the provider default.
            </value>
        </member>
        <member name="P:System.Data.Entity.Database.Log">
            <summary>
            Set this property to log the SQL generated by the <see cref="T:System.Data.Entity.DbContext"/> to the given
            delegate. For example, to log to the console, set this property to <see cref="M:System.Console.Write(System.String)"/>.
            </summary>
            <remarks>
            The format of the log text can be changed by creating a new formatter that derives from
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter"/> and setting it with <see cref="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})"/>.
            For more low-level control over logging/interception see <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"/> and
            <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception"/>.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.DbModelBuilder">
            <summary>
            DbModelBuilder is used to map CLR classes to a database schema.
            This code centric approach to building an Entity Data Model (EDM) model is known as 'Code First'.
            </summary>
            <remarks>
            DbModelBuilder is typically used to configure a model by overriding
            DbContext.OnModelCreating(DbModelBuilder)
            .
            You can also use DbModelBuilder independently of DbContext to build a model and then construct a
            <see cref="T:System.Data.Entity.DbContext"/> or <see cref="T:System.Data.Objects.ObjectContext"/>.
            The recommended approach, however, is to use OnModelCreating in <see cref="T:System.Data.Entity.DbContext"/> as
            the workflow is more intuitive and takes care of common tasks, such as caching the created model.
            Types that form your model are registered with DbModelBuilder and optional configuration can be
            performed by applying data annotations to your classes and/or using the fluent style DbModelBuilder
            API.
            When the Build method is called a set of conventions are run to discover the initial model.
            These conventions will automatically discover aspects of the model, such as primary keys, and
            will also process any data annotations that were specified on your classes. Finally
            any configuration that was performed using the DbModelBuilder API is applied.
            Configuration done via the DbModelBuilder API takes precedence over data annotations which
            in turn take precedence over the default conventions.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder"/> class.
            The process of discovering the initial model will use the set of conventions included
            in the most recent version of the Entity Framework installed on your machine.
            </summary>
            <remarks>
            Upgrading to newer versions of the Entity Framework may cause breaking changes
            in your application because new conventions may cause the initial model to be
            configured differently. There is an alternate constructor that allows a specific
            version of conventions to be specified.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder"/> class that will use
            a specific set of conventions to discover the initial model.
            </summary>
            <param name="modelBuilderVersion"> The version of conventions to be used. </param>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
            <summary>
            Excludes a type from the model. This is used to remove types from the model that were added
            by convention during initial model discovery.
            </summary>
            <typeparam name="T"> The type to be excluded. </typeparam>
            <returns> The same DbModelBuilder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
            <summary>
            Configures the default database schema name. This default database schema name is used
            for database objects that do not have an explicitly configured schema name.
            </summary>
            <param name="schema"> The name of the default database schema. </param>
            <returns> The same DbModelBuilder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Excludes the specified type(s) from the model. This is used to remove types from the model that were added
            by convention during initial model discovery.
            </summary>
            <param name="types"> The types to be excluded from the model. </param>
            <returns> The same DbModelBuilder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
            <summary>
            Registers an entity type as part of the model and returns an object that can be used to
            configure the entity. This method can be called multiple times for the same entity to
            perform multiple lines of configuration.
            </summary>
            <typeparam name="TEntityType"> The type to be registered or configured. </typeparam>
            <returns> The configuration object for the specified entity type. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
            <summary>
            Registers an entity type as part of the model.
            </summary>
            <param name="entityType"> The type to be registered. </param>
            <remarks>
            This method is provided as a convenience to allow entity types to be registered dynamically
            without the need to use MakeGenericMethod in order to call the normal generic Entity method.
            This method does not allow further configuration of the entity type using the fluent APIs since
            these APIs make extensive use of generic type parameters.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
            <summary>
            Registers a type as a complex type in the model and returns an object that can be used to
            configure the complex type. This method can be called multiple times for the same type to
            perform multiple lines of configuration.
            </summary>
            <typeparam name="TComplexType"> The type to be registered or configured. </typeparam>
            <returns> The configuration object for the specified complex type. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Types">
            <summary>
            Begins configuration of a lightweight convention that applies to all entities and complex types in
            the model.
            </summary>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
            <summary>
            Begins configuration of a lightweight convention that applies to all entities and complex types
            in the model that inherit from or implement the type specified by the generic argument.
            This method does not register types as part of the model.
            </summary>
            <typeparam name="T"> The type of the entities or complex types that this convention will apply to. </typeparam>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Properties">
            <summary>
            Begins configuration of a lightweight convention that applies to all properties
            in the model.
            </summary>
            <returns> A configuration object for the convention. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
            <summary>
            Begins configuration of a lightweight convention that applies to all primitive
            properties of the specified type in the model.
            </summary>
            <typeparam name="T"> The type of the properties that the convention will apply to. </typeparam>
            <returns> A configuration object for the convention. </returns>
            <remarks>
            The convention will apply to both nullable and non-nullable properties of the
            specified type.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> based on the configuration performed using this builder.
            The connection is used to determine the database provider being used as this
            affects the database layer of the generated model.
            </summary>
            <param name="providerConnection"> Connection to use to determine provider information. </param>
            <returns> The model that was built. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> based on the configuration performed using this builder.
            Provider information must be specified because this affects the database layer of the generated model.
            For SqlClient the invariant name is 'System.Data.SqlClient' and the manifest token is the version year (i.e. '2005', '2008' etc.)
            </summary>
            <param name="providerInfo"> The database provider that the model will be used with. </param>
            <returns> The model that was built. </returns>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbModelBuilder.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
            <summary>
            Provides access to the settings of this DbModelBuilder that deal with conventions.
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
            <summary>
            Gets the <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar"/> for this DbModelBuilder.
            The registrar allows derived entity and complex type configurations to be registered with this builder.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbModelBuilderVersion">
            <summary>
            A value from this enumeration can be provided directly to the <see cref="T:System.Data.Entity.DbModelBuilder"/>
            class or can be used in the <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> applied to
            a class derived from <see cref="T:System.Data.Entity.DbContext"/>. The value used defines which version of
            the DbContext and DbModelBuilder conventions should be used when building a model from
            code--also known as "Code First".
            </summary>
            <remarks>
            Using DbModelBuilderVersion.Latest ensures that all the latest functionality is available
            when upgrading to a new release of the Entity Framework. However, it may result in an
            application behaving differently with the new release than it did with a previous release.
            This can be avoided by using a specific version of the conventions, but if a version
            other than the latest is set then not all the latest functionality will be available.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
            <summary>
            Indicates that the latest version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and
            <see cref="T:System.Data.Entity.DbContext"/> conventions should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
            <summary>
            Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and
            <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework v4.1
            should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
            <summary>
            Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and
            <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework v5.0
            when targeting .Net Framework 4 should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
            <summary>
            Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and
            <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework v5.0
            should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
            <summary>
            Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder"/> and
            <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework v6.0
            should be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
            <summary>
            This attribute can be applied to a class derived from <see cref="T:System.Data.Entity.DbContext"/> to set which
            version of the DbContext and <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions should be used when building
            a model from code--also known as "Code First". See the <see cref="T:System.Data.Entity.DbModelBuilderVersion"/>
            enumeration for details about DbModelBuilder versions.
            </summary>
            <remarks>
            If the attribute is missing from DbContextthen DbContext will always use the latest
            version of the conventions.  This is equivalent to using DbModelBuilderVersion.Latest.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute"/> class.
            </summary>
            <param name="version">
            The <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions version to use.
            </param>
        </member>
        <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
            <summary>
            Gets the <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions version.
            </summary>
            <value>
            The <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions version.
            </value>
        </member>
        <member name="T:System.Data.Entity.DbSet">
            <summary>
            A non-generic version of <see cref="T:System.Data.Entity.DbSet`1"/> which can be used when the type of entity
            is not known at build time.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbQuery">
            <summary>
            Represents a non-generic LINQ to Entities query against a DbContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            Instead populate a DbSet with data, for example by using the Load extension method, and
            then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
            DbSet.Local.ToBindingList().
            </summary>
            <returns> Never returns; always throws. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> which when enumerated will execute the query against the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the DbQuery&lt;T&gt;. Other instances of DbQuery&lt;T&gt; and the object context itself are not affected.
            Because the Include method returns the query object, you can call this method multiple times on an DbQuery&lt;T&gt; to
            specify multiple paths for the query.
            </remarks>
            <param name="path"> The dot-separated list of related objects to return in the query results. </param>
            <returns>
            A new DbQuery&lt;T&gt; with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
            <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
            <returns> A new query with AsStreaming applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> object.
            </summary>
            <typeparam name="TElement"> The type of element for which the query was created. </typeparam>
            <returns> The generic set object. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the underlying query.
            </summary>
            <returns> The query string. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns>
            <c>false</c> .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
            <summary>
            The IQueryable element type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
            <summary>
            The IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
            <summary>
            The IQueryable provider.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbSet.#ctor">
            <summary>
            Creates an instance of a <see cref="T:System.Data.Entity.DbSet"/> when called from the constructor of a derived
            type that will be used as a test double for DbSets. Methods and properties that will be used by the
            test double must be implemented by the test double except AsNoTracking, AsStreaming, an Include where
            the default implementation is a no-op.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues"> The values of the primary key for the entity to be found. </param>
            <returns> The entity found, or null. </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
            <summary>
            Attaches the given entity to the context underlying the set.  That is, the entity is placed
            into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name="entity"> The entity to attach. </param>
            <returns> The entity. </returns>
            <remarks>
            Attach is used to repopulate a context with an entity that is known to already exist in the database.
            SaveChanges will therefore not attempt to insert an attached entity into the database because
            it is assumed to already be there.
            Note that entities that are already in the context in some other state will have their state set
            to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state such that it will
            be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entity"> The entity to add. </param>
            <returns> The entity. </returns>
            <remarks>
            Note that entities that are already in the context in some other state will have their state set
            to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the given collection of entities into context underlying the set with each entity being put into
            the Added state such that it will be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entities">The collection of entities to add.</param>
            <returns>
            The collection of entities.
            </returns>
            <remarks>
            Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled"/> is set to true (which is
            the default), then DetectChanges will be called once before adding any entities and will not be called
            again. This means that in some situations AddRange may perform significantly better than calling
            Add multiple times would do.
            Note that entities that are already in the context in some other state will have their state set to
            Added.  AddRange is a no-op for entities that are already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
            <summary>
            Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
            is called.  Note that the entity must exist in the context in some other state before this method
            is called.
            </summary>
            <param name="entity"> The entity to remove. </param>
            <returns> The entity. </returns>
            <remarks>
            Note that if the entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
            <summary>
            Removes the given collection of entities from the context underlying the set with each entity being put into
            the Deleted state such that it will be deleted from the database when SaveChanges is called.
            </summary>
            <param name="entities">The collection of entities to delete.</param>
            <returns>
            The collection of entities.
            </returns>
            <remarks>
            Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled"/> is set to true (which is
            the default), then DetectChanges will be called once before delete any entities and will not be called
            again. This means that in some situations RemoveRange may perform significantly better than calling
            Remove multiple times would do.
            Note that if any entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet.Create">
            <summary>
            Creates a new instance of an entity for the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
            <summary>
            Creates a new instance of an entity for the type of this set or for a type derived
            from the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <param name="derivedEntityType">The type of entity to create.</param>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.Cast``1">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.DbSet`1"/> object.
            </summary>
            <typeparam name="TEntity"> The type of entity for which the set was created. </typeparam>
            <returns> The generic set object. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
             <summary>
             Creates a raw SQL query that will return entities in this set.  By default, the
             entities returned are tracked by the context; this can be changed by calling
             AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery"/> returned.
             Note that the entities returned are always of the type for this set and never of
             a derived type.  If the table or tables queried may contain data for other entity
             types, then the SQL query must be written appropriately to ensure that only entities of
             the correct type are returned.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <param name="sql"> The SQL query string. </param>
             <param name="parameters"> 
             The parameters to apply to the SQL query string. If output parameters are used, their values 
             will not be available until the results have been read completely. This is due to the underlying 
             behavior of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery"/> object that will execute the query when it is enumerated.
             </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbSet.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbSet.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.DbSet.Local">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
            and Modified entities in this set.  This local view will stay in sync as entities are added or
            removed from the context.  Likewise, entities added to or removed from the local view will automatically
            be added to or removed from the context.
            </summary>
            <remarks>
            This property can be used for data binding by populating the set with data, for example by using the Load
            extension method, and then binding to the local data through this property.  For WPF bind to this property
            directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value> The local view. </value>
        </member>
        <member name="T:System.Data.Entity.DbSet`1">
            <summary>
            A DbSet represents the collection of all entities in the context, or that can be queried from the
            database, of a given type.  DbSet objects are created from a DbContext using the DbContext.Set method.
            </summary>
            <remarks>
            Note that DbSet does not support MEST (Multiple Entity Sets per Type) meaning that there is always a
            one-to-one correlation between a type and a set.
            </remarks>
            <typeparam name="TEntity"> The type that defines the set. </typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
            <summary>
            Represents a LINQ to Entities query against a DbContext.
            </summary>
            <typeparam name="TResult"> The type of entity to query for. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <remarks>
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the DbQuery&lt;T&gt;. Other instances of DbQuery&lt;T&gt; and the object context itself are not affected.
            Because the Include method returns the query object, you can call this method multiple times on an DbQuery&lt;T&gt; to
            specify multiple paths for the query.
            </remarks>
            <param name="path"> The dot-separated list of related objects to return in the query results. </param>
            <returns>
            A new <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> with the defined query path.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
            <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
            <returns> A new query with AsStreaming applied. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            Instead populate a DbSet with data, for example by using the Load extension method, and
            then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
            DbSet.Local.ToBindingList().
            </summary>
            <returns> Never returns; always throws. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{TResult}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> which when enumerated will execute the query against the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> which when enumerated will execute the query against the database.
            </summary>
            <returns> The query results. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the underlying query.
            </summary>
            <returns> The query string. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> class for this query.
            </summary>
            <param name="entry">The query.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns>
            <c>false</c> .
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
            The IQueryable element type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            The IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            The IQueryable provider.
            </summary>
        </member>
        <member name="T:System.Data.Entity.IDbSet`1">
            <summary>
            An <see cref="T:System.Data.Entity.IDbSet`1"/> represents the collection of all entities in the context, or that
            can be queried from the database, of a given type.  <see cref="T:System.Data.Entity.DbSet`1"/> is a concrete
            implementation of IDbSet.
            </summary>
            <remarks>
            <see cref="T:System.Data.Entity.IDbSet`1"/> was originally intended to allow creation of test doubles (mocks or
            fakes) for <see cref="T:System.Data.Entity.DbSet`1"/>. However, this approach has issues in that adding new members
            to an interface breaks existing code that already implements the interface without the new members.
            Therefore, starting with EF6, no new members will be added to this interface and it is recommended
            that <see cref="T:System.Data.Entity.DbSet`1"/> be used as the base class for test doubles.
            </remarks>
            <typeparam name="TEntity"> The type that defines the set. </typeparam>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues"> The values of the primary key for the entity to be found. </param>
            <returns> The entity found, or null. </returns>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state such that it will
            be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entity"> The entity to add. </param>
            <returns> The entity. </returns>
            <remarks>
            Note that entities that are already in the context in some other state will have their state set
            to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
            <summary>
            Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
            is called.  Note that the entity must exist in the context in some other state before this method
            is called.
            </summary>
            <param name="entity"> The entity to remove. </param>
            <returns> The entity. </returns>
            <remarks>
            Note that if the entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
            <summary>
            Attaches the given entity to the context underlying the set.  That is, the entity is placed
            into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name="entity"> The entity to attach. </param>
            <returns> The entity. </returns>
            <remarks>
            Attach is used to repopulate a context with an entity that is known to already exist in the database.
            SaveChanges will therefore not attempt to insert an attached entity into the database because
            it is assumed to already be there.
            Note that entities that are already in the context in some other state will have their state set
            to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Create">
            <summary>
            Creates a new instance of an entity for the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Create``1">
            <summary>
            Creates a new instance of an entity for the type of this set or for a type derived
            from the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <typeparam name="TDerivedEntity"> The type of entity to create. </typeparam>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="P:System.Data.Entity.IDbSet`1.Local">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
            and Modified entities in this set.  This local view will stay in sync as entities are added or
            removed from the context.  Likewise, entities added to or removed from the local view will automatically
            be added to or removed from the context.
            </summary>
            <remarks>
            This property can be used for data binding by populating the set with data, for example by using the Load
            extension method, and then binding to the local data through this property.  For WPF bind to this property
            directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value> The local view. </value>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.#ctor">
            <summary>
            Creates an instance of a <see cref="T:System.Data.Entity.DbSet`1"/> when called from the constructor of a derived
            type that will be used as a test double for DbSets. Methods and properties that will be used by the
            test double must be implemented by the test double except AsNoTracking, AsStreaming, an Include where
            the default implementation is a no-op.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues"> The values of the primary key for the entity to be found. </param>
            <returns> The entity found, or null. </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the given collection of entities into context underlying the set with each entity being put into
            the Added state such that it will be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entities">The collection of entities to add.</param>
            <returns>
            The collection of entities.
            </returns>
            <remarks>
            Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled"/> is set to true (which is
            the default), then DetectChanges will be called once before adding any entities and will not be called
            again. This means that in some situations AddRange may perform significantly better than calling
            Add multiple times would do.
            Note that entities that are already in the context in some other state will have their state set to
            Added.  AddRange is a no-op for entities that are already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the given collection of entities from the context underlying the set with each entity being put into
            the Deleted state such that it will be deleted from the database when SaveChanges is called.
            </summary>
            <param name="entities">The collection of entities to delete.</param>
            <returns>
            The collection of entities.
            </returns>
            <remarks>
            Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled"/> is set to true (which is
            the default), then DetectChanges will be called once before delete any entities and will not be called
            again. This means that in some situations RemoveRange may perform significantly better than calling
            Remove multiple times would do.
            Note that if any entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Create">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Create``1">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
            <summary>
            Returns the equivalent non-generic <see cref="T:System.Data.Entity.DbSet"/> object.
            </summary>
            <param name="entry">The generic set object.</param>
            <returns> The non-generic set object. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
             <summary>
             Creates a raw SQL query that will return entities in this set.  By default, the
             entities returned are tracked by the context; this can be changed by calling
             AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> returned.
             Note that the entities returned are always of the type for this set and never of
             a derived type.  If the table or tables queried may contain data for other entity
             types, then the SQL query must be written appropriately to ensure that only entities of
             the correct type are returned.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
             <param name="sql"> The SQL query string. </param>
             <param name="parameters"> 
             The parameters to apply to the SQL query string. If output parameters are used, their values will 
             not be available until the results have been read completely. This is due to the underlying behavior 
             of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
             <returns>
             A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1"/> object that will execute the query when it is enumerated.
             </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.DbSet`1.GetType">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.DbSet`1.Local">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
            <summary>
            An implementation of IDatabaseInitializer that will always recreate and optionally re-seed the
            database the first time that a context is used in the app domain.
            To seed the database, create a derived class and override the Seed method.
            </summary>
            <typeparam name="TContext"> The type of the context. </typeparam>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> class.</summary>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context"> The context. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/>
            is
            <c>null</c>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
            <summary>
            A method that should be overridden to actually add data to the context for seeding.
            The default implementation does nothing.
            </summary>
            <param name="context"> The context to seed. </param>
        </member>
        <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
            <summary>
            An implementation of IDatabaseInitializer that will <b>DELETE</b>, recreate, and optionally re-seed the
            database only if the model has changed since the database was created.
            </summary>
            <typeparam name="TContext"> The type of the context. </typeparam>
            <remarks>
            Whether or not the model has changed is determined by the <see cref="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)"/>
            method.
            To seed the database create a derived class and override the Seed method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> class.</summary>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context"> The context. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/>
            is
            <c>null</c>
            .
            </exception>
        </member>
        <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
            <summary>
            A method that should be overridden to actually add data to the context for seeding.
            The default implementation does nothing.
            </summary>
            <param name="context"> The context to seed. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
            <summary>
            Returned by the ChangeTracker method of <see cref="T:System.Data.Entity.DbContext"/> to provide access to features of
            the context that are related to change tracking of entities.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
            <summary>
            Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects for all the entities tracked by this context.
            </summary>
            <returns> The entries. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
            <summary>
            Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects for all the entities of the given type
            tracked by this context.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <returns> The entries. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
            <summary>
            Checks if the <see cref="T:System.Data.Entity.DbContext"/> is tracking any new, deleted, or changed entities or
            relationships that will be sent to the database if <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> is called.
            </summary>
            <remarks>
            Functionally, calling this method is equivalent to checking if there are any entities or
            relationships in the Added, Updated, or Deleted state.
            Note that this method calls <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges"/> unless
            <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled"/> has been set to false.
            </remarks>
            <returns>
            True if underlying <see cref="T:System.Data.Entity.DbContext"/> have changes, else false.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
            <summary>
            Detects changes made to the properties and relationships of POCO entities.  Note that some types of
            entity (such as change tracking proxies and entities that derive from
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject"/>)
            report changes automatically and a call to DetectChanges is not normally needed for these types of entities.
            Also note that normally DetectChanges is called automatically by many of the methods of <see cref="T:System.Data.Entity.DbContext"/>
            and its related classes such that it is rare that this method will need to be called explicitly.
            However, it may be desirable, usually for performance reasons, to turn off this automatic calling of
            DetectChanges using the AutoDetectChangesEnabled flag from <see cref="P:System.Data.Entity.DbContext.Configuration"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
            <summary>
            This is an abstract base class use to represent a scalar or complex property, or a navigation property
            of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>,
            reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>, and collection
            navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
            <summary>
            Validates this property.
            </summary>
            <returns>
            Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> object.
            </summary>
            <typeparam name="TEntity"> The type of entity on which the member is declared. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <returns> The equivalent generic object. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this member belongs.
            </summary>
            <value> An entry for the entity that owns this member. </value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
            <summary>
            Loads the collection of entities from the database.
            Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
            <summary>
            Returns the query that would be used to load this collection from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database, such
            as counting the number of entities in the collection in the database without actually loading them.
            </summary>
            <returns> A query for the collection. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> object.
            </summary>
            <typeparam name="TEntity"> The type of entity on which the member is declared. </typeparam>
            <typeparam name="TElement"> The type of the collection element. </typeparam>
            <returns> The equivalent generic object. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
            <summary>
            Gets the property name.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
            <summary>
            Gets or sets a value indicating whether all entities of this collection have been loaded from the database.
            </summary>
            <remarks>
            Loading the related entities from the database either using lazy-loading, as part of a query, or explicitly
            with one of the Load methods will set the IsLoaded flag to true.
            IsLoaded can be explicitly set to true to prevent the related entities of this collection from being lazy-loaded.
            This can be useful if the application has caused a subset of related entities to be loaded into this collection
            and wants to prevent any other entities from being loaded automatically.
            Note that explict loading using one of the Load methods will load all related entities from the database
            regardless of whether or not IsLoaded is true.
            When any related entity in the collection is detached the IsLoaded flag is reset to false indicating that the
            not all related entities are now loaded.
            </remarks>
            <value>
            <c>true</c> if all the related entities are loaded or the IsLoaded has been explicitly set to true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this navigation property belongs.
            </summary>
            <value> An entry for the entity that owns this navigation property. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
            <summary>
            Instances of this class are returned from the Collection method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow operations such as loading to
            be performed on the an entity's collection navigation properties.
            </summary>
            <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
            <typeparam name="TElement"> The type of the element in the collection of entities. </typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
            <summary>
            This is an abstract base class use to represent a scalar or complex property, or a navigation property
            of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>,
            reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>, and collection
            navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            </summary>
            <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> class for
            the property represented by this object.
            </summary>
            <param name="entry">The object representing the property.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
            <summary>
            Validates this property.
            </summary>
            <returns>
            Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
            <summary> Gets the name of the property. </summary>
            <returns> The name of the property. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this member belongs.
            </summary>
            <value> An entry for the entity that owns this member. </value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
            <summary>
            Loads the collection of entities from the database.
            Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
            <summary>
            Returns the query that would be used to load this collection from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database, such
            as counting the number of entities in the collection in the database without actually loading them.
            </summary>
            <returns> A query for the collection. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> class for
            the navigation property represented by this object.
            </summary>
            <param name="entry">The object representing the navigation property.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
            <summary>
            Gets the property name.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
            <summary>
            Gets or sets a value indicating whether all entities of this collection have been loaded from the database.
            </summary>
            <remarks>
            Loading the related entities from the database either using lazy-loading, as part of a query, or explicitly
            with one of the Load methods will set the IsLoaded flag to true.
            IsLoaded can be explicitly set to true to prevent the related entities of this collection from being lazy-loaded.
            This can be useful if the application has caused a subset of related entities to be loaded into this collection
            and wants to prevent any other entities from being loaded automatically.
            Note that explict loading using one of the Load methods will load all related entities from the database
            regardless of whether or not IsLoaded is true.
            When any related entity in the collection is detached the IsLoaded flag is reset to false indicating that the
            not all related entities are now loaded.
            </remarks>
            <value>
            <c>true</c> if all the related entities are loaded or the IsLoaded has been explicitly set to true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this navigation property belongs.
            </summary>
            <value> An entry for the entity that owns this navigation property. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
            <summary>
            An immutable representation of an Entity Data Model (EDM) model that can be used to create an
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/> or can be passed to the constructor of a <see cref="T:System.Data.Entity.DbContext"/>.
            For increased performance, instances of this type should be cached and re-used to construct contexts.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
            <summary>
            Creates an instance of ObjectContext or class derived from ObjectContext.  Note that an instance
            of DbContext can be created instead by using the appropriate DbContext constructor.
            If a derived ObjectContext is used, then it must have a public constructor with a single
            EntityConnection parameter.
            The connection passed is used by the ObjectContext created, but is not owned by the context.  The caller
            must dispose of the connection once the context has been disposed.
            </summary>
            <typeparam name="TContext"> The type of context to create. </typeparam>
            <param name="existingConnection"> An existing connection to a database for use by the context. </param>
            <returns>The context.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> object.
            </summary>
            <typeparam name="TEntity"> The type of entity on which the member is declared. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <returns> The equivalent generic object. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
            <summary>
            Gets the property name.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
            <summary>
            Gets or sets the original value of this property.
            </summary>
            <value> The original value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
            <summary>
            Gets or sets a value indicating whether the value of this property has been modified since
            it was loaded from the database.
            </summary>
            <remarks>
            Setting this value to false for a modified property will revert the change by setting the
            current value to the original value. If the result is that no properties of the entity are
            marked as modified, then the entity will be marked as Unchanged.
            Setting this value to false for properties of Added, Unchanged, or Deleted entities
            is a no-op.
            </remarks>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this property belongs.
            </summary>
            <value> An entry for the entity that owns this property. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> of the property for which this is a nested property.
            This method will only return a non-null entry for properties of complex objects; it will
            return null for properties of the entity itself.
            </summary>
            <value> An entry for the parent complex property, or null if this is an entity property. </value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <param name="propertyName"> The name of the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <param name="propertyName"> The name of the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> object.
            </summary>
            <typeparam name="TEntity"> The type of entity on which the member is declared. </typeparam>
            <typeparam name="TComplexProperty"> The type of the complex property. </typeparam>
            <returns> The equivalent generic object. </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
            <summary>
            Instances of this class are returned from the ComplexProperty method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow access to the state of a complex property.
            </summary>
            <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
            <typeparam name="TComplexProperty"> The type of the property. </typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
            <summary>
            Instances of this class are returned from the Property method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow access to the state of the scalar
            or complex property.
            </summary>
            <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class for
            the property represented by this object.
            </summary>
            <param name="entry">The object representing the property.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
            <summary>
            Gets the property name.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
            <summary>
            Gets or sets the original value of this property.
            </summary>
            <value> The original value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
            <summary>
            Gets or sets a value indicating whether the value of this property has been modified since
            it was loaded from the database.
            </summary>
            <value>
            <c>true</c> if this instance is modified; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this property belongs.
            </summary>
            <value> An entry for the entity that owns this property. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> of the property for which this is a nested property.
            This method will only return a non-null entry for properties of complex objects; it will
            return null for properties of the entity itself.
            </summary>
            <value> An entry for the parent complex property, or null if this is an entity property. </value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/> class for
            the property represented by this object.
            </summary>
            <param name="entry">The object representing the property.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <param name="propertyName"> The name of the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <typeparam name="TNestedProperty"> The type of the nested property. </typeparam>
            <param name="propertyName"> The name of the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <typeparam name="TNestedProperty"> The type of the nested property. </typeparam>
            <param name="property"> An expression representing the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <param name="propertyName"> The name of the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <typeparam name="TNestedComplexProperty"> The type of the nested property. </typeparam>
            <param name="propertyName"> The name of the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <typeparam name="TNestedComplexProperty"> The type of the nested property. </typeparam>
            <param name="property"> An expression representing the nested property. </param>
            <returns> An object representing the nested property. </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
            <summary>
            Describes the origin of the database connection string associated with a <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
            <summary>
            The connection string was created by convention.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
            <summary>
            The connection string was read from external configuration.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
            <summary>
            The connection string was explicitly specified at runtime.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
            <summary>
            The connection string was overriden by connection information supplied to DbContextInfo.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
            <summary>
            Returned by the Configuration method of <see cref="T:System.Data.Entity.DbContext"/> to provide access to configuration
            options for the context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading of relationships exposed as
            navigation properties is enabled.  Lazy loading is enabled by default.
            </summary>
            <value>
            <c>true</c> if lazy loading is enabled; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
            <summary>
            Gets or sets a value indicating whether or not the framework will create instances of
            dynamically generated proxy classes whenever it creates an instance of an entity type.
            Note that even if proxy creation is enabled with this flag, proxy instances will only
            be created for entity types that meet the requirements for being proxied.
            Proxy creation is enabled by default.
            </summary>
            <value>
            <c>true</c> if proxy creation is enabled; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
            <summary>
            Gets or sets a value indicating whether database null semantics are exhibited when comparing
            two operands, both of which are potentially nullable. The default value is false.
            
            For example (operand1 == operand2) will be translated as:
            
            (operand1 = operand2)
            
            if UseDatabaseNullSemantics is true, respectively
            
            (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL)))
            
            if UseDatabaseNullSemantics is false.
            </summary>
            <value>
            <c>true</c> if database null comparison behavior is enabled, otherwise <c>false</c> .
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges"/>
            method is called automatically by methods of <see cref="T:System.Data.Entity.DbContext"/> and related classes.
            The default value is true.
            </summary>
            <value>
            <c>true</c> if should be called automatically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
            <summary>
            Gets or sets a value indicating whether tracked entities should be validated automatically when
            <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> is invoked.
            The default value is true.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
            <summary>
            Provides runtime information about a given <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> targeting a specific database.
            </summary>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="connectionInfo"> Connection information for the database to be used. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type. An external list of
            connection strings can be supplied and will be used during connection string resolution in place
            of any connection strings specified in external configuration files.
            </summary>
            <remarks>
            It is preferable to use the constructor that accepts the entire config document instead of using this
            constructor. Providing the entire config document allows DefaultConnectionFactroy entries in the config
            to be found in addition to explicitly specified connection strings.
            </remarks>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="connectionStringSettings"> A collection of connection strings. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type. An external config
            object (e.g. app.config or web.config) can be supplied and will be used during connection string
            resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            </summary>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="config"> An object representing the config file. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/>, targeting a specific database.
            An external config object (e.g. app.config or web.config) can be supplied and will be used during connection string
            resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            </summary>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="config"> An object representing the config file. </param>
            <param name="connectionInfo"> Connection information for the database to be used. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type.  A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/>
            can be supplied in order to override the default determined provider used when constructing
            the underlying EDM model.
            </summary>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="modelProviderInfo">
            A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> specifying the underlying ADO.NET provider to target.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
            <summary>
            Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext"/> type. An external config
            object (e.g. app.config or web.config) can be supplied and will be used during connection string
            resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> can be supplied in order to override the default determined
            provider used when constructing the underlying EDM model. This can be useful to prevent EF from
            connecting to discover a manifest token.
            </summary>
            <param name="contextType">
            The type deriving from <see cref="T:System.Data.Entity.DbContext"/>.
            </param>
            <param name="config"> An object representing the config file. </param>
            <param name="modelProviderInfo">
            A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo"/> specifying the underlying ADO.NET provider to target.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
            <summary>
            If instances of the underlying <see cref="T:System.Data.Entity.DbContext"/> type can be created, returns
            a new instance; otherwise returns null.
            </summary>
            <returns>
            A <see cref="T:System.Data.Entity.DbContext"/> instance.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
            <summary>
            The concrete <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
            <summary>
            Whether or not instances of the underlying <see cref="T:System.Data.Entity.DbContext"/> type can be created.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
            <summary>
            The connection string used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
            <summary>
            The connection string name used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
            <summary>
            The ADO.NET provider name of the connection used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
            <summary>
            The origin of the connection string used by the underlying <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
            <summary>
            An action to be run on the DbModelBuilder after OnModelCreating has been run on the context.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
            <summary>
            Queries the database for copies of the values of the tracked entity as they currently exist in the database.
            Note that changing the values in the returned dictionary will not update the values in the database.
            If the entity is not found in the database then null is returned.
            </summary>
            <returns> The store values. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
            <summary>
            Reloads the entity from the database overwriting any property values with values from the database.
            The entity will be in the Unchanged state after calling this method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <param name="navigationProperty"> The name of the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <param name="navigationProperty"> The name of the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> An object representing the property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <param name="propertyName"> The name of the complex property. </param>
            <returns> An object representing the complex property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/>.
            </summary>
            <param name="propertyName"> The name of the member. </param>
            <returns> An object representing the member. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
            <summary>
            Returns a new instance of the generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class for the given
            generic type for the tracked entity represented by this object.
            Note that the type of the tracked entity must be compatible with the generic type or
            an exception will be thrown.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
            <returns> A generic version. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
            <summary>
            Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instance and returns validation result.
            </summary>
            <returns>
            Entity validation result. Possibly null if
            DbContext.ValidateEntity(DbEntityEntry, IDictionary{object,object})
            method is overridden.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
            Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> is equal to this instance; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns> A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value> The entity. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
            <summary>
            Gets or sets the state of the entity.
            </summary>
            <value> The state. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
            <summary>
            Gets the current property values for the tracked entity represented by this object.
            </summary>
            <value> The current values. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
            <summary>
            Gets the original property values for the tracked entity represented by this object.
            The original values are usually the entity's property values as they were when last queried from
            the database.
            </summary>
            <value> The original values. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
            <summary>
            Instances of this class provide access to information about and control of entities that
            are being tracked by the <see cref="T:System.Data.Entity.DbContext"/>.  Use the Entity or Entities methods of
            the context to obtain objects of this type.
            </summary>
            <typeparam name="TEntity"> The type of the entity. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
            <summary>
            Queries the database for copies of the values of the tracked entity as they currently exist in the database.
            Note that changing the values in the returned dictionary will not update the values in the database.
            If the entity is not found in the database then null is returned.
            </summary>
            <returns> The store values. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
            <summary>
            Reloads the entity from the database overwriting any property values with values from the database.
            The entity will be in the Unchanged state after calling this method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <param name="navigationProperty"> The name of the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="navigationProperty"> The name of the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="navigationProperty"> An expression representing the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <param name="navigationProperty"> The name of the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <typeparam name="TElement"> The type of elements in the collection. </typeparam>
            <param name="navigationProperty"> The name of the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <typeparam name="TElement"> The type of elements in the collection. </typeparam>
            <param name="navigationProperty"> An expression representing the navigation property. </param>
            <returns> An object representing the navigation property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> An object representing the property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="propertyName"> The name of the property. </param>
            <returns> An object representing the property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="property"> An expression representing the property. </param>
            <returns> An object representing the property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <param name="propertyName"> The name of the complex property. </param>
            <returns> An object representing the complex property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <typeparam name="TComplexProperty"> The type of the complex property. </typeparam>
            <param name="propertyName"> The name of the complex property. </param>
            <returns> An object representing the complex property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <typeparam name="TComplexProperty"> The type of the complex property. </typeparam>
            <param name="property"> An expression representing the complex property. </param>
            <returns> An object representing the complex property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/>.
            </summary>
            <param name="propertyName"> The name of the member. </param>
            <returns> An object representing the member. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/>.
            </summary>
            <typeparam name="TMember"> The type of the member. </typeparam>
            <param name="propertyName"> The name of the member. </param>
            <returns> An object representing the member. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> class for
            the tracked entity represented by this object.
            </summary>
            <param name="entry">The object representing the tracked entity.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
            <summary>
            Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instance and returns validation result.
            </summary>
            <returns>
            Entity validation result. Possibly null if
            DbContext.ValidateEntity(DbEntityEntry, IDictionary{object, object})
            method is overridden.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> is equal to this instance; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns> A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value> The entity. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
            <summary>
            Gets or sets the state of the entity.
            </summary>
            <value> The state. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
            <summary>
            Gets the current property values for the tracked entity represented by this object.
            </summary>
            <value> The current values. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
            <summary>
            Gets the original property values for the tracked entity represented by this object.
            The original values are usually the entity's property values as they were when last queried from
            the database.
            </summary>
            <value> The original values. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbModel">
            <summary>
            Represents an Entity Data Model (EDM) created by the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            The Compile method can be used to go from this EDM representation to a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>
            which is a compiled snapshot of the model suitable for caching and creation of
            <see cref="T:System.Data.Entity.DbContext"/> or <see cref="T:System.Data.Objects.ObjectContext"/> instances.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/> for this mode which is a compiled snapshot
            suitable for caching and creation of <see cref="T:System.Data.Entity.DbContext"/> instances.
            </summary>
            <returns> The compiled model. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
            <summary>
            Gets the provider information.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
            <summary>
            Gets the provider manifest.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
            <summary>
            Gets the conceptual model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
            <summary>
            Gets the store model.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
            <summary>
            Gets the mapping model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
            <summary>
            A collection of all the properties for an underlying entity or complex object.
            </summary>
            <remarks>
            An instance of this class can be converted to an instance of the generic class
            using the Cast method.
            Complex properties in the underlying entity or complex object are represented in
            the property values as nested instances of this class.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
            <summary>
            Creates an object of the underlying type for this dictionary and hydrates it with property
            values from this dictionary.
            </summary>
            <returns> The properties of this dictionary copied into a new object. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
            <summary>
            Sets the values of this dictionary by reading values out of the given object.
            The given object can be of any type.  Any property on the object with a name that
            matches a property name in the dictionary and can be read will be read.  Other
            properties will be ignored.  This allows, for example, copying of properties from
            simple Data Transfer Objects (DTOs).
            </summary>
            <param name="obj"> The object to read values from. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
            <summary>
            Creates a new dictionary containing copies of all the properties in this dictionary.
            Changes made to the new dictionary will not be reflected in this dictionary and vice versa.
            </summary>
            <returns> A clone of this dictionary. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
            <summary>
            Sets the values of this dictionary by reading values from another dictionary.
            The other dictionary must be based on the same type as this dictionary, or a type derived
            from the type for this dictionary.
            </summary>
            <param name="propertyValues"> The dictionary to read values from. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
            <summary>
            Gets the value of the property just like using the indexed property getter but
            typed to the type of the generic parameter.  This is useful especially with
            nested dictionaries to avoid writing expressions with lots of casts.
            </summary>
            <typeparam name="TValue"> The type of the property. </typeparam>
            <param name="propertyName"> Name of the property. </param>
            <returns> The value of the property. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
            <summary>
            Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value> The property names. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified property name.
            The value may be a nested instance of this class.
            </summary>
            <param name="propertyName"> The property name. </param>
            <returns> The value of the property. </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
            <summary>
            Groups a pair of strings that identify a provider and server version together into a single object.
            </summary>
            <remarks>
            Instances of this class act as the key for resolving a <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> for a specific
            provider from a <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver"/>. This is typically used when registering spatial services
            in <see cref="T:System.Data.Entity.DbConfiguration"/> or when the spatial services specific to a provider is
            resolved by an implementation of <see cref="T:System.Data.Entity.Core.Common.DbProviderServices"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new object for a given provider invariant name and manifest token.
            </summary>
            <param name="providerInvariantName">
            A string that identifies that provider. For example, the SQL Server
            provider uses the string "System.Data.SqlCient".
            </param>
            <param name="providerManifestToken">
            A string that identifies that version of the database server being used. For example, the SQL Server
            provider uses the string "2008" for SQL Server 2008. This cannot be null but may be empty.
            The manifest token is sometimes referred to as a version hint.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
            <summary>
            A string that identifies that provider. For example, the SQL Server
            provider uses the string "System.Data.SqlCient".
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
            <summary>
            A string that identifies that version of the database server being used. For example, the SQL Server
            provider uses the string "2008" for SQL Server 2008. This cannot be null but may be empty.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
            <summary>
            Loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
            <summary>
            Returns the query that would be used to load this entity from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
            <returns> A query for the entity. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> object.
            </summary>
            <typeparam name="TEntity"> The type of entity on which the member is declared. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <returns> The equivalent generic object. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
            <summary>
            Gets the property name.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
            <summary>
            Gets or sets a value indicating whether the entity has been loaded from the database.
            </summary>
            <remarks>
            Loading the related entity from the database either using lazy-loading, as part of a query, or explicitly
            with one of the Load methods will set the IsLoaded flag to true.
            IsLoaded can be explicitly set to true to prevent the related entity from being lazy-loaded.
            Note that explict loading using one of the Load methods will load the related entity from the database
            regardless of whether or not IsLoaded is true.
            When a related entity is detached the IsLoaded flag is reset to false indicating that the related entity is
            no longer loaded.
            </remarks>
            <value>
            <c>true</c> if the entity is loaded or the IsLoaded has been explicitly set to true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this navigation property belongs.
            </summary>
            <value> An entry for the entity that owns this navigation property. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
            <summary>
            Instances of this class are returned from the Reference method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow operations such as loading to
            be performed on the an entity's reference navigation properties.
            </summary>
            <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
            <typeparam name="TProperty"> The type of the property. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
            <summary>
            Loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
            <summary>
            Returns the query that would be used to load this entity from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
            <returns> A query for the entity. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> class for
            the navigation property represented by this object.
            </summary>
            <param name="entry">The object representing the navigation property.</param>
            <returns> A non-generic version. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
            <summary>
            Gets the property name.
            </summary>
            <value> The property name. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value> The current value. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
            <summary>
            Gets or sets a value indicating whether the entity has been loaded from the database.
            </summary>
            <remarks>
            Loading the related entity from the database either using lazy-loading, as part of a query, or explicitly
            with one of the Load methods will set the IsLoaded flag to true.
            IsLoaded can be explicitly set to true to prevent the related entity from being lazy-loaded.
            Note that explict loading using one of the Load methods will load the related entity from the database
            regardless of whether or not IsLoaded is true.
            When a related entity is detached the IsLoaded flag is reset to false indicating that the related entity is
            no longer loaded.
            </remarks>
            <value>
            <c>true</c> if the entity is loaded or the IsLoaded has been explicitly set to true; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this navigation property belongs.
            </summary>
            <value> An entry for the entity that owns this navigation property. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
            <summary>
            Exception thrown by <see cref="T:System.Data.Entity.DbContext"/> when it was expected that SaveChanges for an entity would
            result in a database update but in fact no rows in the database were affected.  This usually indicates
            that the database has been concurrently updated such that a concurrency token that was expected to match
            did not actually match.
            Note that state entries referenced by this exception are not serialized due to security and accesses to
            the state entries after serialization will return null.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
            <summary>
            Exception thrown by <see cref="T:System.Data.Entity.DbContext"/> when the saving of changes to the database fails.
            Note that state entries referenced by this exception are not serialized due to security and accesses to the
            state entries after serialization will return null.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message"> The message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
            <summary>
            Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects that represents the entities that could not
            be saved to the database.
            </summary>
            <returns> The entries representing the entities that could not be saved. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message"> The message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
            <summary>
            Represents an entity used to store metadata about an EDM in the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
            <summary>
            Attempts to get the model hash calculated by Code First for the given context.
            This method will return null if the context is not being used in Code First mode.
            </summary>
            <param name="context"> The context. </param>
            <returns> The hash string. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
            <summary>
            Gets or sets the ID of the metadata entity, which is currently always 1.
            </summary>
            <value> The id. </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
            <summary>
            Gets or sets the model hash which is used to check whether the model has
            changed since the database was created from it.
            </summary>
            <value> The model hash. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
            <summary>
            Contains methods used to access the Entity Data Model created by Code First in the EDMX form.
            These methods are typically used for debugging when there is a need to look at the model that
            Code First creates internally.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
            <summary>
            Uses Code First with the given context and writes the resulting Entity Data Model to the given
            writer in EDMX form.  This method can only be used with context instances that use Code First
            and create the model internally.  The method cannot be used for contexts created using Database
            First or Model First, for contexts created using a pre-existing <see cref="T:System.Data.Entity.Core.Objects.ObjectContext"/>, or
            for contexts created using a pre-existing <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel"/>.
            </summary>
            <param name="context"> The context. </param>
            <param name="writer"> The writer. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
            <summary>
            Writes the Entity Data Model represented by the given <see cref="T:System.Data.Entity.Infrastructure.DbModel"/> to the
            given writer in EDMX form.
            </summary>
            <param name="model"> An object representing the EDM. </param>
            <param name="writer"> The writer. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
            <summary>
            A factory for creating derived <see cref="T:System.Data.Entity.DbContext"/> instances. Implement this
            interface to enable design-time services for context types that do not have a
            public default constructor.
            At design-time, derived <see cref="T:System.Data.Entity.DbContext"/> instances can be created in order to enable specific
            design-time experiences such as model rendering, DDL generation etc. To enable design-time instantiation
            for derived <see cref="T:System.Data.Entity.DbContext"/> types that do not have a public, default constructor, implement
            this interface. Design-time services will auto-discover implementations of this interface that are in the
            same assembly as the derived <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
            <summary>
            Creates a new instance of a derived <see cref="T:System.Data.Entity.DbContext"/> type.
            </summary>
            <returns> An instance of TContext </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
            <summary>
            This <see cref="T:System.Data.Entity.DbModelBuilder"/> convention causes DbModelBuilder to include metadata about the model
            when it builds the model. When <see cref="T:System.Data.Entity.DbContext"/> creates a model by convention it will
            add this convention to the list of those used by the DbModelBuilder.  This will then result in
            model metadata being written to the database if the DbContext is used to create the database.
            This can then be used as a quick check to see if the model has changed since the last time it was
            used against the database.
            This convention can be removed from the <see cref="T:System.Data.Entity.DbModelBuilder"/> conventions by overriding
            the OnModelCreating method on a derived DbContext class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
            <summary>
            This <see cref="T:System.Data.Entity.DbModelBuilder"/> convention uses the name of the derived
            <see cref="T:System.Data.Entity.DbContext"/> class as the container for the conceptual model built by
            Code First.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Applies the convention to the given model.
            </summary>
            <param name="item"> The container to apply the convention to. </param>
            <param name="model"> The model. </param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
            <summary>
            This <see cref="T:System.Data.Entity.DbModelBuilder"/> convention uses the namespace of the derived
            <see cref="T:System.Data.Entity.DbContext"/> class as the namespace of the conceptual model built by
            Code First.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
            <summary>
            Instances of this class are used internally to create constant expressions for <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1"/>
            that are inserted into the expression tree to  replace references to <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/>
            and <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
            <typeparam name="TElement"> The type of the element. </typeparam>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
            <summary>
            The public property expected in the LINQ expression tree.
            </summary>
            <value> The query. </value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server Compact Edition based on a given database name or connection string.
            </summary>
            <remarks>
            It is necessary to provide the provider invariant name of the SQL Server Compact
            Edition to use when creating an instance of this class.  This is because different
            versions of SQL Server Compact Editions use different invariant names.
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database"/> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use SQL Server Compact Edition by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new connection factory with empty (default) DatabaseDirectory and BaseConnectionString
            properties.
            </summary>
            <param name="providerInvariantName"> The provider invariant name that specifies the version of SQL Server Compact Edition that should be used. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new connection factory with the given DatabaseDirectory and BaseConnectionString properties.
            </summary>
            <param name="providerInvariantName"> The provider invariant name that specifies the version of SQL Server Compact Edition that should be used. </param>
            <param name="databaseDirectory"> The path to prepend to the database name that will form the file name used by SQL Server Compact Edition when it creates or reads the database file. An empty string means that SQL Server Compact Edition will use its default for the database file location. </param>
            <param name="baseConnectionString"> The connection string to use for options to the database other than the 'Data Source'. The Data Source will be prepended to this string based on the database name when CreateConnection is called. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server Compact Edition based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString"> The database name or connection string. </param>
            <returns> An initialized DbConnection. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
            <summary>
            The path to prepend to the database name that will form the file name used by
            SQL Server Compact Edition when it creates or reads the database file.
            The default value is "|DataDirectory|", which means the file will be placed
            in the designated data directory.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Data Source'.
            The Data Source will be prepended to this string based on the database name when
            CreateConnection is called.
            The default is the empty string, which means no other options will be used.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
            <summary>
            The provider invariant name that specifies the version of SQL Server Compact Edition
            that should be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server based on a given database name or connection string. By default, the connection is
            made to '.\SQLEXPRESS'.  This can be changed by changing the base connection
            string when constructing a factory instance.
            </summary>
            <remarks>
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database"/> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use SQL Server by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
            <summary>
            Creates a new connection factory with a default BaseConnectionString property of
            'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;'.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new connection factory with the given BaseConnectionString property.
            </summary>
            <param name="baseConnectionString"> The connection string to use for options to the database other than the 'Initial Catalog'. The 'Initial Catalog' will be prepended to this string based on the database name when CreateConnection is called. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString"> The database name or connection string. </param>
            <returns> An initialized DbConnection. </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Initial Catalog'.
            The 'Initial Catalog' will  be prepended to this string based on the database name when
            CreateConnection is called.
            The default is 'Data Source=.\SQLEXPRESS; Integrated Security=True;'.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
            <summary>
            This attribute can be applied to either an entire derived <see cref="T:System.Data.Entity.DbContext"/> class or to
            individual <see cref="T:System.Data.Entity.DbSet`1"/> or <see cref="T:System.Data.Entity.IDbSet`1"/> properties on that class.  When applied
            any discovered <see cref="T:System.Data.Entity.DbSet`1"/> or <see cref="T:System.Data.Entity.IDbSet`1"/> properties will still be included
            in the model but will not be automatically initialized.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
            <summary>
            Thrown when a context is generated from the <see cref="T:System.Data.Entity.DbContext"/> templates in Database First or Model
            First mode and is then used in Code First mode.
            </summary>
            <remarks>
            Code generated using the T4 templates provided for Database First and Model First use may not work
            correctly if used in Code First mode. To use these classes with Code First please add any additional
            configuration using attributes or the DbModelBuilder API and then remove the code that throws this
            exception.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
            <param name="info"> The object that holds the serialized object data. </param>
            <param name="context"> The contextual information about the source or destination. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException"/> class.
            </summary>
            <param name="message"> The message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
            <summary>
            Allows configuration to be performed for an complex type in a model.
            A ComplexTypeConfiguration can be obtained via the ComplexType method on
            <see cref="T:System.Data.Entity.DbModelBuilder"/> or a custom type derived from ComplexTypeConfiguration
            can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TComplexType"> The complex type to be configured. </typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
            <summary>
            Allows configuration to be performed for a type in a model.
            </summary>
            <typeparam name="TStructuralType"> The type to be configured. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures a <see cref="T:System.struct" /> property that is defined on this type.
            </summary>
            <typeparam name="T"> The type of the property being configured. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Configures a <see cref="T:System.struct?" /> property that is defined on this type.
            </summary>
            <typeparam name="T"> The type of the property being configured. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
            <summary>
            Configures a <see cref="T:DbGeometry" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
            <summary>
            Configures a <see cref="T:DbGeography" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Configures a <see cref="T:System.string" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
            <summary>
            Configures a <see cref="T:System.byte[]" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Configures a <see cref="T:System.decimal" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Configures a <see cref="T:System.decimal?" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Configures a <see cref="T:System.DateTime" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Configures a <see cref="T:System.DateTime?" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
            <summary>
            Configures a <see cref="T:System.DateTimeOffset" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
            <summary>
            Configures a <see cref="T:System.DateTimeOffset?" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
            <summary>
            Configures a <see cref="T:System.TimeSpan" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
            <summary>
            Configures a <see cref="T:System.TimeSpan?" /> property that is defined on this type.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
            <summary>
            Initializes a new instance of ComplexTypeConfiguration
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <typeparam name="TProperty"> The type of the property to be ignored. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> The same ComplexTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
            <summary>
            Allows derived configuration classes for entities and complex types to be registered with a
            <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <remarks>
            Derived configuration classes are created by deriving from <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/>
            or <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> and using a type to be included in the model as the generic
            parameter.
            Configuration can be performed without creating derived configuration classes via the Entity and ComplexType
            methods on <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
            <summary>
            Discovers all types that inherit from <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/> or
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> in the given assembly and adds an instance
            of each discovered type to this registrar.
            </summary>
            <remarks>
            Note that only types that are abstract or generic type definitions are skipped. Every
            type that is discovered and added must provide a parameterless constructor.
            </remarks>
            <param name="assembly">The assembly containing model configurations to add.</param>
            <returns>The same ConfigurationRegistrar instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
            <summary>
            Adds an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/> to the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            Only one <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration"/> can be added for each type in a model.
            </summary>
            <typeparam name="TEntityType"> The entity type being configured. </typeparam>
            <param name="entityTypeConfiguration"> The entity type configuration to be added. </param>
            <returns> The same ConfigurationRegistrar instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
            <summary>
            Adds an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> to the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            Only one <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration"/> can be added for each type in a model.
            </summary>
            <typeparam name="TComplexType"> The complex type being configured. </typeparam>
            <param name="complexTypeConfiguration"> The complex type configuration to be added </param>
            <returns> The same ConfigurationRegistrar instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
            <summary>
                Allows the conventions used by a <see cref="T:System.Data.Entity.DbModelBuilder"/> instance to be customized.
                The default conventions can be found in the System.Data.Entity.ModelConfiguration.Conventions namespace.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
            <summary>
                Discover all conventions in the given assembly and add them to the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <remarks>
                This method add all conventions ordered by type name. The order in which conventions are added
                can have an impact on how they behave because it governs the order in which they are run.
                All conventions found must have a parameterless public constructor.
            </remarks>
            <param name="assembly">The assembly containing conventions to be added.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
            <summary>
                Enables one or more conventions for the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <param name="conventions"> The conventions to be enabled. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
            <summary>
                Enables a convention for the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TConvention"> The type of the convention to be enabled. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
            <summary>
                Enables a convention for the <see cref="T:System.Data.Entity.DbModelBuilder"/>. This convention
                will run after the one specified.
            </summary>
            <typeparam name="TExistingConvention"> The type of the convention after which the enabled one will run. </typeparam>
            <param name="newConvention"> The convention to enable. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
            <summary>
                Enables a configuration convention for the <see cref="T:System.Data.Entity.DbModelBuilder"/>. This convention
                will run before the one specified.
            </summary>
            <typeparam name="TExistingConvention"> The type of the convention before which the enabled one will run. </typeparam>
            <param name="newConvention"> The convention to enable. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
            <summary>
                Disables one or more conventions for the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <param name="conventions"> The conventions to be disabled. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
            <summary>
                Disables a convention for the <see cref="T:System.Data.Entity.DbModelBuilder"/>.
                The default conventions that are available for removal can be found in the
                System.Data.Entity.ModelConfiguration.Conventions namespace.
            </summary>
            <typeparam name="TConvention"> The type of the convention to be disabled. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
            <summary>
                Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
            <summary>
            Configures the table and column mapping for an entity type or a sub-set of properties from an entity type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TEntityType"> The entity type to be mapped. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> class.</summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the properties that will be included in this mapping fragment.
            If this method is not called then all properties that have not yet been
            included in a mapping fragment will be configured.
            </summary>
            <typeparam name="TObject"> An anonymous type including the properties to be mapped. </typeparam>
            <param name="propertiesExpression"> A lambda expression to an anonymous type that contains the properties to be mapped. C#: t => new { t.Id, t.Property1, t.Property2 } VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 } </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures a <see cref="T:System.struct" /> property that is included in this mapping fragment.
            </summary>
            <typeparam name="T"> The type of the property being configured. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Configures a <see cref="T:System.struct?" /> property that is included in this mapping fragment.
            </summary>
            <typeparam name="T"> The type of the property being configured. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
            <summary>
            Configures a <see cref="T:DbGeometry" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
            <summary>
            Configures a <see cref="T:DbGeography" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Configures a <see cref="T:System.string" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
            <summary>
            Configures a <see cref="T:System.byte[]" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Configures a <see cref="T:System.decimal" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Configures a <see cref="T:System.decimal?" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Configures a <see cref="T:System.DateTime" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Configures a <see cref="T:System.DateTime?" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
            <summary>
            Configures a <see cref="T:System.DateTimeOffset" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
            <summary>
            Configures a <see cref="T:System.DateTimeOffset?" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
            <summary>
            Configures a <see cref="T:System.TimeSpan" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
            <summary>
            Configures a <see cref="T:System.TimeSpan?" /> property that is included in this mapping fragment.
            </summary>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to configure the property. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
            <summary>
            Re-maps all properties inherited from base types.
            When configuring a derived type to be mapped to a separate table this will cause all properties to
            be included in the table rather than just the non-inherited properties. This is known as
            Table per Concrete Type (TPC) mapping.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
            <summary>
            Configures the table name to be mapped to.
            </summary>
            <param name="tableName"> Name of the table. </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
            <summary>
            Configures the table name and schema to be mapped to.
            </summary>
            <param name="tableName"> Name of the table. </param>
            <param name="schemaName"> Schema of the table. </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
            <summary>
            Configures the discriminator column used to differentiate between types in an inheritance hierarchy.
            </summary>
            <param name="discriminator"> The name of the discriminator column. </param>
            <returns> A configuration object to further configure the discriminator column and values. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the discriminator condition used to differentiate between types in an inheritance hierarchy.
            </summary>
            <typeparam name="TProperty"> The type of the property being used to discriminate between types. </typeparam>
            <param name="property"> A lambda expression representing the property being used to discriminate between types. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object to further configure the discriminator condition. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
            <summary>
            Used to configure a column with length facets for an entity type or complex type. This configuration functionality is exposed by the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>. 
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
            <summary>
            Configures a primitive column from an entity type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
            <summary>Configures the primitive column to be optional.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
            <summary>Configures the primitive column to be required.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
            <summary>Configures the data type of the primitive column used to store the property.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
            <param name="columnType">The name of the database provider specific data type.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>Configures the order of the primitive column used to store the property. This method is also used to specify key ordering when an entity type has a composite key.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
            <param name="columnOrder">The order that this column should appear in the database table.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
            <summary>Configures the column to allow the maximum length supported by the database provider.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>Configures the column to have the specified maximum length.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
            <param name="value">The maximum length for the column. Setting the value to null will remove any maximum length restriction from the column and a default length will be used for the database column.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
            <summary>Configures the column to be fixed length.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
            <summary>Configures the column to be variable length.</summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
            <summary>
            Configures a condition used to discriminate between types in an inheritance hierarchy based on the values assigned to a property.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
            <summary>
            Configures the condition to require a value in the property.
            Rows that do not have a value assigned to column that this property is stored in are
            assumed to be of the base type of this entity type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
            <summary>
            Configures a database column used to store a string values.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
            <summary>
            Configures the column to allow the maximum length supported by the database provider.
            </summary>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
            Configures the property to have the specified maximum length.
            </summary>
            <param name="value">
            The maximum length for the property. Setting 'null' will result in a default length being used for the column.
            </param>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
            <summary>
            Configures the column to be fixed length.
            Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
            <summary>
            Configures the column to be variable length.
            Columns are variable length by default.
            </summary>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
            <summary>
            Configures the column to be optional.
            </summary>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
            <summary>
            Configures the column to be required.
            </summary>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
            Configures the order of the database column.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
            <summary>
            Configures the column to support Unicode string content.
            </summary>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the column supports Unicode string content.
            </summary>
            <param name="unicode"> Value indicating if the column supports Unicode string content or not. Specifying 'null' will remove the Unicode facet from the column. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same StringColumnConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
            <summary>
            Configures a discriminator column used to differentiate between types in an inheritance hierarchy.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
            <summary>
            Configures the discriminator value used to identify the entity type being
            configured from other types in the inheritance hierarchy.
            </summary>
            <typeparam name="T"> Type of the discriminator value. </typeparam>
            <param name="value"> The value to be used to identify the entity type. </param>
            <returns> A configuration object to configure the column used to store discriminator values. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
            <summary>
            Configures the discriminator value used to identify the entity type being
            configured from other types in the inheritance hierarchy.
            </summary>
            <typeparam name="T"> Type of the discriminator value. </typeparam>
            <param name="value"> The value to be used to identify the entity type. </param>
            <returns> A configuration object to configure the column used to store discriminator values. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
            <summary>
            Configures the discriminator value used to identify the entity type being
            configured from other types in the inheritance hierarchy.
            </summary>
            <param name="value"> The value to be used to identify the entity type. </param>
            <returns> A configuration object to configure the column used to store discriminator values. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
            <summary>
            Configures a many relationship from an entity type.
            </summary>
            <typeparam name="TEntityType"> The entity type that the relationship originates from. </typeparam>
            <typeparam name="TTargetEntityType"> The entity type that the relationship targets. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
            <summary>
            Configures the relationship to be many:many with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
            <summary>
            Configures the relationship to be many:many without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be many:required with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
            <summary>
            Configures the relationship to be many:required without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be many:optional with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
            <summary>
            Configures the relationship to be many:optional without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
            <summary>
            Configures an optional relationship from an entity type.
            </summary>
            <typeparam name="TEntityType"> The entity type that the relationship originates from. </typeparam>
            <typeparam name="TTargetEntityType"> The entity type that the relationship targets. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
            <summary>
            Configures the relationship to be optional:many with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
            <summary>
            Configures the relationship to be optional:many without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be optional:required with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
            <summary>
            Configures the relationship to be optional:required without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be optional:optional with a navigation property on the other side of the relationship.
            The entity type being configured will be the dependent and contain a foreign key to the principal.
            The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
            <summary>
            Configures the relationship to be optional:optional without a navigation property on the other side of the relationship.
            The entity type being configured will be the dependent and contain a foreign key to the principal.
            The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be optional:optional with a navigation property on the other side of the relationship.
            The entity type being configured will be the principal in the relationship.
            The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property on the other end of the relationship. </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
            <summary>
            Configures the relationship to be optional:optional without a navigation property on the other side of the relationship.
            The entity type being configured will be the principal in the relationship.
            The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
            <summary>
            Configures an required relationship from an entity type.
            </summary>
            <typeparam name="TEntityType"> The entity type that the relationship originates from. </typeparam>
            <typeparam name="TTargetEntityType"> The entity type that the relationship targets. </typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
            <summary>
            Configures the relationship to be required:many with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
            <summary>
            Configures the relationship to be required:many without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be required:optional with a navigation property on the other side of the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
            <summary>
            Configures the relationship to be required:optional without a navigation property on the other side of the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be required:required with a navigation property on the other side of the relationship.
            The entity type being configured will be the dependent and contain a foreign key to the principal.
            The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
            <summary>
            Configures the relationship to be required:required without a navigation property on the other side of the relationship.
            The entity type being configured will be the dependent and contain a foreign key to the principal.
            The entity type that the relationship targets will be the principal in the relationship.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            Configures the relationship to be required:required with a navigation property on the other side of the relationship.
            The entity type being configured will be the principal in the relationship.
            The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <param name="navigationPropertyExpression"> An lambda expression representing the navigation property on the other end of the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
            <summary>
            Configures the relationship to be required:required without a navigation property on the other side of the relationship.
            The entity type being configured will be the principal in the relationship.
            The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
            <summary>
            Base class for performing configuration of a relationship.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
            <summary>
            Configures a relationship that can support cascade on delete functionality.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
            <summary>
            Configures cascade delete to be on for the relationship.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
            <summary>
            Configures whether or not cascade delete is on for the relationship.
            </summary>
            <param name="value"> Value indicating if cascade delete is on or not. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
            <summary>
            Configures a relationship that can support foreign key properties that are exposed in the object model.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TDependentEntityType"> The dependent entity type. </typeparam>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
            <summary>
            Configures a relationship that can only support foreign key properties that are not exposed in the object model.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
            <summary>
            Configures the relationship to use foreign key property(s) that are not exposed in the object model.
            The column(s) and table can be customized by specifying a configuration action.
            If an empty configuration action is specified then column name(s) will be generated by convention.
            If foreign key properties are exposed in the object model then use the HasForeignKey method.
            Not all relationships support exposing foreign key properties in the object model.
            </summary>
            <param name="configurationAction"> Action that configures the foreign key column(s) and table. </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the relationship to use foreign key property(s) that are exposed in the object model.
            If the foreign key property(s) are not exposed in the object model then use the Map method.
            </summary>
            <typeparam name="TKey"> The type of the key. </typeparam>
            <param name="foreignKeyExpression"> A lambda expression representing the property to be used as the foreign key. If the foreign key is made up of multiple properties then specify an anonymous type including the properties. When using multiple foreign key properties, the properties must be specified in the same order that the the primary key properties were configured for the principal entity type. </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
            <summary>
            Configures the table and column mapping of a relationship that does not expose foreign key properties in the object model.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
            <summary>
            Configures the name of the column(s) for the foreign key.
            </summary>
            <param name="keyColumnNames"> The foreign key column names. When using multiple foreign key properties, the properties must be specified in the same order that the the primary key properties were configured for the target entity type. </param>
            <returns> The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
            <summary>
            Sets an annotation in the model for a database column that has been configured with <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])"/>.
            The annotation value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="keyColumnName">The name of the column that was configured with the HasKey method.</param>
            <param name="annotationName">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
            <summary>
            Configures the table name that the foreign key column(s) reside in.
            The table that is specified must already be mapped for the entity type.
            If you want the foreign key(s) to reside in their own table then use the Map method
            on <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> to perform
            entity splitting to create the table with just the primary key property. Foreign keys can
            then be added to the table via this method.
            </summary>
            <param name="tableName"> Name of the table. </param>
            <returns> The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
            <summary>
            Configures the table name and schema that the foreign key column(s) reside in.
            The table that is specified must already be mapped for the entity type.
            If you want the foreign key(s) to reside in their own table then use the Map method
            on <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> to perform
            entity splitting to create the table with just the primary key property. Foreign keys can
            then be added to the table via this method.
            </summary>
            <param name="tableName"> Name of the table. </param>
            <param name="schemaName"> Schema of the table. </param>
            <returns> The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
            <summary>
            Configures the table and column mapping of a many:many relationship.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
            <summary>
            Configures the join table name for the relationship.
            </summary>
            <param name="tableName"> Name of the table. </param>
            <returns> The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
            <summary>
            Configures the join table name and schema for the relationship.
            </summary>
            <param name="tableName"> Name of the table. </param>
            <param name="schemaName"> Schema of the table. </param>
            <returns> The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the join table. The annotation value can later be used when
            processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
            <summary>
            Configures the name of the column(s) for the left foreign key.
            The left foreign key points to the parent entity of the navigation property specified in the HasMany call.
            </summary>
            <param name="keyColumnNames"> The foreign key column names. When using multiple foreign key properties, the properties must be specified in the same order that the the primary key properties were configured for the target entity type. </param>
            <returns> The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
            <summary>
            Configures the name of the column(s) for the right foreign key.
            The right foreign key points to the parent entity of the the navigation property specified in the WithMany call.
            </summary>
            <param name="keyColumnNames"> The foreign key column names. When using multiple foreign key properties, the properties must be specified in the same order that the the primary key properties were configured for the target entity type. </param>
            <returns> The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
            <summary>
            Configures a many:many relationship.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TEntityType">The type of the parent entity of the navigation property specified in the HasMany call.</typeparam>
            <typeparam name="TTargetEntityType">The type of the parent entity of the navigation property specified in the WithMany call.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
            <summary>
            Configures the foreign key column(s) and table used to store the relationship.
            </summary>
            <param name="configurationAction"> Action that configures the foreign key column(s) and table. </param>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
            <summary>
            Configures stored procedures to be used for modifying this relationship.
            The default conventions for procedure and parameter names will be used.
            </summary>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
            <summary> 
            Configures stored procedures to be used for modifying this relationship. 
            </summary>
            <param name="modificationStoredProcedureMappingConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
            <returns>The same <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
            <summary>
            Used to configure a <see cref="T:System.byte[]"/> property of an entity type or complex type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
            <summary>
            Used to configure a property with length facets for an entity type or complex type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
            <summary>
            Used to configure a primitive property of an entity type or complex type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
            <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            </summary>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
            <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            </summary>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
            Configures how values for the property are generated by the database.
            </summary>
            <param name="databaseGeneratedOption">
            The pattern used to generate values for the property in the database.
            Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
            on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
            set of conventions are being used.
            </param>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
            <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column used to store the property.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
            <summary>
            Configures the name of the parameter used in stored procedures for this property.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns> The same PrimitivePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
            <summary>
            Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns> The same LengthPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
            Configures the property to have the specified maximum length.
            </summary>
            <param name="value"> The maximum length for the property. Setting 'null' will remove any maximum length restriction from the property and a default length will be used for the database column. </param>
            <returns> The same LengthPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
            <summary>
            Configures the property to be fixed length.
            Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns> The same LengthPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
            <summary>
            Configures the property to be variable length.
            Properties are variable length by default.
            </summary>
            <returns> The same LengthPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
            <summary>
            Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
            Configures the property to have the specified maximum length.
            </summary>
            <param name="value"> The maximum length for the property. Setting 'null' will remove any maximum length restriction from the property. </param>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
            <summary>
            Configures the property to be fixed length.
            Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
            <summary>
            Configures the property to be variable length.
            <see cref="T:System.byte[]" /> properties are variable length by default.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
            <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            <see cref="T:System.byte[]" /> properties are optional by default.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
            <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
            Configures how values for the property are generated by the database.
            </summary>
            <param name="databaseGeneratedOption">
            The pattern used to generate values for the property in the database.
            Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
            on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
            set of conventions are being used.
            </param>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
            <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column used to store the property.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
            <summary>
            Configures the property to be a row version in the database.
            The actual data type will vary depending on the database provider being used.
            Setting the property to be a row version will automatically configure it to be an
            optimistic concurrency token.
            </summary>
            <returns> The same BinaryPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
            <summary>
            Used to configure a <see cref="T:System.DateTime"/> property of an entity type or complex type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
            <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            </summary>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
            <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            <see cref="T:System.DateTime" /> properties are required by default.
            </summary>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
            Configures how values for the property are generated by the database.
            </summary>
            <param name="databaseGeneratedOption">
            The pattern used to generate values for the property in the database.
            Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
            on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
            set of conventions are being used.
            </param>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
            <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column used to store the property.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
            <summary>
            Configures the precision of the property.
            If the database provider does not support precision for the data type of the column then the value is ignored.
            </summary>
            <param name="value"> Precision of the property. </param>
            <returns> The same DateTimePropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
            <summary>
            Used to configure a <see cref="T:System.decimal"/> property of an entity type or complex type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
            <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            </summary>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
            <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            <see cref="T:System.decimal" /> properties are required by default.
            </summary>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
            Configures how values for the property are generated by the database.
            </summary>
            <param name="databaseGeneratedOption">
            The pattern used to generate values for the property in the database.
            Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
            on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
            set of conventions are being used.
            </param>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
            <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column used to store the property.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
            <summary>
            Configures the precision and scale of the property.
            </summary>
            <param name="precision"> The precision of the property. </param>
            <param name="scale"> The scale of the property. </param>
            <returns> The same DecimalPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
            <summary>
            Used to configure a <see cref="T:System.string"/> property of an entity type or complex type.
            This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
            <summary>
            Configures the property to allow the maximum length supported by the database provider.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
            <summary>
            Configures the property to have the specified maximum length.
            </summary>
            <param name="value"> The maximum length for the property. Setting 'null' will remove any maximum length restriction from the property and a default length will be used for the database column.. </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
            <summary>
            Configures the property to be fixed length.
            Use HasMaxLength to set the length that the property is fixed to.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
            <summary>
            Configures the property to be variable length.
            <see cref="T:System.string" /> properties are variable length by default.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
            <summary>
            Configures the property to be optional.
            The database column used to store this property will be nullable.
            <see cref="T:System.string" /> properties are optional by default.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
            <summary>
            Configures the property to be required.
            The database column used to store this property will be non-nullable.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
            <summary>
            Configures how values for the property are generated by the database.
            </summary>
            <param name="databaseGeneratedOption">
            The pattern used to generate values for the property in the database.
            Setting 'null' will cause the default option to be used, which may be 'None', 'Identity', or 'Computed' depending
            on the type of the property, its semantics in the model (e.g. primary keys are treated differently), and which
            set of conventions are being used.
            </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
            <summary>
            Configures the property to be used as an optimistic concurrency token.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
            <param name="concurrencyToken"> Value indicating if the property is a concurrency token or not. Specifying 'null' will remove the concurrency token facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
            <summary>
            Configures the name of the database column used to store the property.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the database column used to store the property. The annotation
            value can later be used when processing the column such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
            <summary>
            Configures the data type of the database column used to store the property.
            </summary>
            <param name="columnType"> Name of the database provider specific data type. </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
            <summary>
            Configures the order of the database column used to store the property.
            This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
            <param name="columnOrder"> The order that this column should appear in the database table. </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
            <summary>
            Configures the property to support Unicode string content.
            </summary>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
            <summary>
            Configures whether or not the property supports Unicode string content.
            </summary>
            <param name="unicode"> Value indicating if the property supports Unicode string content or not. Specifying 'null' will remove the Unicode facet from the property. Specifying 'null' will cause the same runtime behavior as specifying 'false'. </param>
            <returns> The same StringPropertyConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> found on properties in the model
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/> found on foreign key properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> found on navigation properties in the model.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> found on primitive properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute"/> found on properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute"/> found on types in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute"/> found on types in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/> found on types in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
            <summary>
            Convention to detect navigation properties to be inverses of each other when only one pair
            of navigation properties exists between the related types.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
            <summary>
            Convention to configure a type as a complex type if it has no primary key, no mapped base type and no navigation properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
            <summary>
            Convention to add a cascade delete to the join table from both tables involved in a many to many relationship.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
            <summary>
            Convention to ensure an invalid/unsupported mapping is not created when mapping inherited properties
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
            <summary>
            Convention to set the table name to be a pluralized version of the entity type name.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
            <summary>
            Convention to set precision to 18 and scale to 2 for decimal properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention"/> with the default precision and scale.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention"/> with the specified precision and scale.
            </summary>
            <param name="precision"> Precision </param>
            <param name="scale"> Scale </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
            <summary>
            Convention to move primary key properties to appear first.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
            <summary>
            Convention to distinguish between optional and required relationships based on CLR nullability of the foreign key property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
            <summary>
            Base class for conventions that discover foreign key properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <summary>
            When overriden returns <c>true</c> if <paramref name="dependentProperty"/> should be part of the foreign key.
            </summary>
            <param name="associationType"> The association type being configured. </param>
            <param name="dependentAssociationEnd"> The dependent end. </param>
            <param name="dependentProperty"> The candidate property on the dependent end. </param>
            <param name="principalEntityType"> The principal end entity type. </param>
            <param name="principalKeyProperty"> A key property on the principal end that is a candidate target for the foreign key. </param>
            <returns>true if dependentProperty should be a part of the foreign key; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
            <summary>
            Returns <c>true</c> if the convention supports pairs of entity types that have multiple associations defined between them.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
            <summary>
            Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute"/> found on navigation properties in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
            <summary>
            Convention to detect primary key properties.
            Recognized naming patterns in order of precedence are:
            1. 'Id'
            2. [type name]Id
            Primary key detection is case insensitive.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
            <summary>
            Base class for conventions that discover primary key properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
            <summary>
            When overriden returns the subset of properties that will be part of the primary key.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="primitiveProperties"> The primitive types of the entities</param>
            <returns> The properties that should be part of the primary key. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
            <summary>
            Convention to discover foreign key properties whose names are a combination
            of the dependent navigation property name and the principal type primary key property name(s).
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <inheritdoc/>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
            <summary>
            Convention to enable cascade delete for any required relationships.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
            <summary>
            Convention to configure the primary key(s) of the dependent entity type as foreign key(s) in a one:one relationship.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
            <summary>
            Convention to set the entity set name to be a pluralized version of the entity type name.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
            <summary>
            Convention to discover foreign key properties whose names match the principal type primary key property name(s).
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
            <summary>
            Convention to set a maximum length for properties whose type supports length facets. The default value is 128.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention"/> with the default length.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention"/> with the specified length.
            </summary>
            <param name="length">The maximum lenght of properties.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
            <summary>
            Convention to set a default maximum length of 4000 for properties whose type supports length facets when SqlCe is the provider.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention"/> with the default length.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention"/> with the specified length.
            </summary>
            <param name="length">The default maximum length for properties.</param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
            <summary>
            Convention to configure integer primary keys to be identity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
            <summary>
            Convention to discover foreign key properties whose names are a combination
            of the principal type name and the principal type primary key property name(s).
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
            <inheritdoc/>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
            <summary>
            Allows configuration to be performed for an entity type in a model.
            An EntityTypeConfiguration can be obtained via the Entity method on
            <see cref="T:System.Data.Entity.DbModelBuilder"/> or a custom type derived from EntityTypeConfiguration
            can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder"/>.
            </summary>
            <typeparam name="TEntityType">The entity type being configured.</typeparam>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
            <summary>
            Initializes a new instance of EntityTypeConfiguration
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
            <typeparam name="TKey"> The type of the key. </typeparam>
            <param name="keyExpression"> A lambda expression representing the property to be used as the primary key. C#: t => t.Id VB.Net: Function(t) t.Id If the primary key is made up of multiple properties then specify an anonymous type including the properties. C#: t => new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
            <summary>
            Configures the entity set name to be used for this entity type.
            The entity set name can only be configured for the base type in each set.
            </summary>
            <param name="entitySetName"> The name of the entity set. </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
            <typeparam name="TProperty"> The type of the property to be ignored. </typeparam>
            <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
            <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <param name="schemaName"> The database schema of the table. </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
            <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
            <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
            <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
            <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer"/></param>.
            <returns>The same configuration instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            The default conventions for procedure and parameter names will be used.
            </summary>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
            <summary>
            Configures this type to use stored procedures for insert, update and delete.
            </summary>
            <param name="modificationStoredProcedureMappingConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
            <returns> The same configuration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
            <summary>
            Allows advanced configuration related to how this entity type is mapped to the database schema.
            By default, any configuration will also apply to any type derived from this entity type.
            Derived types can be configured via the overload of Map that configures a derived type or
            by using an EntityTypeConfiguration for the derived type.
            The properties of an entity can be split between multiple tables using multiple Map calls.
            Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
            <param name="entityMappingConfigurationAction">
            An action that performs configuration against an
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1"/>
            .
            </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
            <summary>
            Allows advanced configuration related to how a derived entity type is mapped to the database schema.
            Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
            <typeparam name="TDerived"> The derived entity type to be configured. </typeparam>
            <param name="derivedTypeMapConfigurationAction">
            An action that performs configuration against an
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1"/>
            .
            </param>
            <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures an optional relationship from this entity type.
            Instances of the entity type will be able to be saved to the database without this relationship being specified.
            The foreign key in the database will be nullable.
            </summary>
            <typeparam name="TTargetEntity"> The type of the entity at the other end of the relationship. </typeparam>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures a required relationship from this entity type.
            Instances of the entity type will not be able to be saved to the database unless this relationship is specified.
            The foreign key in the database will be non-nullable.
            </summary>
            <typeparam name="TTargetEntity"> The type of the entity at the other end of the relationship. </typeparam>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
            <summary>
            Configures a many relationship from this entity type.
            </summary>
            <typeparam name="TTargetEntity"> The type of the entity at the other end of the relationship. </typeparam>
            <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t => t.MyProperty VB.Net: Function(t) t.MyProperty </param>
            <returns> A configuration object that can be used to further configure the relationship. </returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
            <summary>
            Exception thrown by <see cref="T:System.Data.Entity.DbModelBuilder"/> during model creation when an invalid model is generated.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
            <summary>
            Initializes a new instance of ModelValidationException
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of ModelValidationException
            </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of ModelValidationException
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> class serialization info and streaming context.</summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
            <summary>
            Exception thrown from <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> when validating entities fails.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
            <summary>
            Initializes a new instance of DbEntityValidationException.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DbEntityValidationException.
            </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
            <summary>
            Initializes a new instance of DbEntityValidationException.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="entityValidationResults"> Validation results. </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DbEntityValidationException.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
            <summary>
            Initializes a new instance of DbEntityValidationException.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="entityValidationResults"> Validation results. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
            <summary>
            Validation results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
            <summary>
            Represents validation results for single entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> class.
            </summary>
            <param name="entry"> Entity entry the results applies to. Never null. </param>
            <param name="validationErrors">
            List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
            <summary>
            Gets an instance of <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> the results applies to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
            <summary>
            Gets validation errors. Never null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
            <summary>
            Gets an indicator if the entity is valid.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
            <summary>
            Exception thrown from <see cref="M:System.Data.Entity.DbContext.GetValidationErrors"/> when an exception is thrown from the validation
            code.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
            <summary>
            Initializes a new instance of DbUnexpectedValidationException.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DbUnexpectedValidationException.
            </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DbUnexpectedValidationException.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of DbUnexpectedValidationException with the specified serialization info and
            context.
            </summary>
            <param name="info"> The serialization info. </param>
            <param name="context"> The streaming context. </param>
        </member>
        <member name="T:System.Data.Entity.Validation.DbValidationError">
            <summary>
            Validation error. Can be either entity or property level validation error.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Validation.DbValidationError"/>.
            </summary>
            <param name="propertyName"> Name of the invalid property. Can be null. </param>
            <param name="errorMessage"> Validation error message. Can be null. </param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
            <summary>
            Gets name of the invalid property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
            <summary>
            Gets validation error message.
            </summary>
        </member>
    </members>
</doc>
