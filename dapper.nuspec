<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata schemaVersion="2">
    <id>Dapper</id>
    <version>1.42</version>
    <title>Dapper dot net</title>
    <authors>Sam Saffron,Marc Gravell</authors>
    <owners>Sam Saffron,Marc Gravell</owners>
    <licenseUrl>http://www.apache.org/licenses/LICENSE-2.0</licenseUrl>
    <projectUrl>https://github.com/StackExchange/dapper-dot-net</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>A high performance Micro-ORM supporting Sql Server, MySQL, Sqlite, SqlCE, Firebird etc..</description>
    <summary>A high performance Micro-ORM</summary>
    <tags>orm sql micro-orm</tags>
    <frameworkAssemblies>
      <frameworkAssembly assemblyName="System.Core"/>
      <frameworkAssembly assemblyName="System"/>
      <frameworkAssembly assemblyName="System.Data"/>
      <frameworkAssembly assemblyName="Microsoft.CSharp" targetFramework=".NETFramework4.0-Client, .NETFramework4.0" />
    </frameworkAssemblies>
    <releaseNotes>
      * 1.40    - workaround for broken GetValues() on Mono; add AsList()
      * 1.39    - fix case on SQL CLR types; grid-reader should respect no-cache flags; make parameter inclusion case-insensitive
      * 1.38    - specify constructor explicitly; allow value-type parameters (albeit: boxed)
      * 1.37    - Reuse StringBuilder instances when possible (list parameters in particular)
      * 1.36    - Fix Issue 192 (expanded parameter naming glitch) and Issue 178 (execute reader now wraps the command/reader pair, to extend the command lifetime;
      *           note that the underlying command/reader are available by casting to IWrappedDataReader)
      * 1.35    - Fix Issue 151 (Execute should work with ExpandoObject etc); Fix Issue 182 (better support for db-type when using `object` values);
      *           output expressions / callbacks in dynamic args (via Derek); arbitrary number of types in multi-mapping (via James Holwell);
      *           fix DbString/Oracle bug (via Mauro Cerutti); new support for **named positional arguments**
      * 1.34    - Support for SqlHierarchyId (core)
      * 1.33    - Support for SqlGeometry (core) and DbGeometry (EF)
      * 1.32    - Support for SqlGeography in core library
      * 1.31    - Fix issue with error message when there is a column/type mismatch
      * 1.30    - Better async cancellation
      * 1.29    - Make underscore name matching optional (opt-in) - this can be a breaking change for some people
      * 1.28    - Much better numeric type conversion; fix for large oracle strings; map Foo_Bar to FooBar (etc); ExecuteScalar added; stability fixes
      * 1.27    - Fixes for type-handler parse; ensure type-handlers get last dibs on configuring parameters
      * 1.26    - New type handler API for extension support
      * 1.25    - Command recycling and disposing during pipelined async multi-exec; enable pipeline (via sync-over-async) for sync API
      * 1.24    - Implement pipelined async multi-exec, when flag is specified (only - requires MARS etc)
      * 1.23    - Improved support for optimize hints (@foo unknown) with list expansions
      * 1.22    - Literal support now extends to enumerable types (for "in" etc usage); move to command-flags model for "buffered" etc
      * 1.21    - Limit literals to numeric types; for enums, use value not name
      * 1.20    - Improved async support in .NET 4.5 (lots of contributions from users here, including JasonPunyon, kwaclaw, tugberkugurlu, and mgravell);
      *          Now supports literal replacement via {=foo}; new ExecuteReader method (via JJoe2); support for ICustomQueryParameter
      *          dictionary members (via Blackjacketmack); culture sensitivity (via tms); fixes for time parameters (via olegKoshmeliuk);
      *          and a range of additional tweaks, twiddles, fixes and improvements.
      * 1.13   - Added support for Table Valued Parameters as part of anonymous objects
      *        - Added support for async
      *        - Added support for sharing strategies between databases
      *        - Rewrote dynamic implementation
      * 1.12.1 - Minor deploy glitch (should now include intellisense files!)
      * 1.12   - Better automatic type-mapping (int vs long, float vs double, etc)
      *          Fixed: bug with indexer properties
      * 1.11   - Custom type-map support
      * 1.10   - Fixed: error-handling could lose original exception if reader closed
      * 1.9    - Added: better schema change detection
      *          Fixed: enum support for T in Query-of-T
      *          Added: dictionary support for parameters
      * 1.8    - Started release notes
      *          Important: Dapper is now shipping as a DLL which will work on .net 3.5 or .net 4.0,
      *          This improves the debugging experience as you no longer break into dapper when SQL fails.
      *          Added: ParameterNames on DynamicParameters
    </releaseNotes>
  </metadata>
  <files>
    <file src="Dapper NET45\bin\Release\Dapper.dll" target="lib\net45" />
    <file src="Dapper NET45\bin\Release\Dapper.pdb" target="lib\net45" />
    <file src="Dapper NET45\bin\Release\Dapper.xml" target="lib\net45" />
    
    <file src="Dapper NET40\bin\Release\Dapper.dll" target="lib\net40" />
    <file src="Dapper NET40\bin\Release\Dapper.pdb" target="lib\net40" />
    <file src="Dapper NET40\bin\Release\Dapper.xml" target="lib\net40" />
    
    <file src="Dapper NET35\bin\Release\Dapper.dll" target="lib\net35" />
    <file src="Dapper NET35\bin\Release\Dapper.pdb" target="lib\net35" />
    <file src="Dapper NET35\bin\Release\Dapper.xml" target="lib\net35" />
  </files>
</package>
